
MXkit-L21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000052a0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000108  20000000  000052a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020108  2**0
                  CONTENTS
  3 .bss          000000d8  20000108  000053a8  00020108  2**2
                  ALLOC
  4 .stack        00002000  200001e0  00005480  00020108  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002645a  00000000  00000000  00020189  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003d1e  00000000  00000000  000465e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000bdd0  00000000  00000000  0004a301  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c40  00000000  00000000  000560d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000fd8  00000000  00000000  00056d11  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001e6e9  00000000  00000000  00057ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00014a68  00000000  00000000  000763d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008d8c3  00000000  00000000  0008ae3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000027f4  00000000  00000000  00118700  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e0 21 00 20 a5 04 00 00 a1 04 00 00 a1 04 00 00     .!. ............
	...
      2c:	a1 04 00 00 00 00 00 00 00 00 00 00 a1 04 00 00     ................
      3c:	a1 04 00 00 a1 04 00 00 a1 04 00 00 a1 04 00 00     ................
      4c:	a1 04 00 00 a1 04 00 00 a1 04 00 00 a1 04 00 00     ................
      5c:	a1 04 00 00 a1 04 00 00 a1 04 00 00 a1 04 00 00     ................
      6c:	a1 04 00 00 a1 04 00 00 a1 04 00 00 01 1b 00 00     ................
      7c:	a1 04 00 00 15 1b 00 00 4d 1e 00 00 a1 04 00 00     ........M.......
      8c:	a1 04 00 00 a1 04 00 00 a1 04 00 00 a1 04 00 00     ................
      9c:	a1 04 00 00 a1 04 00 00 a1 04 00 00 a1 04 00 00     ................
      ac:	a1 04 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000108 	.word	0x20000108
      d4:	00000000 	.word	0x00000000
      d8:	000052a0 	.word	0x000052a0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000010c 	.word	0x2000010c
     108:	000052a0 	.word	0x000052a0
     10c:	000052a0 	.word	0x000052a0
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b02      	ldr	r3, [pc, #8]	; (120 <atmel_start_init+0xc>)
     118:	4798      	blx	r3
	stdio_redirect_init();
     11a:	4b02      	ldr	r3, [pc, #8]	; (124 <atmel_start_init+0x10>)
     11c:	4798      	blx	r3
}
     11e:	bd10      	pop	{r4, pc}
     120:	0000086d 	.word	0x0000086d
     124:	00001f9d 	.word	0x00001f9d

00000128 <ssd1106_i2c_bus_init>:
#include <hal_i2c_m_sync.h>

extern struct i2c_m_sync_desc I2C_0;

int ssd1106_i2c_bus_init(void)
{
     128:	b510      	push	{r4, lr}
	I2C_0_init();
     12a:	4b06      	ldr	r3, [pc, #24]	; (144 <ssd1106_i2c_bus_init+0x1c>)
     12c:	4798      	blx	r3
	i2c_m_sync_set_baudrate(&I2C_0, 0, 100);
     12e:	4c06      	ldr	r4, [pc, #24]	; (148 <ssd1106_i2c_bus_init+0x20>)
     130:	2264      	movs	r2, #100	; 0x64
     132:	2100      	movs	r1, #0
     134:	0020      	movs	r0, r4
     136:	4b05      	ldr	r3, [pc, #20]	; (14c <ssd1106_i2c_bus_init+0x24>)
     138:	4798      	blx	r3
	return i2c_m_sync_enable(&I2C_0);
     13a:	0020      	movs	r0, r4
     13c:	4b04      	ldr	r3, [pc, #16]	; (150 <ssd1106_i2c_bus_init+0x28>)
     13e:	4798      	blx	r3
}
     140:	bd10      	pop	{r4, pc}
     142:	46c0      	nop			; (mov r8, r8)
     144:	000005b1 	.word	0x000005b1
     148:	200001bc 	.word	0x200001bc
     14c:	00000a15 	.word	0x00000a15
     150:	000009f5 	.word	0x000009f5

00000154 <ssd1106_i2c_bus_write>:

int ssd1106_i2c_bus_write(uint8_t reg_addr, uint8_t *reg_data, uint8_t cnt)
{	
     154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     156:	0005      	movs	r5, r0
     158:	000e      	movs	r6, r1
     15a:	0017      	movs	r7, r2
	int ret = 0;
	i2c_m_sync_set_slaveaddr(&I2C_0, 0x3c, 1);
     15c:	4c09      	ldr	r4, [pc, #36]	; (184 <ssd1106_i2c_bus_write+0x30>)
     15e:	2201      	movs	r2, #1
     160:	213c      	movs	r1, #60	; 0x3c
     162:	0020      	movs	r0, r4
     164:	4b08      	ldr	r3, [pc, #32]	; (188 <ssd1106_i2c_bus_write+0x34>)
     166:	4798      	blx	r3
	ret = i2c_m_sync_cmd_write(&I2C_0, reg_addr, reg_data, cnt);
     168:	003b      	movs	r3, r7
     16a:	0032      	movs	r2, r6
     16c:	0029      	movs	r1, r5
     16e:	0020      	movs	r0, r4
     170:	4c06      	ldr	r4, [pc, #24]	; (18c <ssd1106_i2c_bus_write+0x38>)
     172:	47a0      	blx	r4
     174:	1e04      	subs	r4, r0, #0
	
	if( ret ) printf("ssd1106_i2c_bus_write err\r\n");
     176:	d101      	bne.n	17c <ssd1106_i2c_bus_write+0x28>
	return ret;
}
     178:	0020      	movs	r0, r4
     17a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if( ret ) printf("ssd1106_i2c_bus_write err\r\n");
     17c:	4804      	ldr	r0, [pc, #16]	; (190 <ssd1106_i2c_bus_write+0x3c>)
     17e:	4b05      	ldr	r3, [pc, #20]	; (194 <ssd1106_i2c_bus_write+0x40>)
     180:	4798      	blx	r3
	return ret;
     182:	e7f9      	b.n	178 <ssd1106_i2c_bus_write+0x24>
     184:	200001bc 	.word	0x200001bc
     188:	00000a01 	.word	0x00000a01
     18c:	00000a21 	.word	0x00000a21
     190:	00004fe8 	.word	0x00004fe8
     194:	00003805 	.word	0x00003805

00000198 <OLED_WR_Bytes>:
{  
     198:	b510      	push	{r4, lr}
  if(cmd)
     19a:	2a00      	cmp	r2, #0
     19c:	d105      	bne.n	1aa <OLED_WR_Bytes+0x12>
    ssd1106_i2c_bus_write(0x00, dat, len);
     19e:	000a      	movs	r2, r1
     1a0:	0001      	movs	r1, r0
     1a2:	2000      	movs	r0, #0
     1a4:	4b04      	ldr	r3, [pc, #16]	; (1b8 <OLED_WR_Bytes+0x20>)
     1a6:	4798      	blx	r3
}
     1a8:	bd10      	pop	{r4, pc}
    ssd1106_i2c_bus_write(0x40, dat, len);
     1aa:	000a      	movs	r2, r1
     1ac:	0001      	movs	r1, r0
     1ae:	2040      	movs	r0, #64	; 0x40
     1b0:	4b01      	ldr	r3, [pc, #4]	; (1b8 <OLED_WR_Bytes+0x20>)
     1b2:	4798      	blx	r3
     1b4:	e7f8      	b.n	1a8 <OLED_WR_Bytes+0x10>
     1b6:	46c0      	nop			; (mov r8, r8)
     1b8:	00000155 	.word	0x00000155

000001bc <OLED_WR_Byte>:
{
     1bc:	b500      	push	{lr}
     1be:	b083      	sub	sp, #12
     1c0:	000a      	movs	r2, r1
     1c2:	466b      	mov	r3, sp
     1c4:	71d8      	strb	r0, [r3, #7]
     1c6:	3307      	adds	r3, #7
  OLED_WR_Bytes(&dat, 1, cmd);
     1c8:	2101      	movs	r1, #1
     1ca:	0018      	movs	r0, r3
     1cc:	4b01      	ldr	r3, [pc, #4]	; (1d4 <OLED_WR_Byte+0x18>)
     1ce:	4798      	blx	r3
}
     1d0:	b003      	add	sp, #12
     1d2:	bd00      	pop	{pc}
     1d4:	00000199 	.word	0x00000199

000001d8 <OLED_Set_Pos>:
{ 
     1d8:	b510      	push	{r4, lr}
     1da:	b082      	sub	sp, #8
  uint8_t tmp[3] = {0xb0+y, ((x&0xf0)>>4)|0x10, (x&0x0f)|0x01};
     1dc:	ac01      	add	r4, sp, #4
     1de:	3950      	subs	r1, #80	; 0x50
     1e0:	7021      	strb	r1, [r4, #0]
     1e2:	0902      	lsrs	r2, r0, #4
     1e4:	2310      	movs	r3, #16
     1e6:	431a      	orrs	r2, r3
     1e8:	7062      	strb	r2, [r4, #1]
     1ea:	230e      	movs	r3, #14
     1ec:	4003      	ands	r3, r0
     1ee:	2001      	movs	r0, #1
     1f0:	4303      	orrs	r3, r0
     1f2:	70a3      	strb	r3, [r4, #2]
  OLED_WR_Bytes( tmp, 3, OLED_CMD);
     1f4:	2200      	movs	r2, #0
     1f6:	2103      	movs	r1, #3
     1f8:	0020      	movs	r0, r4
     1fa:	4b02      	ldr	r3, [pc, #8]	; (204 <OLED_Set_Pos+0x2c>)
     1fc:	4798      	blx	r3
}   	  
     1fe:	b002      	add	sp, #8
     200:	bd10      	pop	{r4, pc}
     202:	46c0      	nop			; (mov r8, r8)
     204:	00000199 	.word	0x00000199

00000208 <OLED_Clear>:
{  
     208:	b570      	push	{r4, r5, r6, lr}
     20a:	b0a2      	sub	sp, #136	; 0x88
  uint8_t tmp_cmd[3] = {0X0, 0x00, 0x10};
     20c:	ab21      	add	r3, sp, #132	; 0x84
     20e:	2200      	movs	r2, #0
     210:	705a      	strb	r2, [r3, #1]
     212:	3210      	adds	r2, #16
     214:	709a      	strb	r2, [r3, #2]
  memset( tmp, 0x0, 128 );
     216:	3270      	adds	r2, #112	; 0x70
     218:	2100      	movs	r1, #0
     21a:	a801      	add	r0, sp, #4
     21c:	4b09      	ldr	r3, [pc, #36]	; (244 <OLED_Clear+0x3c>)
     21e:	4798      	blx	r3
     220:	24b0      	movs	r4, #176	; 0xb0
    tmp_cmd[0] = 0xb0+i;
     222:	ae21      	add	r6, sp, #132	; 0x84
    OLED_WR_Bytes( tmp_cmd, 3, OLED_CMD);
     224:	4d08      	ldr	r5, [pc, #32]	; (248 <OLED_Clear+0x40>)
    tmp_cmd[0] = 0xb0+i;
     226:	7034      	strb	r4, [r6, #0]
    OLED_WR_Bytes( tmp_cmd, 3, OLED_CMD);
     228:	2200      	movs	r2, #0
     22a:	2103      	movs	r1, #3
     22c:	0030      	movs	r0, r6
     22e:	47a8      	blx	r5
    OLED_WR_Bytes( tmp, 128, OLED_DATA);
     230:	2201      	movs	r2, #1
     232:	2180      	movs	r1, #128	; 0x80
     234:	a801      	add	r0, sp, #4
     236:	47a8      	blx	r5
     238:	3401      	adds	r4, #1
     23a:	b2e4      	uxtb	r4, r4
  for(i=0;i<8;i++)  
     23c:	2cb8      	cmp	r4, #184	; 0xb8
     23e:	d1f2      	bne.n	226 <OLED_Clear+0x1e>
}
     240:	b022      	add	sp, #136	; 0x88
     242:	bd70      	pop	{r4, r5, r6, pc}
     244:	00003701 	.word	0x00003701
     248:	00000199 	.word	0x00000199

0000024c <OLED_Init>:
{
     24c:	b510      	push	{r4, lr}
  if( ssd1106_i2c_bus_init() )
     24e:	4b34      	ldr	r3, [pc, #208]	; (320 <OLED_Init+0xd4>)
     250:	4798      	blx	r3
     252:	2800      	cmp	r0, #0
     254:	d160      	bne.n	318 <OLED_Init+0xcc>

void ssd1106_delay_ms(uint16_t nms)
{
  delay_ms(nms);
     256:	2064      	movs	r0, #100	; 0x64
     258:	4c32      	ldr	r4, [pc, #200]	; (324 <OLED_Init+0xd8>)
     25a:	47a0      	blx	r4
     25c:	2064      	movs	r0, #100	; 0x64
     25e:	47a0      	blx	r4
  OLED_WR_Byte(0xAE,OLED_CMD);//--turn off oled panel
     260:	2100      	movs	r1, #0
     262:	20ae      	movs	r0, #174	; 0xae
     264:	4c30      	ldr	r4, [pc, #192]	; (328 <OLED_Init+0xdc>)
     266:	47a0      	blx	r4
  OLED_WR_Byte(0x00,OLED_CMD);//---set low column address
     268:	2100      	movs	r1, #0
     26a:	2000      	movs	r0, #0
     26c:	47a0      	blx	r4
  OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
     26e:	2100      	movs	r1, #0
     270:	2010      	movs	r0, #16
     272:	47a0      	blx	r4
  OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
     274:	2100      	movs	r1, #0
     276:	2040      	movs	r0, #64	; 0x40
     278:	47a0      	blx	r4
  OLED_WR_Byte(0x81,OLED_CMD);//--set contrast control register
     27a:	2100      	movs	r1, #0
     27c:	2081      	movs	r0, #129	; 0x81
     27e:	47a0      	blx	r4
  OLED_WR_Byte(0xCF,OLED_CMD); // Set SEG Output Current Brightness
     280:	2100      	movs	r1, #0
     282:	20cf      	movs	r0, #207	; 0xcf
     284:	47a0      	blx	r4
  OLED_WR_Byte(0xA1,OLED_CMD);//--Set SEG/Column Mapping
     286:	2100      	movs	r1, #0
     288:	20a1      	movs	r0, #161	; 0xa1
     28a:	47a0      	blx	r4
  OLED_WR_Byte(0xC8,OLED_CMD);//Set COM/Row Scan Direction
     28c:	2100      	movs	r1, #0
     28e:	20c8      	movs	r0, #200	; 0xc8
     290:	47a0      	blx	r4
  OLED_WR_Byte(0xA6,OLED_CMD);//--set normal display
     292:	2100      	movs	r1, #0
     294:	20a6      	movs	r0, #166	; 0xa6
     296:	47a0      	blx	r4
  OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
     298:	2100      	movs	r1, #0
     29a:	20a8      	movs	r0, #168	; 0xa8
     29c:	47a0      	blx	r4
  OLED_WR_Byte(0x3f,OLED_CMD);//--1/64 duty
     29e:	2100      	movs	r1, #0
     2a0:	203f      	movs	r0, #63	; 0x3f
     2a2:	47a0      	blx	r4
  OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
     2a4:	2100      	movs	r1, #0
     2a6:	20d3      	movs	r0, #211	; 0xd3
     2a8:	47a0      	blx	r4
  OLED_WR_Byte(0x00,OLED_CMD);//-not offset
     2aa:	2100      	movs	r1, #0
     2ac:	2000      	movs	r0, #0
     2ae:	47a0      	blx	r4
  OLED_WR_Byte(0xd5,OLED_CMD);//--set display clock divide ratio/oscillator frequency
     2b0:	2100      	movs	r1, #0
     2b2:	20d5      	movs	r0, #213	; 0xd5
     2b4:	47a0      	blx	r4
  OLED_WR_Byte(0x80,OLED_CMD);//--set divide ratio, Set Clock as 100 Frames/Sec
     2b6:	2100      	movs	r1, #0
     2b8:	2080      	movs	r0, #128	; 0x80
     2ba:	47a0      	blx	r4
  OLED_WR_Byte(0xD9,OLED_CMD);//--set pre-charge period
     2bc:	2100      	movs	r1, #0
     2be:	20d9      	movs	r0, #217	; 0xd9
     2c0:	47a0      	blx	r4
  OLED_WR_Byte(0xF1,OLED_CMD);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
     2c2:	2100      	movs	r1, #0
     2c4:	20f1      	movs	r0, #241	; 0xf1
     2c6:	47a0      	blx	r4
  OLED_WR_Byte(0xDA,OLED_CMD);//--set com pins hardware configuration
     2c8:	2100      	movs	r1, #0
     2ca:	20da      	movs	r0, #218	; 0xda
     2cc:	47a0      	blx	r4
  OLED_WR_Byte(0x12,OLED_CMD);
     2ce:	2100      	movs	r1, #0
     2d0:	2012      	movs	r0, #18
     2d2:	47a0      	blx	r4
  OLED_WR_Byte(0xDB,OLED_CMD);//--set vcomh
     2d4:	2100      	movs	r1, #0
     2d6:	20db      	movs	r0, #219	; 0xdb
     2d8:	47a0      	blx	r4
  OLED_WR_Byte(0x40,OLED_CMD);//Set VCOM Deselect Level
     2da:	2100      	movs	r1, #0
     2dc:	2040      	movs	r0, #64	; 0x40
     2de:	47a0      	blx	r4
  OLED_WR_Byte(0x20,OLED_CMD);//-Set Page Addressing Mode (0x00/0x01/0x02)
     2e0:	2100      	movs	r1, #0
     2e2:	2020      	movs	r0, #32
     2e4:	47a0      	blx	r4
  OLED_WR_Byte(0x02,OLED_CMD);//
     2e6:	2100      	movs	r1, #0
     2e8:	2002      	movs	r0, #2
     2ea:	47a0      	blx	r4
  OLED_WR_Byte(0x8D,OLED_CMD);//--set Charge Pump enable/disable
     2ec:	2100      	movs	r1, #0
     2ee:	208d      	movs	r0, #141	; 0x8d
     2f0:	47a0      	blx	r4
  OLED_WR_Byte(0x14,OLED_CMD);//--set(0x10) disable
     2f2:	2100      	movs	r1, #0
     2f4:	2014      	movs	r0, #20
     2f6:	47a0      	blx	r4
  OLED_WR_Byte(0xA4,OLED_CMD);// Disable Entire Display On (0xa4/0xa5)
     2f8:	2100      	movs	r1, #0
     2fa:	20a4      	movs	r0, #164	; 0xa4
     2fc:	47a0      	blx	r4
  OLED_WR_Byte(0xA6,OLED_CMD);// Disable Inverse Display On (0xa6/a7)   
     2fe:	2100      	movs	r1, #0
     300:	20a6      	movs	r0, #166	; 0xa6
     302:	47a0      	blx	r4
  OLED_Clear();
     304:	4b09      	ldr	r3, [pc, #36]	; (32c <OLED_Init+0xe0>)
     306:	4798      	blx	r3
  OLED_Set_Pos(0,0); 	
     308:	2100      	movs	r1, #0
     30a:	2000      	movs	r0, #0
     30c:	4b08      	ldr	r3, [pc, #32]	; (330 <OLED_Init+0xe4>)
     30e:	4798      	blx	r3
  OLED_WR_Byte(0xAF,OLED_CMD); /*display ON*/ 
     310:	2100      	movs	r1, #0
     312:	20af      	movs	r0, #175	; 0xaf
     314:	47a0      	blx	r4
}  
     316:	bd10      	pop	{r4, pc}
      printf( "OLED_ERROR: I2C port init err." );
     318:	4806      	ldr	r0, [pc, #24]	; (334 <OLED_Init+0xe8>)
     31a:	4b07      	ldr	r3, [pc, #28]	; (338 <OLED_Init+0xec>)
     31c:	4798      	blx	r3
      return;
     31e:	e7fa      	b.n	316 <OLED_Init+0xca>
     320:	00000129 	.word	0x00000129
     324:	00000935 	.word	0x00000935
     328:	000001bd 	.word	0x000001bd
     32c:	00000209 	.word	0x00000209
     330:	000001d9 	.word	0x000001d9
     334:	00005004 	.word	0x00005004
     338:	00003711 	.word	0x00003711

0000033c <OLED_FillAll>:
{
     33c:	b570      	push	{r4, r5, r6, lr}
     33e:	b0a2      	sub	sp, #136	; 0x88
  uint8_t tmp_cmd[3] = {0X0, 0x00, 0x10};
     340:	ab21      	add	r3, sp, #132	; 0x84
     342:	2200      	movs	r2, #0
     344:	705a      	strb	r2, [r3, #1]
     346:	3210      	adds	r2, #16
     348:	709a      	strb	r2, [r3, #2]
  memset( tmp, 0xFF, 128 );
     34a:	3270      	adds	r2, #112	; 0x70
     34c:	21ff      	movs	r1, #255	; 0xff
     34e:	a801      	add	r0, sp, #4
     350:	4b09      	ldr	r3, [pc, #36]	; (378 <OLED_FillAll+0x3c>)
     352:	4798      	blx	r3
     354:	24b0      	movs	r4, #176	; 0xb0
    tmp_cmd[0] = 0xb0+i;
     356:	ae21      	add	r6, sp, #132	; 0x84
    OLED_WR_Bytes( tmp_cmd, 3, OLED_CMD);
     358:	4d08      	ldr	r5, [pc, #32]	; (37c <OLED_FillAll+0x40>)
    tmp_cmd[0] = 0xb0+i;
     35a:	7034      	strb	r4, [r6, #0]
    OLED_WR_Bytes( tmp_cmd, 3, OLED_CMD);
     35c:	2200      	movs	r2, #0
     35e:	2103      	movs	r1, #3
     360:	0030      	movs	r0, r6
     362:	47a8      	blx	r5
    OLED_WR_Bytes( tmp, 128, OLED_DATA);
     364:	2201      	movs	r2, #1
     366:	2180      	movs	r1, #128	; 0x80
     368:	a801      	add	r0, sp, #4
     36a:	47a8      	blx	r5
     36c:	3401      	adds	r4, #1
     36e:	b2e4      	uxtb	r4, r4
  for(i=0;i<8;i++)
     370:	2cb8      	cmp	r4, #184	; 0xb8
     372:	d1f2      	bne.n	35a <OLED_FillAll+0x1e>
}
     374:	b022      	add	sp, #136	; 0x88
     376:	bd70      	pop	{r4, r5, r6, pc}
     378:	00003701 	.word	0x00003701
     37c:	00000199 	.word	0x00000199

00000380 <OLED_ShowChar>:
{      	
     380:	b5f0      	push	{r4, r5, r6, r7, lr}
     382:	46c6      	mov	lr, r8
     384:	b500      	push	{lr}
     386:	b082      	sub	sp, #8
     388:	9001      	str	r0, [sp, #4]
     38a:	000e      	movs	r6, r1
  c=chr-' ';
     38c:	3a20      	subs	r2, #32
     38e:	b2d4      	uxtb	r4, r2
  if(x>Max_Column-1){x=0;y=y+2;}
     390:	b243      	sxtb	r3, r0
     392:	2b00      	cmp	r3, #0
     394:	db1a      	blt.n	3cc <OLED_ShowChar+0x4c>
    OLED_Set_Pos(x,y);	
     396:	0031      	movs	r1, r6
     398:	9801      	ldr	r0, [sp, #4]
     39a:	4b0f      	ldr	r3, [pc, #60]	; (3d8 <OLED_ShowChar+0x58>)
     39c:	4698      	mov	r8, r3
     39e:	4798      	blx	r3
    OLED_WR_Bytes( (uint8_t *)&F8X16[c*16], 8, OLED_DATA );
     3a0:	0124      	lsls	r4, r4, #4
     3a2:	4f0e      	ldr	r7, [pc, #56]	; (3dc <OLED_ShowChar+0x5c>)
     3a4:	3708      	adds	r7, #8
     3a6:	1938      	adds	r0, r7, r4
     3a8:	2201      	movs	r2, #1
     3aa:	2108      	movs	r1, #8
     3ac:	4d0c      	ldr	r5, [pc, #48]	; (3e0 <OLED_ShowChar+0x60>)
     3ae:	47a8      	blx	r5
    OLED_Set_Pos(x,y+1);
     3b0:	3601      	adds	r6, #1
     3b2:	b2f1      	uxtb	r1, r6
     3b4:	9801      	ldr	r0, [sp, #4]
     3b6:	47c0      	blx	r8
    OLED_WR_Bytes( (uint8_t *)&F8X16[c*16+8], 8, OLED_DATA );
     3b8:	0020      	movs	r0, r4
     3ba:	3008      	adds	r0, #8
     3bc:	1838      	adds	r0, r7, r0
     3be:	2201      	movs	r2, #1
     3c0:	2108      	movs	r1, #8
     3c2:	47a8      	blx	r5
}
     3c4:	b002      	add	sp, #8
     3c6:	bc04      	pop	{r2}
     3c8:	4690      	mov	r8, r2
     3ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(x>Max_Column-1){x=0;y=y+2;}
     3cc:	3602      	adds	r6, #2
     3ce:	b2f6      	uxtb	r6, r6
     3d0:	2300      	movs	r3, #0
     3d2:	9301      	str	r3, [sp, #4]
     3d4:	e7df      	b.n	396 <OLED_ShowChar+0x16>
     3d6:	46c0      	nop			; (mov r8, r8)
     3d8:	000001d9 	.word	0x000001d9
     3dc:	000047c8 	.word	0x000047c8
     3e0:	00000199 	.word	0x00000199

000003e4 <OLED_ShowString>:
{
     3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3e6:	46de      	mov	lr, fp
     3e8:	4657      	mov	r7, sl
     3ea:	464e      	mov	r6, r9
     3ec:	4645      	mov	r5, r8
     3ee:	b5e0      	push	{r5, r6, r7, lr}
     3f0:	0006      	movs	r6, r0
     3f2:	000d      	movs	r5, r1
     3f4:	4691      	mov	r9, r2
  unsigned char j=0;
     3f6:	2700      	movs	r7, #0
        OLED_ShowChar(x_t,y_t,' ');
     3f8:	4b28      	ldr	r3, [pc, #160]	; (49c <OLED_ShowString+0xb8>)
     3fa:	4698      	mov	r8, r3
      OLED_ShowChar(x_t,y_t,chr[j]);
     3fc:	469b      	mov	fp, r3
        OLED_ShowChar(x_t,y_t,' ');
     3fe:	469a      	mov	sl, r3
  while (chr[j]!='\0')
     400:	e034      	b.n	46c <OLED_ShowString+0x88>
    if( ('\r' == chr[j]) && ('\n' == chr[j+1]) ){  // CR LF
     402:	444b      	add	r3, r9
     404:	785b      	ldrb	r3, [r3, #1]
     406:	2b0a      	cmp	r3, #10
     408:	d014      	beq.n	434 <OLED_ShowString+0x50>
      while(x_t <= 120){  // fill rest chars in current line
     40a:	2e78      	cmp	r6, #120	; 0x78
     40c:	d80f      	bhi.n	42e <OLED_ShowString+0x4a>
     40e:	0034      	movs	r4, r6
        OLED_ShowChar(x_t,y_t,' ');
     410:	2220      	movs	r2, #32
     412:	0029      	movs	r1, r5
     414:	0020      	movs	r0, r4
     416:	47c0      	blx	r8
        x_t += 8;
     418:	3408      	adds	r4, #8
     41a:	b2e4      	uxtb	r4, r4
      while(x_t <= 120){  // fill rest chars in current line
     41c:	2c78      	cmp	r4, #120	; 0x78
     41e:	d9f7      	bls.n	410 <OLED_ShowString+0x2c>
     420:	2378      	movs	r3, #120	; 0x78
     422:	1b9b      	subs	r3, r3, r6
     424:	22f8      	movs	r2, #248	; 0xf8
     426:	4013      	ands	r3, r2
     428:	3608      	adds	r6, #8
     42a:	18f6      	adds	r6, r6, r3
     42c:	b2f6      	uxtb	r6, r6
      j += 1;
     42e:	3701      	adds	r7, #1
     430:	b2ff      	uxtb	r7, r7
     432:	e01b      	b.n	46c <OLED_ShowString+0x88>
      while(x_t <= 120){  // fill rest chars in current line
     434:	2e78      	cmp	r6, #120	; 0x78
     436:	d80f      	bhi.n	458 <OLED_ShowString+0x74>
     438:	0034      	movs	r4, r6
        OLED_ShowChar(x_t,y_t,' ');
     43a:	2220      	movs	r2, #32
     43c:	0029      	movs	r1, r5
     43e:	0020      	movs	r0, r4
     440:	47d0      	blx	sl
        x_t += 8;
     442:	3408      	adds	r4, #8
     444:	b2e4      	uxtb	r4, r4
      while(x_t <= 120){  // fill rest chars in current line
     446:	2c78      	cmp	r4, #120	; 0x78
     448:	d9f7      	bls.n	43a <OLED_ShowString+0x56>
     44a:	2378      	movs	r3, #120	; 0x78
     44c:	1b9b      	subs	r3, r3, r6
     44e:	22f8      	movs	r2, #248	; 0xf8
     450:	4013      	ands	r3, r2
     452:	3608      	adds	r6, #8
     454:	18f6      	adds	r6, r6, r3
     456:	b2f6      	uxtb	r6, r6
      j += 2;
     458:	3702      	adds	r7, #2
     45a:	b2ff      	uxtb	r7, r7
     45c:	e006      	b.n	46c <OLED_ShowString+0x88>
      OLED_ShowChar(x_t,y_t,chr[j]);
     45e:	0029      	movs	r1, r5
     460:	0030      	movs	r0, r6
     462:	47d8      	blx	fp
      x_t += 8;
     464:	3608      	adds	r6, #8
     466:	b2f6      	uxtb	r6, r6
      j++;
     468:	3701      	adds	r7, #1
     46a:	b2ff      	uxtb	r7, r7
  while (chr[j]!='\0')
     46c:	003b      	movs	r3, r7
     46e:	464a      	mov	r2, r9
     470:	5dd2      	ldrb	r2, [r2, r7]
     472:	2a00      	cmp	r2, #0
     474:	d00b      	beq.n	48e <OLED_ShowString+0xaa>
    if( ('\r' == chr[j]) && ('\n' == chr[j+1]) ){  // CR LF
     476:	2a0d      	cmp	r2, #13
     478:	d0c3      	beq.n	402 <OLED_ShowString+0x1e>
    else if( ('\r' == chr[j]) || ('\n' == chr[j]) ){   // CR or LF
     47a:	2a0a      	cmp	r2, #10
     47c:	d0c5      	beq.n	40a <OLED_ShowString+0x26>
      if(x_t>120){  // line end, goto next line
     47e:	2e78      	cmp	r6, #120	; 0x78
     480:	d9ed      	bls.n	45e <OLED_ShowString+0x7a>
        y_t += 2;
     482:	3502      	adds	r5, #2
     484:	b2ed      	uxtb	r5, r5
        if(y_t >= 8){  // can only display 4 line
     486:	2d07      	cmp	r5, #7
     488:	d801      	bhi.n	48e <OLED_ShowString+0xaa>
        x_t = 0;
     48a:	2600      	movs	r6, #0
     48c:	e7e7      	b.n	45e <OLED_ShowString+0x7a>
}
     48e:	bc3c      	pop	{r2, r3, r4, r5}
     490:	4690      	mov	r8, r2
     492:	4699      	mov	r9, r3
     494:	46a2      	mov	sl, r4
     496:	46ab      	mov	fp, r5
     498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     49a:	46c0      	nop			; (mov r8, r8)
     49c:	00000381 	.word	0x00000381

000004a0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     4a0:	e7fe      	b.n	4a0 <Dummy_Handler>
	...

000004a4 <Reset_Handler>:
{
     4a4:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     4a6:	4a1a      	ldr	r2, [pc, #104]	; (510 <Reset_Handler+0x6c>)
     4a8:	4b1a      	ldr	r3, [pc, #104]	; (514 <Reset_Handler+0x70>)
     4aa:	429a      	cmp	r2, r3
     4ac:	d011      	beq.n	4d2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     4ae:	001a      	movs	r2, r3
     4b0:	4b19      	ldr	r3, [pc, #100]	; (518 <Reset_Handler+0x74>)
     4b2:	429a      	cmp	r2, r3
     4b4:	d20d      	bcs.n	4d2 <Reset_Handler+0x2e>
     4b6:	4a19      	ldr	r2, [pc, #100]	; (51c <Reset_Handler+0x78>)
     4b8:	3303      	adds	r3, #3
     4ba:	1a9b      	subs	r3, r3, r2
     4bc:	089b      	lsrs	r3, r3, #2
     4be:	3301      	adds	r3, #1
     4c0:	009b      	lsls	r3, r3, #2
     4c2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     4c4:	4813      	ldr	r0, [pc, #76]	; (514 <Reset_Handler+0x70>)
     4c6:	4912      	ldr	r1, [pc, #72]	; (510 <Reset_Handler+0x6c>)
     4c8:	588c      	ldr	r4, [r1, r2]
     4ca:	5084      	str	r4, [r0, r2]
     4cc:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     4ce:	429a      	cmp	r2, r3
     4d0:	d1fa      	bne.n	4c8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     4d2:	4a13      	ldr	r2, [pc, #76]	; (520 <Reset_Handler+0x7c>)
     4d4:	4b13      	ldr	r3, [pc, #76]	; (524 <Reset_Handler+0x80>)
     4d6:	429a      	cmp	r2, r3
     4d8:	d20a      	bcs.n	4f0 <Reset_Handler+0x4c>
     4da:	43d3      	mvns	r3, r2
     4dc:	4911      	ldr	r1, [pc, #68]	; (524 <Reset_Handler+0x80>)
     4de:	185b      	adds	r3, r3, r1
     4e0:	2103      	movs	r1, #3
     4e2:	438b      	bics	r3, r1
     4e4:	3304      	adds	r3, #4
     4e6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     4e8:	2100      	movs	r1, #0
     4ea:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     4ec:	4293      	cmp	r3, r2
     4ee:	d1fc      	bne.n	4ea <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     4f0:	4a0d      	ldr	r2, [pc, #52]	; (528 <Reset_Handler+0x84>)
     4f2:	21ff      	movs	r1, #255	; 0xff
     4f4:	4b0d      	ldr	r3, [pc, #52]	; (52c <Reset_Handler+0x88>)
     4f6:	438b      	bics	r3, r1
     4f8:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
     4fa:	4a0d      	ldr	r2, [pc, #52]	; (530 <Reset_Handler+0x8c>)
     4fc:	6853      	ldr	r3, [r2, #4]
     4fe:	397f      	subs	r1, #127	; 0x7f
     500:	430b      	orrs	r3, r1
     502:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     504:	4b0b      	ldr	r3, [pc, #44]	; (534 <Reset_Handler+0x90>)
     506:	4798      	blx	r3
        main();
     508:	4b0b      	ldr	r3, [pc, #44]	; (538 <Reset_Handler+0x94>)
     50a:	4798      	blx	r3
     50c:	e7fe      	b.n	50c <Reset_Handler+0x68>
     50e:	46c0      	nop			; (mov r8, r8)
     510:	000052a0 	.word	0x000052a0
     514:	20000000 	.word	0x20000000
     518:	20000108 	.word	0x20000108
     51c:	20000004 	.word	0x20000004
     520:	20000108 	.word	0x20000108
     524:	200001e0 	.word	0x200001e0
     528:	e000ed00 	.word	0xe000ed00
     52c:	00000000 	.word	0x00000000
     530:	41004000 	.word	0x41004000
     534:	000036b9 	.word	0x000036b9
     538:	00001e85 	.word	0x00001e85

0000053c <I2C_0_PORT_init>:
struct pwm_descriptor PWM_R;

struct pwm_descriptor PWM_G;

void I2C_0_PORT_init(void)
{
     53c:	b570      	push	{r4, r5, r6, lr}
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     53e:	4b12      	ldr	r3, [pc, #72]	; (588 <I2C_0_PORT_init+0x4c>)
     540:	2048      	movs	r0, #72	; 0x48
     542:	5c19      	ldrb	r1, [r3, r0]
     544:	2204      	movs	r2, #4
     546:	4391      	bics	r1, r2
     548:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     54a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     54c:	2501      	movs	r5, #1
     54e:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     550:	2401      	movs	r4, #1
     552:	4321      	orrs	r1, r4
     554:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     556:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     558:	3814      	subs	r0, #20
     55a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     55c:	260f      	movs	r6, #15
     55e:	43b1      	bics	r1, r6
	tmp |= PORT_PMUX_PMUXE(data);
     560:	3e0d      	subs	r6, #13
     562:	4331      	orrs	r1, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     564:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     566:	2149      	movs	r1, #73	; 0x49
     568:	5c5e      	ldrb	r6, [r3, r1]
     56a:	4396      	bics	r6, r2
     56c:	545e      	strb	r6, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     56e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     570:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     572:	4322      	orrs	r2, r4
     574:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     576:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     578:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     57a:	393a      	subs	r1, #58	; 0x3a
     57c:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     57e:	3111      	adds	r1, #17
     580:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     582:	541a      	strb	r2, [r3, r0]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA09, PINMUX_PA09C_SERCOM0_PAD1);
}
     584:	bd70      	pop	{r4, r5, r6, pc}
     586:	46c0      	nop			; (mov r8, r8)
     588:	40002800 	.word	0x40002800

0000058c <I2C_0_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     58c:	4b06      	ldr	r3, [pc, #24]	; (5a8 <I2C_0_CLOCK_init+0x1c>)
     58e:	2140      	movs	r1, #64	; 0x40
     590:	22c8      	movs	r2, #200	; 0xc8
     592:	5099      	str	r1, [r3, r2]
     594:	3103      	adds	r1, #3
     596:	3a04      	subs	r2, #4
     598:	5099      	str	r1, [r3, r2]
}

static inline void hri_mclk_set_APBCMASK_SERCOM0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM0;
     59a:	4a04      	ldr	r2, [pc, #16]	; (5ac <I2C_0_CLOCK_init+0x20>)
     59c:	69d3      	ldr	r3, [r2, #28]
     59e:	3942      	subs	r1, #66	; 0x42
     5a0:	430b      	orrs	r3, r1
     5a2:	61d3      	str	r3, [r2, #28]
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBCMASK_SERCOM0_bit(MCLK);
}
     5a4:	4770      	bx	lr
     5a6:	46c0      	nop			; (mov r8, r8)
     5a8:	40001800 	.word	0x40001800
     5ac:	40000400 	.word	0x40000400

000005b0 <I2C_0_init>:

void I2C_0_init(void)
{
     5b0:	b510      	push	{r4, lr}
	I2C_0_CLOCK_init();
     5b2:	4b05      	ldr	r3, [pc, #20]	; (5c8 <I2C_0_init+0x18>)
     5b4:	4798      	blx	r3
	i2c_m_sync_init(&I2C_0, SERCOM0);
     5b6:	2184      	movs	r1, #132	; 0x84
     5b8:	05c9      	lsls	r1, r1, #23
     5ba:	4804      	ldr	r0, [pc, #16]	; (5cc <I2C_0_init+0x1c>)
     5bc:	4b04      	ldr	r3, [pc, #16]	; (5d0 <I2C_0_init+0x20>)
     5be:	4798      	blx	r3
	I2C_0_PORT_init();
     5c0:	4b04      	ldr	r3, [pc, #16]	; (5d4 <I2C_0_init+0x24>)
     5c2:	4798      	blx	r3
}
     5c4:	bd10      	pop	{r4, pc}
     5c6:	46c0      	nop			; (mov r8, r8)
     5c8:	0000058d 	.word	0x0000058d
     5cc:	200001bc 	.word	0x200001bc
     5d0:	000009b5 	.word	0x000009b5
     5d4:	0000053d 	.word	0x0000053d

000005d8 <TARGET_IO_PORT_init>:

void TARGET_IO_PORT_init(void)
{
     5d8:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5da:	4b0e      	ldr	r3, [pc, #56]	; (614 <TARGET_IO_PORT_init+0x3c>)
     5dc:	2256      	movs	r2, #86	; 0x56
     5de:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5e0:	2501      	movs	r5, #1
     5e2:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5e4:	2401      	movs	r4, #1
     5e6:	4321      	orrs	r1, r4
     5e8:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5ea:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5ec:	203b      	movs	r0, #59	; 0x3b
     5ee:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5f0:	3a47      	subs	r2, #71	; 0x47
     5f2:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     5f4:	3a0d      	subs	r2, #13
     5f6:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5f8:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5fa:	2157      	movs	r1, #87	; 0x57
     5fc:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5fe:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     600:	4322      	orrs	r2, r4
     602:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     604:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     606:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     608:	3948      	subs	r1, #72	; 0x48
     60a:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     60c:	3111      	adds	r1, #17
     60e:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     610:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA22, PINMUX_PA22C_SERCOM3_PAD0);

	gpio_set_pin_function(PA23, PINMUX_PA23C_SERCOM3_PAD1);
}
     612:	bd30      	pop	{r4, r5, pc}
     614:	40002800 	.word	0x40002800

00000618 <TARGET_IO_CLOCK_init>:
     618:	4b06      	ldr	r3, [pc, #24]	; (634 <TARGET_IO_CLOCK_init+0x1c>)
     61a:	2140      	movs	r1, #64	; 0x40
     61c:	22d4      	movs	r2, #212	; 0xd4
     61e:	5099      	str	r1, [r3, r2]
     620:	3103      	adds	r1, #3
     622:	3a10      	subs	r2, #16
     624:	5099      	str	r1, [r3, r2]
}

static inline void hri_mclk_set_APBCMASK_SERCOM3_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM3;
     626:	4a04      	ldr	r2, [pc, #16]	; (638 <TARGET_IO_CLOCK_init+0x20>)
     628:	69d3      	ldr	r3, [r2, #28]
     62a:	393b      	subs	r1, #59	; 0x3b
     62c:	430b      	orrs	r3, r1
     62e:	61d3      	str	r3, [r2, #28]
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_SLOW, CONF_GCLK_SERCOM3_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBCMASK_SERCOM3_bit(MCLK);
}
     630:	4770      	bx	lr
     632:	46c0      	nop			; (mov r8, r8)
     634:	40001800 	.word	0x40001800
     638:	40000400 	.word	0x40000400

0000063c <TARGET_IO_init>:

void TARGET_IO_init(void)
{
     63c:	b510      	push	{r4, lr}
	TARGET_IO_CLOCK_init();
     63e:	4b05      	ldr	r3, [pc, #20]	; (654 <TARGET_IO_init+0x18>)
     640:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM3, (void *)NULL);
     642:	2200      	movs	r2, #0
     644:	4904      	ldr	r1, [pc, #16]	; (658 <TARGET_IO_init+0x1c>)
     646:	4805      	ldr	r0, [pc, #20]	; (65c <TARGET_IO_init+0x20>)
     648:	4b05      	ldr	r3, [pc, #20]	; (660 <TARGET_IO_init+0x24>)
     64a:	4798      	blx	r3
	TARGET_IO_PORT_init();
     64c:	4b05      	ldr	r3, [pc, #20]	; (664 <TARGET_IO_init+0x28>)
     64e:	4798      	blx	r3
}
     650:	bd10      	pop	{r4, pc}
     652:	46c0      	nop			; (mov r8, r8)
     654:	00000619 	.word	0x00000619
     658:	42000c00 	.word	0x42000c00
     65c:	20000164 	.word	0x20000164
     660:	00000c0d 	.word	0x00000c0d
     664:	000005d9 	.word	0x000005d9

00000668 <USART_AT_PORT_init>:

void USART_AT_PORT_init(void)
{
     668:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     66a:	4b0e      	ldr	r3, [pc, #56]	; (6a4 <USART_AT_PORT_init+0x3c>)
     66c:	22c8      	movs	r2, #200	; 0xc8
     66e:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     670:	2501      	movs	r5, #1
     672:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     674:	2401      	movs	r4, #1
     676:	4321      	orrs	r1, r4
     678:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     67a:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     67c:	20b4      	movs	r0, #180	; 0xb4
     67e:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     680:	3ab9      	subs	r2, #185	; 0xb9
     682:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     684:	3a0c      	subs	r2, #12
     686:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     688:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     68a:	21c9      	movs	r1, #201	; 0xc9
     68c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     68e:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     690:	4322      	orrs	r2, r4
     692:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     694:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     696:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     698:	39ba      	subs	r1, #186	; 0xba
     69a:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     69c:	3121      	adds	r1, #33	; 0x21
     69e:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6a0:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PB08, PINMUX_PB08D_SERCOM4_PAD0);

	gpio_set_pin_function(PB09, PINMUX_PB09D_SERCOM4_PAD1);
}
     6a2:	bd30      	pop	{r4, r5, pc}
     6a4:	40002800 	.word	0x40002800

000006a8 <USART_AT_CLOCK_init>:
     6a8:	4b06      	ldr	r3, [pc, #24]	; (6c4 <USART_AT_CLOCK_init+0x1c>)
     6aa:	2140      	movs	r1, #64	; 0x40
     6ac:	22d8      	movs	r2, #216	; 0xd8
     6ae:	5099      	str	r1, [r3, r2]
     6b0:	3103      	adds	r1, #3
     6b2:	3a14      	subs	r2, #20
     6b4:	5099      	str	r1, [r3, r2]
}

static inline void hri_mclk_set_APBCMASK_SERCOM4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM4;
     6b6:	4a04      	ldr	r2, [pc, #16]	; (6c8 <USART_AT_CLOCK_init+0x20>)
     6b8:	69d3      	ldr	r3, [r2, #28]
     6ba:	3933      	subs	r1, #51	; 0x33
     6bc:	430b      	orrs	r3, r1
     6be:	61d3      	str	r3, [r2, #28]
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBCMASK_SERCOM4_bit(MCLK);
}
     6c0:	4770      	bx	lr
     6c2:	46c0      	nop			; (mov r8, r8)
     6c4:	40001800 	.word	0x40001800
     6c8:	40000400 	.word	0x40000400

000006cc <USART_AT_init>:

void USART_AT_init(void)
{
     6cc:	b510      	push	{r4, lr}
	USART_AT_CLOCK_init();
     6ce:	4b05      	ldr	r3, [pc, #20]	; (6e4 <USART_AT_init+0x18>)
     6d0:	4798      	blx	r3
	usart_sync_init(&USART_AT, SERCOM4, (void *)NULL);
     6d2:	2200      	movs	r2, #0
     6d4:	4904      	ldr	r1, [pc, #16]	; (6e8 <USART_AT_init+0x1c>)
     6d6:	4805      	ldr	r0, [pc, #20]	; (6ec <USART_AT_init+0x20>)
     6d8:	4b05      	ldr	r3, [pc, #20]	; (6f0 <USART_AT_init+0x24>)
     6da:	4798      	blx	r3
	USART_AT_PORT_init();
     6dc:	4b05      	ldr	r3, [pc, #20]	; (6f4 <USART_AT_init+0x28>)
     6de:	4798      	blx	r3
}
     6e0:	bd10      	pop	{r4, pc}
     6e2:	46c0      	nop			; (mov r8, r8)
     6e4:	000006a9 	.word	0x000006a9
     6e8:	42001000 	.word	0x42001000
     6ec:	20000190 	.word	0x20000190
     6f0:	00000c0d 	.word	0x00000c0d
     6f4:	00000669 	.word	0x00000669

000006f8 <delay_driver_init>:

void delay_driver_init(void)
{
     6f8:	b510      	push	{r4, lr}
	delay_init(SysTick);
     6fa:	4802      	ldr	r0, [pc, #8]	; (704 <delay_driver_init+0xc>)
     6fc:	4b02      	ldr	r3, [pc, #8]	; (708 <delay_driver_init+0x10>)
     6fe:	4798      	blx	r3
}
     700:	bd10      	pop	{r4, pc}
     702:	46c0      	nop			; (mov r8, r8)
     704:	e000e010 	.word	0xe000e010
     708:	00000921 	.word	0x00000921

0000070c <PWM_B_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     70c:	4a07      	ldr	r2, [pc, #28]	; (72c <PWM_B_PORT_init+0x20>)
     70e:	21cc      	movs	r1, #204	; 0xcc
     710:	5c53      	ldrb	r3, [r2, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     712:	2001      	movs	r0, #1
     714:	4383      	bics	r3, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     716:	4303      	orrs	r3, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     718:	5453      	strb	r3, [r2, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     71a:	3916      	subs	r1, #22
     71c:	5c53      	ldrb	r3, [r2, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     71e:	300e      	adds	r0, #14
     720:	4383      	bics	r3, r0
	tmp |= PORT_PMUX_PMUXE(data);
     722:	380b      	subs	r0, #11
     724:	4303      	orrs	r3, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     726:	5453      	strb	r3, [r2, r1]

void PWM_B_PORT_init(void)
{

	gpio_set_pin_function(PB12, PINMUX_PB12E_TC0_WO0);
}
     728:	4770      	bx	lr
     72a:	46c0      	nop			; (mov r8, r8)
     72c:	40002800 	.word	0x40002800

00000730 <PWM_B_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_TC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC0;
     730:	4a05      	ldr	r2, [pc, #20]	; (748 <PWM_B_CLOCK_init+0x18>)
     732:	69d1      	ldr	r1, [r2, #28]
     734:	2380      	movs	r3, #128	; 0x80
     736:	005b      	lsls	r3, r3, #1
     738:	430b      	orrs	r3, r1
     73a:	61d3      	str	r3, [r2, #28]
     73c:	2140      	movs	r1, #64	; 0x40
     73e:	23ec      	movs	r3, #236	; 0xec
     740:	4a02      	ldr	r2, [pc, #8]	; (74c <PWM_B_CLOCK_init+0x1c>)
     742:	50d1      	str	r1, [r2, r3]

void PWM_B_CLOCK_init(void)
{
	hri_mclk_set_APBCMASK_TC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}
     744:	4770      	bx	lr
     746:	46c0      	nop			; (mov r8, r8)
     748:	40000400 	.word	0x40000400
     74c:	40001800 	.word	0x40001800

00000750 <PWM_B_init>:

void PWM_B_init(void)
{
     750:	b510      	push	{r4, lr}
	PWM_B_CLOCK_init();
     752:	4b06      	ldr	r3, [pc, #24]	; (76c <PWM_B_init+0x1c>)
     754:	4798      	blx	r3
	PWM_B_PORT_init();
     756:	4b06      	ldr	r3, [pc, #24]	; (770 <PWM_B_init+0x20>)
     758:	4798      	blx	r3
	pwm_init(&PWM_B, TC0, _tc_get_pwm());
     75a:	4b06      	ldr	r3, [pc, #24]	; (774 <PWM_B_init+0x24>)
     75c:	4798      	blx	r3
     75e:	0002      	movs	r2, r0
     760:	4905      	ldr	r1, [pc, #20]	; (778 <PWM_B_init+0x28>)
     762:	4806      	ldr	r0, [pc, #24]	; (77c <PWM_B_init+0x2c>)
     764:	4b06      	ldr	r3, [pc, #24]	; (780 <PWM_B_init+0x30>)
     766:	4798      	blx	r3
}
     768:	bd10      	pop	{r4, pc}
     76a:	46c0      	nop			; (mov r8, r8)
     76c:	00000731 	.word	0x00000731
     770:	0000070d 	.word	0x0000070d
     774:	00001e41 	.word	0x00001e41
     778:	42002000 	.word	0x42002000
     77c:	2000019c 	.word	0x2000019c
     780:	00000ae9 	.word	0x00000ae9

00000784 <PWM_R_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     784:	4a07      	ldr	r2, [pc, #28]	; (7a4 <PWM_R_PORT_init+0x20>)
     786:	21ca      	movs	r1, #202	; 0xca
     788:	5c53      	ldrb	r3, [r2, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     78a:	2001      	movs	r0, #1
     78c:	4383      	bics	r3, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     78e:	4303      	orrs	r3, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     790:	5453      	strb	r3, [r2, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     792:	3915      	subs	r1, #21
     794:	5c53      	ldrb	r3, [r2, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     796:	300e      	adds	r0, #14
     798:	4383      	bics	r3, r0
	tmp |= PORT_PMUX_PMUXE(data);
     79a:	380a      	subs	r0, #10
     79c:	4303      	orrs	r3, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     79e:	5453      	strb	r3, [r2, r1]

void PWM_R_PORT_init(void)
{

	gpio_set_pin_function(PB10, PINMUX_PB10F_TCC0_WO4);
}
     7a0:	4770      	bx	lr
     7a2:	46c0      	nop			; (mov r8, r8)
     7a4:	40002800 	.word	0x40002800

000007a8 <PWM_R_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC0;
     7a8:	4a04      	ldr	r2, [pc, #16]	; (7bc <PWM_R_CLOCK_init+0x14>)
     7aa:	69d3      	ldr	r3, [r2, #28]
     7ac:	2120      	movs	r1, #32
     7ae:	430b      	orrs	r3, r1
     7b0:	61d3      	str	r3, [r2, #28]
     7b2:	3120      	adds	r1, #32
     7b4:	23e4      	movs	r3, #228	; 0xe4
     7b6:	4a02      	ldr	r2, [pc, #8]	; (7c0 <PWM_R_CLOCK_init+0x18>)
     7b8:	50d1      	str	r1, [r2, r3]

void PWM_R_CLOCK_init(void)
{
	hri_mclk_set_APBCMASK_TCC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}
     7ba:	4770      	bx	lr
     7bc:	40000400 	.word	0x40000400
     7c0:	40001800 	.word	0x40001800

000007c4 <PWM_R_init>:

void PWM_R_init(void)
{
     7c4:	b510      	push	{r4, lr}
	PWM_R_CLOCK_init();
     7c6:	4b06      	ldr	r3, [pc, #24]	; (7e0 <PWM_R_init+0x1c>)
     7c8:	4798      	blx	r3
	PWM_R_PORT_init();
     7ca:	4b06      	ldr	r3, [pc, #24]	; (7e4 <PWM_R_init+0x20>)
     7cc:	4798      	blx	r3
	pwm_init(&PWM_R, TCC0, _tcc_get_pwm());
     7ce:	4b06      	ldr	r3, [pc, #24]	; (7e8 <PWM_R_init+0x24>)
     7d0:	4798      	blx	r3
     7d2:	0002      	movs	r2, r0
     7d4:	4905      	ldr	r1, [pc, #20]	; (7ec <PWM_R_init+0x28>)
     7d6:	4806      	ldr	r0, [pc, #24]	; (7f0 <PWM_R_init+0x2c>)
     7d8:	4b06      	ldr	r3, [pc, #24]	; (7f4 <PWM_R_init+0x30>)
     7da:	4798      	blx	r3
}
     7dc:	bd10      	pop	{r4, pc}
     7de:	46c0      	nop			; (mov r8, r8)
     7e0:	000007a9 	.word	0x000007a9
     7e4:	00000785 	.word	0x00000785
     7e8:	00001af5 	.word	0x00001af5
     7ec:	42001400 	.word	0x42001400
     7f0:	20000170 	.word	0x20000170
     7f4:	00000ae9 	.word	0x00000ae9

000007f8 <PWM_G_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7f8:	4a07      	ldr	r2, [pc, #28]	; (818 <PWM_G_PORT_init+0x20>)
     7fa:	214c      	movs	r1, #76	; 0x4c
     7fc:	5c53      	ldrb	r3, [r2, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     7fe:	2001      	movs	r0, #1
     800:	4383      	bics	r3, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     802:	4303      	orrs	r3, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     804:	5453      	strb	r3, [r2, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     806:	3916      	subs	r1, #22
     808:	5c53      	ldrb	r3, [r2, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     80a:	300e      	adds	r0, #14
     80c:	4383      	bics	r3, r0
	tmp |= PORT_PMUX_PMUXE(data);
     80e:	380b      	subs	r0, #11
     810:	4303      	orrs	r3, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     812:	5453      	strb	r3, [r2, r1]

void PWM_G_PORT_init(void)
{

	gpio_set_pin_function(PA12, PINMUX_PA12E_TCC2_WO0);
}
     814:	4770      	bx	lr
     816:	46c0      	nop			; (mov r8, r8)
     818:	40002800 	.word	0x40002800

0000081c <PWM_G_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
     81c:	4a04      	ldr	r2, [pc, #16]	; (830 <PWM_G_CLOCK_init+0x14>)
     81e:	69d3      	ldr	r3, [r2, #28]
     820:	2180      	movs	r1, #128	; 0x80
     822:	430b      	orrs	r3, r1
     824:	61d3      	str	r3, [r2, #28]
     826:	3940      	subs	r1, #64	; 0x40
     828:	23e8      	movs	r3, #232	; 0xe8
     82a:	4a02      	ldr	r2, [pc, #8]	; (834 <PWM_G_CLOCK_init+0x18>)
     82c:	50d1      	str	r1, [r2, r3]

void PWM_G_CLOCK_init(void)
{
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}
     82e:	4770      	bx	lr
     830:	40000400 	.word	0x40000400
     834:	40001800 	.word	0x40001800

00000838 <PWM_G_init>:

void PWM_G_init(void)
{
     838:	b510      	push	{r4, lr}
	PWM_G_CLOCK_init();
     83a:	4b06      	ldr	r3, [pc, #24]	; (854 <PWM_G_init+0x1c>)
     83c:	4798      	blx	r3
	PWM_G_PORT_init();
     83e:	4b06      	ldr	r3, [pc, #24]	; (858 <PWM_G_init+0x20>)
     840:	4798      	blx	r3
	pwm_init(&PWM_G, TCC2, _tcc_get_pwm());
     842:	4b06      	ldr	r3, [pc, #24]	; (85c <PWM_G_init+0x24>)
     844:	4798      	blx	r3
     846:	0002      	movs	r2, r0
     848:	4905      	ldr	r1, [pc, #20]	; (860 <PWM_G_init+0x28>)
     84a:	4806      	ldr	r0, [pc, #24]	; (864 <PWM_G_init+0x2c>)
     84c:	4b06      	ldr	r3, [pc, #24]	; (868 <PWM_G_init+0x30>)
     84e:	4798      	blx	r3
}
     850:	bd10      	pop	{r4, pc}
     852:	46c0      	nop			; (mov r8, r8)
     854:	0000081d 	.word	0x0000081d
     858:	000007f9 	.word	0x000007f9
     85c:	00001af5 	.word	0x00001af5
     860:	42001c00 	.word	0x42001c00
     864:	20000144 	.word	0x20000144
     868:	00000ae9 	.word	0x00000ae9

0000086c <system_init>:

void system_init(void)
{
     86c:	b570      	push	{r4, r5, r6, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     86e:	4b1e      	ldr	r3, [pc, #120]	; (8e8 <system_init+0x7c>)
     870:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     872:	24c0      	movs	r4, #192	; 0xc0
     874:	05e4      	lsls	r4, r4, #23
     876:	2104      	movs	r1, #4
     878:	6061      	str	r1, [r4, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     87a:	4b1c      	ldr	r3, [pc, #112]	; (8ec <system_init+0x80>)
     87c:	4a1c      	ldr	r2, [pc, #112]	; (8f0 <system_init+0x84>)
     87e:	629a      	str	r2, [r3, #40]	; 0x28
     880:	4a1c      	ldr	r2, [pc, #112]	; (8f4 <system_init+0x88>)
     882:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     884:	2242      	movs	r2, #66	; 0x42
     886:	5c98      	ldrb	r0, [r3, r2]
     888:	4388      	bics	r0, r1
     88a:	5498      	strb	r0, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     88c:	5c9d      	ldrb	r5, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     88e:	2001      	movs	r0, #1
     890:	4385      	bics	r5, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     892:	549d      	strb	r5, [r3, r2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     894:	2280      	movs	r2, #128	; 0x80
     896:	0352      	lsls	r2, r2, #13
     898:	6062      	str	r2, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     89a:	4e17      	ldr	r6, [pc, #92]	; (8f8 <system_init+0x8c>)
     89c:	629e      	str	r6, [r3, #40]	; 0x28
     89e:	4a17      	ldr	r2, [pc, #92]	; (8fc <system_init+0x90>)
     8a0:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     8a2:	2254      	movs	r2, #84	; 0x54
     8a4:	5c9d      	ldrb	r5, [r3, r2]
     8a6:	438d      	bics	r5, r1
     8a8:	549d      	strb	r5, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8aa:	5c9d      	ldrb	r5, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     8ac:	4385      	bics	r5, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8ae:	549d      	strb	r5, [r3, r2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     8b0:	2280      	movs	r2, #128	; 0x80
     8b2:	0392      	lsls	r2, r2, #14
     8b4:	6062      	str	r2, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8b6:	629e      	str	r6, [r3, #40]	; 0x28
     8b8:	4a11      	ldr	r2, [pc, #68]	; (900 <system_init+0x94>)
     8ba:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     8bc:	2255      	movs	r2, #85	; 0x55
     8be:	5c9c      	ldrb	r4, [r3, r2]
     8c0:	438c      	bics	r4, r1
     8c2:	549c      	strb	r4, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8c4:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     8c6:	4381      	bics	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8c8:	5499      	strb	r1, [r3, r2]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(SW_2, GPIO_PIN_FUNCTION_OFF);

	I2C_0_init();
     8ca:	4b0e      	ldr	r3, [pc, #56]	; (904 <system_init+0x98>)
     8cc:	4798      	blx	r3

	TARGET_IO_init();
     8ce:	4b0e      	ldr	r3, [pc, #56]	; (908 <system_init+0x9c>)
     8d0:	4798      	blx	r3

	USART_AT_init();
     8d2:	4b0e      	ldr	r3, [pc, #56]	; (90c <system_init+0xa0>)
     8d4:	4798      	blx	r3

	delay_driver_init();
     8d6:	4b0e      	ldr	r3, [pc, #56]	; (910 <system_init+0xa4>)
     8d8:	4798      	blx	r3

	PWM_B_init();
     8da:	4b0e      	ldr	r3, [pc, #56]	; (914 <system_init+0xa8>)
     8dc:	4798      	blx	r3

	PWM_R_init();
     8de:	4b0e      	ldr	r3, [pc, #56]	; (918 <system_init+0xac>)
     8e0:	4798      	blx	r3

	PWM_G_init();
     8e2:	4b0e      	ldr	r3, [pc, #56]	; (91c <system_init+0xb0>)
     8e4:	4798      	blx	r3
}
     8e6:	bd70      	pop	{r4, r5, r6, pc}
     8e8:	00000cd1 	.word	0x00000cd1
     8ec:	40002800 	.word	0x40002800
     8f0:	40020004 	.word	0x40020004
     8f4:	c0020000 	.word	0xc0020000
     8f8:	40020000 	.word	0x40020000
     8fc:	c0020010 	.word	0xc0020010
     900:	c0020020 	.word	0xc0020020
     904:	000005b1 	.word	0x000005b1
     908:	0000063d 	.word	0x0000063d
     90c:	000006cd 	.word	0x000006cd
     910:	000006f9 	.word	0x000006f9
     914:	00000751 	.word	0x00000751
     918:	000007c5 	.word	0x000007c5
     91c:	00000839 	.word	0x00000839

00000920 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     920:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     922:	4b02      	ldr	r3, [pc, #8]	; (92c <delay_init+0xc>)
     924:	6018      	str	r0, [r3, #0]
     926:	4b02      	ldr	r3, [pc, #8]	; (930 <delay_init+0x10>)
     928:	4798      	blx	r3
}
     92a:	bd10      	pop	{r4, pc}
     92c:	20000124 	.word	0x20000124
     930:	00001719 	.word	0x00001719

00000934 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     934:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     936:	4b04      	ldr	r3, [pc, #16]	; (948 <delay_ms+0x14>)
     938:	681c      	ldr	r4, [r3, #0]
     93a:	4b04      	ldr	r3, [pc, #16]	; (94c <delay_ms+0x18>)
     93c:	4798      	blx	r3
     93e:	0001      	movs	r1, r0
     940:	0020      	movs	r0, r4
     942:	4b03      	ldr	r3, [pc, #12]	; (950 <delay_ms+0x1c>)
     944:	4798      	blx	r3
}
     946:	bd10      	pop	{r4, pc}
     948:	20000124 	.word	0x20000124
     94c:	00000cc9 	.word	0x00000cc9
     950:	0000172d 	.word	0x0000172d

00000954 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     954:	b510      	push	{r4, lr}
     956:	b084      	sub	sp, #16
     958:	0014      	movs	r4, r2
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     95a:	ab01      	add	r3, sp, #4
     95c:	3814      	subs	r0, #20
     95e:	8b82      	ldrh	r2, [r0, #28]
     960:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
     962:	9402      	str	r4, [sp, #8]
	msg.flags  = I2C_M_STOP;
     964:	4a05      	ldr	r2, [pc, #20]	; (97c <i2c_m_sync_write+0x28>)
     966:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
     968:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     96a:	0019      	movs	r1, r3
     96c:	4b04      	ldr	r3, [pc, #16]	; (980 <i2c_m_sync_write+0x2c>)
     96e:	4798      	blx	r3

	if (ret) {
     970:	2800      	cmp	r0, #0
     972:	d100      	bne.n	976 <i2c_m_sync_write+0x22>
		return ret;
	}

	return n;
     974:	0020      	movs	r0, r4
}
     976:	b004      	add	sp, #16
     978:	bd10      	pop	{r4, pc}
     97a:	46c0      	nop			; (mov r8, r8)
     97c:	ffff8000 	.word	0xffff8000
     980:	00001219 	.word	0x00001219

00000984 <i2c_m_sync_read>:
{
     984:	b510      	push	{r4, lr}
     986:	b084      	sub	sp, #16
     988:	0014      	movs	r4, r2
	msg.addr   = i2c->slave_addr;
     98a:	ab01      	add	r3, sp, #4
     98c:	3814      	subs	r0, #20
     98e:	8b82      	ldrh	r2, [r0, #28]
     990:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
     992:	9402      	str	r4, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     994:	4a05      	ldr	r2, [pc, #20]	; (9ac <i2c_m_sync_read+0x28>)
     996:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
     998:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     99a:	0019      	movs	r1, r3
     99c:	4b04      	ldr	r3, [pc, #16]	; (9b0 <i2c_m_sync_read+0x2c>)
     99e:	4798      	blx	r3
	if (ret) {
     9a0:	2800      	cmp	r0, #0
     9a2:	d100      	bne.n	9a6 <i2c_m_sync_read+0x22>
	return n;
     9a4:	0020      	movs	r0, r4
}
     9a6:	b004      	add	sp, #16
     9a8:	bd10      	pop	{r4, pc}
     9aa:	46c0      	nop			; (mov r8, r8)
     9ac:	ffff8001 	.word	0xffff8001
     9b0:	00001219 	.word	0x00001219

000009b4 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     9b4:	b570      	push	{r4, r5, r6, lr}
     9b6:	0004      	movs	r4, r0
     9b8:	000d      	movs	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     9ba:	1e43      	subs	r3, r0, #1
     9bc:	4198      	sbcs	r0, r3
     9be:	b2c0      	uxtb	r0, r0
     9c0:	2268      	movs	r2, #104	; 0x68
     9c2:	4907      	ldr	r1, [pc, #28]	; (9e0 <i2c_m_sync_init+0x2c>)
     9c4:	4b07      	ldr	r3, [pc, #28]	; (9e4 <i2c_m_sync_init+0x30>)
     9c6:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     9c8:	0029      	movs	r1, r5
     9ca:	0020      	movs	r0, r4
     9cc:	4b06      	ldr	r3, [pc, #24]	; (9e8 <i2c_m_sync_init+0x34>)
     9ce:	4798      	blx	r3
	if (init_status) {
     9d0:	2800      	cmp	r0, #0
     9d2:	d103      	bne.n	9dc <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     9d4:	4b05      	ldr	r3, [pc, #20]	; (9ec <i2c_m_sync_init+0x38>)
     9d6:	61a3      	str	r3, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
     9d8:	4b05      	ldr	r3, [pc, #20]	; (9f0 <i2c_m_sync_init+0x3c>)
     9da:	6163      	str	r3, [r4, #20]

	return ERR_NONE;
}
     9dc:	bd70      	pop	{r4, r5, r6, pc}
     9de:	46c0      	nop			; (mov r8, r8)
     9e0:	00005024 	.word	0x00005024
     9e4:	00000c85 	.word	0x00000c85
     9e8:	00000ff1 	.word	0x00000ff1
     9ec:	00000985 	.word	0x00000985
     9f0:	00000955 	.word	0x00000955

000009f4 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
     9f4:	b510      	push	{r4, lr}
	return _i2c_m_sync_enable(&i2c->device);
     9f6:	4b01      	ldr	r3, [pc, #4]	; (9fc <i2c_m_sync_enable+0x8>)
     9f8:	4798      	blx	r3
}
     9fa:	bd10      	pop	{r4, pc}
     9fc:	00001021 	.word	0x00001021

00000a00 <i2c_m_sync_set_slaveaddr>:
/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
     a00:	0589      	lsls	r1, r1, #22
     a02:	0d89      	lsrs	r1, r1, #22
     a04:	2380      	movs	r3, #128	; 0x80
     a06:	00db      	lsls	r3, r3, #3
     a08:	401a      	ands	r2, r3
     a0a:	430a      	orrs	r2, r1
     a0c:	8382      	strh	r2, [r0, #28]
}
     a0e:	0010      	movs	r0, r2
     a10:	4770      	bx	lr
	...

00000a14 <i2c_m_sync_set_baudrate>:

/**
 * \brief Sync version of i2c set baudrate
 */
int32_t i2c_m_sync_set_baudrate(struct i2c_m_sync_desc *i2c, uint32_t clkrate, uint32_t baudrate)
{
     a14:	b510      	push	{r4, lr}
	return _i2c_m_sync_set_baudrate(&i2c->device, clkrate, baudrate);
     a16:	4b01      	ldr	r3, [pc, #4]	; (a1c <i2c_m_sync_set_baudrate+0x8>)
     a18:	4798      	blx	r3
}
     a1a:	bd10      	pop	{r4, pc}
     a1c:	00001095 	.word	0x00001095

00000a20 <i2c_m_sync_cmd_write>:

/**
 * \brief Sync version of i2c write command
 */
int32_t i2c_m_sync_cmd_write(struct i2c_m_sync_desc *i2c, uint8_t reg, uint8_t *buffer, uint8_t length)
{
     a20:	b570      	push	{r4, r5, r6, lr}
     a22:	b086      	sub	sp, #24
     a24:	0004      	movs	r4, r0
     a26:	0016      	movs	r6, r2
     a28:	001d      	movs	r5, r3
     a2a:	466b      	mov	r3, sp
     a2c:	71d9      	strb	r1, [r3, #7]
     a2e:	3307      	adds	r3, #7
	struct _i2c_m_msg msg;
	int32_t           ret;

	msg.addr   = i2c->slave_addr;
     a30:	a903      	add	r1, sp, #12
     a32:	8b82      	ldrh	r2, [r0, #28]
     a34:	800a      	strh	r2, [r1, #0]
	msg.len    = 1;
     a36:	2201      	movs	r2, #1
     a38:	604a      	str	r2, [r1, #4]
	msg.flags  = 0;
     a3a:	2200      	movs	r2, #0
     a3c:	804a      	strh	r2, [r1, #2]
	msg.buffer = &reg;
     a3e:	608b      	str	r3, [r1, #8]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     a40:	4b07      	ldr	r3, [pc, #28]	; (a60 <i2c_m_sync_cmd_write+0x40>)
     a42:	4798      	blx	r3

	if (ret != 0) {
     a44:	2800      	cmp	r0, #0
     a46:	d001      	beq.n	a4c <i2c_m_sync_cmd_write+0x2c>
		/* error occurred */
		return ret;
	}

	return ERR_NONE;
}
     a48:	b006      	add	sp, #24
     a4a:	bd70      	pop	{r4, r5, r6, pc}
	msg.flags  = I2C_M_NOADDR|I2C_M_STOP;
     a4c:	a903      	add	r1, sp, #12
     a4e:	4b05      	ldr	r3, [pc, #20]	; (a64 <i2c_m_sync_cmd_write+0x44>)
     a50:	804b      	strh	r3, [r1, #2]
	msg.buffer = buffer;
     a52:	608e      	str	r6, [r1, #8]
	msg.len    = length;
     a54:	604d      	str	r5, [r1, #4]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     a56:	0020      	movs	r0, r4
     a58:	4b01      	ldr	r3, [pc, #4]	; (a60 <i2c_m_sync_cmd_write+0x40>)
     a5a:	4798      	blx	r3
     a5c:	e7f4      	b.n	a48 <i2c_m_sync_cmd_write+0x28>
     a5e:	46c0      	nop			; (mov r8, r8)
     a60:	00001219 	.word	0x00001219
     a64:	ffffa000 	.word	0xffffa000

00000a68 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     a68:	b570      	push	{r4, r5, r6, lr}
     a6a:	0006      	movs	r6, r0
     a6c:	000c      	movs	r4, r1
     a6e:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     a70:	2800      	cmp	r0, #0
     a72:	d00d      	beq.n	a90 <io_write+0x28>
     a74:	0008      	movs	r0, r1
     a76:	1e43      	subs	r3, r0, #1
     a78:	4198      	sbcs	r0, r3
     a7a:	b2c0      	uxtb	r0, r0
     a7c:	223e      	movs	r2, #62	; 0x3e
     a7e:	4905      	ldr	r1, [pc, #20]	; (a94 <io_write+0x2c>)
     a80:	4b05      	ldr	r3, [pc, #20]	; (a98 <io_write+0x30>)
     a82:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     a84:	6833      	ldr	r3, [r6, #0]
     a86:	002a      	movs	r2, r5
     a88:	0021      	movs	r1, r4
     a8a:	0030      	movs	r0, r6
     a8c:	4798      	blx	r3
}
     a8e:	bd70      	pop	{r4, r5, r6, pc}
     a90:	2000      	movs	r0, #0
     a92:	e7f3      	b.n	a7c <io_write+0x14>
     a94:	00005040 	.word	0x00005040
     a98:	00000c85 	.word	0x00000c85

00000a9c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     a9c:	b570      	push	{r4, r5, r6, lr}
     a9e:	0006      	movs	r6, r0
     aa0:	000c      	movs	r4, r1
     aa2:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     aa4:	2800      	cmp	r0, #0
     aa6:	d00d      	beq.n	ac4 <io_read+0x28>
     aa8:	0008      	movs	r0, r1
     aaa:	1e43      	subs	r3, r0, #1
     aac:	4198      	sbcs	r0, r3
     aae:	b2c0      	uxtb	r0, r0
     ab0:	2247      	movs	r2, #71	; 0x47
     ab2:	4905      	ldr	r1, [pc, #20]	; (ac8 <io_read+0x2c>)
     ab4:	4b05      	ldr	r3, [pc, #20]	; (acc <io_read+0x30>)
     ab6:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     ab8:	6873      	ldr	r3, [r6, #4]
     aba:	002a      	movs	r2, r5
     abc:	0021      	movs	r1, r4
     abe:	0030      	movs	r0, r6
     ac0:	4798      	blx	r3
}
     ac2:	bd70      	pop	{r4, r5, r6, pc}
     ac4:	2000      	movs	r0, #0
     ac6:	e7f3      	b.n	ab0 <io_read+0x14>
     ac8:	00005040 	.word	0x00005040
     acc:	00000c85 	.word	0x00000c85

00000ad0 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
     ad0:	b510      	push	{r4, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
     ad2:	6943      	ldr	r3, [r0, #20]
     ad4:	2b00      	cmp	r3, #0
     ad6:	d000      	beq.n	ada <pwm_period_expired+0xa>
		descr->pwm_cb.period(descr);
     ad8:	4798      	blx	r3
	}
}
     ada:	bd10      	pop	{r4, pc}

00000adc <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
     adc:	b510      	push	{r4, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
     ade:	6983      	ldr	r3, [r0, #24]
     ae0:	2b00      	cmp	r3, #0
     ae2:	d000      	beq.n	ae6 <pwm_detect_fault+0xa>
		descr->pwm_cb.error(descr);
     ae4:	4798      	blx	r3
	}
}
     ae6:	bd10      	pop	{r4, pc}

00000ae8 <pwm_init>:
{
     ae8:	b570      	push	{r4, r5, r6, lr}
     aea:	0004      	movs	r4, r0
     aec:	000d      	movs	r5, r1
     aee:	0016      	movs	r6, r2
	ASSERT(descr && hw && func);
     af0:	2800      	cmp	r0, #0
     af2:	d013      	beq.n	b1c <pwm_init+0x34>
     af4:	2900      	cmp	r1, #0
     af6:	d013      	beq.n	b20 <pwm_init+0x38>
     af8:	0010      	movs	r0, r2
     afa:	1e43      	subs	r3, r0, #1
     afc:	4198      	sbcs	r0, r3
     afe:	223d      	movs	r2, #61	; 0x3d
     b00:	4908      	ldr	r1, [pc, #32]	; (b24 <pwm_init+0x3c>)
     b02:	4b09      	ldr	r3, [pc, #36]	; (b28 <pwm_init+0x40>)
     b04:	4798      	blx	r3
	descr->func = func;
     b06:	61e6      	str	r6, [r4, #28]
	descr->func->init(&descr->device, hw);
     b08:	6833      	ldr	r3, [r6, #0]
     b0a:	0029      	movs	r1, r5
     b0c:	0020      	movs	r0, r4
     b0e:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
     b10:	4b06      	ldr	r3, [pc, #24]	; (b2c <pwm_init+0x44>)
     b12:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
     b14:	4b06      	ldr	r3, [pc, #24]	; (b30 <pwm_init+0x48>)
     b16:	6063      	str	r3, [r4, #4]
}
     b18:	2000      	movs	r0, #0
     b1a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
     b1c:	2000      	movs	r0, #0
     b1e:	e7ee      	b.n	afe <pwm_init+0x16>
     b20:	2000      	movs	r0, #0
     b22:	e7ec      	b.n	afe <pwm_init+0x16>
     b24:	00005054 	.word	0x00005054
     b28:	00000c85 	.word	0x00000c85
     b2c:	00000ad1 	.word	0x00000ad1
     b30:	00000add 	.word	0x00000add

00000b34 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b36:	46ce      	mov	lr, r9
     b38:	4647      	mov	r7, r8
     b3a:	b580      	push	{r7, lr}
     b3c:	0004      	movs	r4, r0
     b3e:	000f      	movs	r7, r1
     b40:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     b42:	2800      	cmp	r0, #0
     b44:	d021      	beq.n	b8a <usart_sync_write+0x56>
     b46:	2900      	cmp	r1, #0
     b48:	d021      	beq.n	b8e <usart_sync_write+0x5a>
     b4a:	0010      	movs	r0, r2
     b4c:	1e43      	subs	r3, r0, #1
     b4e:	4198      	sbcs	r0, r3
     b50:	22fb      	movs	r2, #251	; 0xfb
     b52:	4910      	ldr	r1, [pc, #64]	; (b94 <usart_sync_write+0x60>)
     b54:	4b10      	ldr	r3, [pc, #64]	; (b98 <usart_sync_write+0x64>)
     b56:	4798      	blx	r3
	while (!_usart_sync_is_byte_sent(&descr->device))
     b58:	3408      	adds	r4, #8
     b5a:	4d10      	ldr	r5, [pc, #64]	; (b9c <usart_sync_write+0x68>)
     b5c:	0020      	movs	r0, r4
     b5e:	47a8      	blx	r5
     b60:	2800      	cmp	r0, #0
     b62:	d0fb      	beq.n	b5c <usart_sync_write+0x28>
     b64:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     b66:	4b0e      	ldr	r3, [pc, #56]	; (ba0 <usart_sync_write+0x6c>)
     b68:	4699      	mov	r9, r3
		while (!_usart_sync_is_byte_sent(&descr->device))
     b6a:	4d0c      	ldr	r5, [pc, #48]	; (b9c <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     b6c:	5db9      	ldrb	r1, [r7, r6]
     b6e:	0020      	movs	r0, r4
     b70:	47c8      	blx	r9
		while (!_usart_sync_is_byte_sent(&descr->device))
     b72:	0020      	movs	r0, r4
     b74:	47a8      	blx	r5
     b76:	2800      	cmp	r0, #0
     b78:	d0fb      	beq.n	b72 <usart_sync_write+0x3e>
			;
	} while (++offset < length);
     b7a:	3601      	adds	r6, #1
     b7c:	4546      	cmp	r6, r8
     b7e:	d3f5      	bcc.n	b6c <usart_sync_write+0x38>

	return (int32_t)offset;
}
     b80:	0030      	movs	r0, r6
     b82:	bc0c      	pop	{r2, r3}
     b84:	4690      	mov	r8, r2
     b86:	4699      	mov	r9, r3
     b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     b8a:	2000      	movs	r0, #0
     b8c:	e7e0      	b.n	b50 <usart_sync_write+0x1c>
     b8e:	2000      	movs	r0, #0
     b90:	e7de      	b.n	b50 <usart_sync_write+0x1c>
     b92:	46c0      	nop			; (mov r8, r8)
     b94:	0000506c 	.word	0x0000506c
     b98:	00000c85 	.word	0x00000c85
     b9c:	00000fdd 	.word	0x00000fdd
     ba0:	00000fcd 	.word	0x00000fcd

00000ba4 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     ba6:	46ce      	mov	lr, r9
     ba8:	4647      	mov	r7, r8
     baa:	b580      	push	{r7, lr}
     bac:	0004      	movs	r4, r0
     bae:	000f      	movs	r7, r1
     bb0:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     bb2:	2800      	cmp	r0, #0
     bb4:	d01d      	beq.n	bf2 <usart_sync_read+0x4e>
     bb6:	2900      	cmp	r1, #0
     bb8:	d01d      	beq.n	bf6 <usart_sync_read+0x52>
     bba:	0010      	movs	r0, r2
     bbc:	1e43      	subs	r3, r0, #1
     bbe:	4198      	sbcs	r0, r3
     bc0:	2216      	movs	r2, #22
     bc2:	32ff      	adds	r2, #255	; 0xff
     bc4:	490d      	ldr	r1, [pc, #52]	; (bfc <usart_sync_read+0x58>)
     bc6:	4b0e      	ldr	r3, [pc, #56]	; (c00 <usart_sync_read+0x5c>)
     bc8:	4798      	blx	r3
	uint32_t                      offset = 0;
     bca:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     bcc:	3408      	adds	r4, #8
     bce:	4d0d      	ldr	r5, [pc, #52]	; (c04 <usart_sync_read+0x60>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     bd0:	4b0d      	ldr	r3, [pc, #52]	; (c08 <usart_sync_read+0x64>)
     bd2:	4699      	mov	r9, r3
		while (!_usart_sync_is_byte_received(&descr->device))
     bd4:	0020      	movs	r0, r4
     bd6:	47a8      	blx	r5
     bd8:	2800      	cmp	r0, #0
     bda:	d0fb      	beq.n	bd4 <usart_sync_read+0x30>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     bdc:	0020      	movs	r0, r4
     bde:	47c8      	blx	r9
     be0:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
     be2:	3601      	adds	r6, #1
     be4:	4546      	cmp	r6, r8
     be6:	d3f5      	bcc.n	bd4 <usart_sync_read+0x30>

	return (int32_t)offset;
}
     be8:	0030      	movs	r0, r6
     bea:	bc0c      	pop	{r2, r3}
     bec:	4690      	mov	r8, r2
     bee:	4699      	mov	r9, r3
     bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     bf2:	2000      	movs	r0, #0
     bf4:	e7e4      	b.n	bc0 <usart_sync_read+0x1c>
     bf6:	2000      	movs	r0, #0
     bf8:	e7e2      	b.n	bc0 <usart_sync_read+0x1c>
     bfa:	46c0      	nop			; (mov r8, r8)
     bfc:	0000506c 	.word	0x0000506c
     c00:	00000c85 	.word	0x00000c85
     c04:	00000fe7 	.word	0x00000fe7
     c08:	00000fd5 	.word	0x00000fd5

00000c0c <usart_sync_init>:
{
     c0c:	b570      	push	{r4, r5, r6, lr}
     c0e:	0005      	movs	r5, r0
     c10:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     c12:	2800      	cmp	r0, #0
     c14:	d013      	beq.n	c3e <usart_sync_init+0x32>
     c16:	0008      	movs	r0, r1
     c18:	1e43      	subs	r3, r0, #1
     c1a:	4198      	sbcs	r0, r3
     c1c:	b2c0      	uxtb	r0, r0
     c1e:	223e      	movs	r2, #62	; 0x3e
     c20:	4908      	ldr	r1, [pc, #32]	; (c44 <usart_sync_init+0x38>)
     c22:	4b09      	ldr	r3, [pc, #36]	; (c48 <usart_sync_init+0x3c>)
     c24:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     c26:	0028      	movs	r0, r5
     c28:	3008      	adds	r0, #8
     c2a:	0021      	movs	r1, r4
     c2c:	4b07      	ldr	r3, [pc, #28]	; (c4c <usart_sync_init+0x40>)
     c2e:	4798      	blx	r3
	if (init_status) {
     c30:	2800      	cmp	r0, #0
     c32:	d103      	bne.n	c3c <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
     c34:	4b06      	ldr	r3, [pc, #24]	; (c50 <usart_sync_init+0x44>)
     c36:	606b      	str	r3, [r5, #4]
	descr->io.write = usart_sync_write;
     c38:	4b06      	ldr	r3, [pc, #24]	; (c54 <usart_sync_init+0x48>)
     c3a:	602b      	str	r3, [r5, #0]
}
     c3c:	bd70      	pop	{r4, r5, r6, pc}
     c3e:	2000      	movs	r0, #0
     c40:	e7ed      	b.n	c1e <usart_sync_init+0x12>
     c42:	46c0      	nop			; (mov r8, r8)
     c44:	0000506c 	.word	0x0000506c
     c48:	00000c85 	.word	0x00000c85
     c4c:	00000f8d 	.word	0x00000f8d
     c50:	00000ba5 	.word	0x00000ba5
     c54:	00000b35 	.word	0x00000b35

00000c58 <usart_sync_enable>:
{
     c58:	b510      	push	{r4, lr}
     c5a:	0004      	movs	r4, r0
	ASSERT(descr);
     c5c:	1e43      	subs	r3, r0, #1
     c5e:	4198      	sbcs	r0, r3
     c60:	b2c0      	uxtb	r0, r0
     c62:	225d      	movs	r2, #93	; 0x5d
     c64:	4904      	ldr	r1, [pc, #16]	; (c78 <usart_sync_enable+0x20>)
     c66:	4b05      	ldr	r3, [pc, #20]	; (c7c <usart_sync_enable+0x24>)
     c68:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     c6a:	0020      	movs	r0, r4
     c6c:	3008      	adds	r0, #8
     c6e:	4b04      	ldr	r3, [pc, #16]	; (c80 <usart_sync_enable+0x28>)
     c70:	4798      	blx	r3
}
     c72:	2000      	movs	r0, #0
     c74:	bd10      	pop	{r4, pc}
     c76:	46c0      	nop			; (mov r8, r8)
     c78:	0000506c 	.word	0x0000506c
     c7c:	00000c85 	.word	0x00000c85
     c80:	00000fb9 	.word	0x00000fb9

00000c84 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     c84:	2800      	cmp	r0, #0
     c86:	d100      	bne.n	c8a <assert+0x6>
		__asm("BKPT #0");
     c88:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     c8a:	4770      	bx	lr

00000c8c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     c8c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     c8e:	4a06      	ldr	r2, [pc, #24]	; (ca8 <_sbrk+0x1c>)
     c90:	6812      	ldr	r2, [r2, #0]
     c92:	2a00      	cmp	r2, #0
     c94:	d004      	beq.n	ca0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     c96:	4a04      	ldr	r2, [pc, #16]	; (ca8 <_sbrk+0x1c>)
     c98:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     c9a:	18c3      	adds	r3, r0, r3
     c9c:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     c9e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     ca0:	4902      	ldr	r1, [pc, #8]	; (cac <_sbrk+0x20>)
     ca2:	4a01      	ldr	r2, [pc, #4]	; (ca8 <_sbrk+0x1c>)
     ca4:	6011      	str	r1, [r2, #0]
     ca6:	e7f6      	b.n	c96 <_sbrk+0xa>
     ca8:	20000128 	.word	0x20000128
     cac:	200021e0 	.word	0x200021e0

00000cb0 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     cb0:	2001      	movs	r0, #1
     cb2:	4240      	negs	r0, r0
     cb4:	4770      	bx	lr

00000cb6 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     cb6:	2380      	movs	r3, #128	; 0x80
     cb8:	019b      	lsls	r3, r3, #6
     cba:	604b      	str	r3, [r1, #4]

	return 0;
}
     cbc:	2000      	movs	r0, #0
     cbe:	4770      	bx	lr

00000cc0 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     cc0:	2001      	movs	r0, #1
     cc2:	4770      	bx	lr

00000cc4 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     cc4:	2000      	movs	r0, #0
     cc6:	4770      	bx	lr

00000cc8 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
     cc8:	23fa      	movs	r3, #250	; 0xfa
     cca:	019b      	lsls	r3, r3, #6
     ccc:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     cce:	4770      	bx	lr

00000cd0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     cd0:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     cd2:	4b0a      	ldr	r3, [pc, #40]	; (cfc <_init_chip+0x2c>)
     cd4:	685a      	ldr	r2, [r3, #4]
     cd6:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_set_performance_level(2);
     cd8:	2002      	movs	r0, #2
     cda:	4b09      	ldr	r3, [pc, #36]	; (d00 <_init_chip+0x30>)
     cdc:	4798      	blx	r3

	_osc32kctrl_init_sources();
     cde:	4b09      	ldr	r3, [pc, #36]	; (d04 <_init_chip+0x34>)
     ce0:	4798      	blx	r3
	_oscctrl_init_sources();
     ce2:	4b09      	ldr	r3, [pc, #36]	; (d08 <_init_chip+0x38>)
     ce4:	4798      	blx	r3
	_mclk_init();
     ce6:	4b09      	ldr	r3, [pc, #36]	; (d0c <_init_chip+0x3c>)
     ce8:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     cea:	2008      	movs	r0, #8
     cec:	4c08      	ldr	r4, [pc, #32]	; (d10 <_init_chip+0x40>)
     cee:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
     cf0:	4b08      	ldr	r3, [pc, #32]	; (d14 <_init_chip+0x44>)
     cf2:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     cf4:	20f7      	movs	r0, #247	; 0xf7
     cf6:	47a0      	blx	r4

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif
}
     cf8:	bd10      	pop	{r4, pc}
     cfa:	46c0      	nop			; (mov r8, r8)
     cfc:	41004000 	.word	0x41004000
     d00:	00000d7b 	.word	0x00000d7b
     d04:	00000d41 	.word	0x00000d41
     d08:	00000d59 	.word	0x00000d59
     d0c:	00000d2d 	.word	0x00000d2d
     d10:	00000d19 	.word	0x00000d19
     d14:	00000d79 	.word	0x00000d79

00000d18 <_gclk_init_generators_by_fref>:
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
     d18:	07c3      	lsls	r3, r0, #31
     d1a:	d502      	bpl.n	d22 <_gclk_init_generators_by_fref+0xa>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     d1c:	4a01      	ldr	r2, [pc, #4]	; (d24 <_gclk_init_generators_by_fref+0xc>)
     d1e:	4b02      	ldr	r3, [pc, #8]	; (d28 <_gclk_init_generators_by_fref+0x10>)
     d20:	621a      	str	r2, [r3, #32]
		                               | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		                               | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
     d22:	4770      	bx	lr
     d24:	00010106 	.word	0x00010106
     d28:	40001800 	.word	0x40001800

00000d2c <_mclk_init>:
	((Mclk *)hw)->BUPDIV.reg = data;
     d2c:	4b03      	ldr	r3, [pc, #12]	; (d3c <_mclk_init+0x10>)
     d2e:	2208      	movs	r2, #8
     d30:	719a      	strb	r2, [r3, #6]
	((Mclk *)hw)->LPDIV.reg = data;
     d32:	3a04      	subs	r2, #4
     d34:	715a      	strb	r2, [r3, #5]
	((Mclk *)hw)->CPUDIV.reg = data;
     d36:	3a03      	subs	r2, #3
     d38:	711a      	strb	r2, [r3, #4]
{
	void *hw = (void *)MCLK;
	hri_mclk_write_BUPDIV_reg(hw, MCLK_BUPDIV_BUPDIV(CONF_MCLK_BUPDIV));
	hri_mclk_write_LPDIV_reg(hw, MCLK_LPDIV_LPDIV(CONF_MCLK_LPDIV));
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
     d3a:	4770      	bx	lr
     d3c:	40000400 	.word	0x40000400

00000d40 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     d40:	4b04      	ldr	r3, [pc, #16]	; (d54 <_osc32kctrl_init_sources+0x14>)
     d42:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     d44:	21f8      	movs	r1, #248	; 0xf8
     d46:	0149      	lsls	r1, r1, #5
     d48:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     d4a:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     d4c:	2201      	movs	r2, #1
     d4e:	611a      	str	r2, [r3, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
     d50:	4770      	bx	lr
     d52:	46c0      	nop			; (mov r8, r8)
     d54:	40001000 	.word	0x40001000

00000d58 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
     d58:	228e      	movs	r2, #142	; 0x8e
     d5a:	4b06      	ldr	r3, [pc, #24]	; (d74 <_oscctrl_init_sources+0x1c>)
     d5c:	751a      	strb	r2, [r3, #20]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
     d5e:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
     d60:	3a7e      	subs	r2, #126	; 0x7e
     d62:	68cb      	ldr	r3, [r1, #12]
     d64:	421a      	tst	r2, r3
     d66:	d0fc      	beq.n	d62 <_oscctrl_init_sources+0xa>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
     d68:	4a02      	ldr	r2, [pc, #8]	; (d74 <_oscctrl_init_sources+0x1c>)
     d6a:	7d13      	ldrb	r3, [r2, #20]
     d6c:	2180      	movs	r1, #128	; 0x80
     d6e:	430b      	orrs	r3, r1
     d70:	7513      	strb	r3, [r2, #20]
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
     d72:	4770      	bx	lr
     d74:	40000c00 	.word	0x40000c00

00000d78 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
     d78:	4770      	bx	lr

00000d7a <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
     d7a:	2380      	movs	r3, #128	; 0x80
     d7c:	05db      	lsls	r3, r3, #23
     d7e:	789b      	ldrb	r3, [r3, #2]
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
     d80:	2203      	movs	r2, #3
     d82:	4013      	ands	r3, r2
     d84:	4298      	cmp	r0, r3
     d86:	d00c      	beq.n	da2 <_set_performance_level+0x28>
	((Pm *)hw)->INTFLAG.reg = mask;
     d88:	2280      	movs	r2, #128	; 0x80
     d8a:	05d2      	lsls	r2, r2, #23
     d8c:	23ff      	movs	r3, #255	; 0xff
     d8e:	7193      	strb	r3, [r2, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
     d90:	7893      	ldrb	r3, [r2, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
     d92:	2103      	movs	r1, #3
     d94:	438b      	bics	r3, r1
	tmp |= PM_PLCFG_PLSEL(data);
     d96:	4008      	ands	r0, r1
     d98:	4318      	orrs	r0, r3
	((Pm *)hw)->PLCFG.reg = tmp;
     d9a:	7090      	strb	r0, [r2, #2]
	return ((Pm *)hw)->INTFLAG.reg;
     d9c:	7993      	ldrb	r3, [r2, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
     d9e:	2b00      	cmp	r3, #0
     da0:	d0fc      	beq.n	d9c <_set_performance_level+0x22>
			;
	}
}
     da2:	4770      	bx	lr

00000da4 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
     da4:	b510      	push	{r4, lr}
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
     da6:	4b07      	ldr	r3, [pc, #28]	; (dc4 <_get_i2cm_index+0x20>)
     da8:	4298      	cmp	r0, r3
     daa:	d002      	beq.n	db2 <_get_i2cm_index+0xe>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     dac:	0380      	lsls	r0, r0, #14
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
		if (_i2cms[i].number == sercom_offset) {
     dae:	0e00      	lsrs	r0, r0, #24
     db0:	d007      	beq.n	dc2 <_get_i2cm_index+0x1e>
			return i;
		}
	}

	ASSERT(false);
     db2:	22e8      	movs	r2, #232	; 0xe8
     db4:	0092      	lsls	r2, r2, #2
     db6:	4904      	ldr	r1, [pc, #16]	; (dc8 <_get_i2cm_index+0x24>)
     db8:	2000      	movs	r0, #0
     dba:	4b04      	ldr	r3, [pc, #16]	; (dcc <_get_i2cm_index+0x28>)
     dbc:	4798      	blx	r3
	return -1;
     dbe:	2001      	movs	r0, #1
     dc0:	4240      	negs	r0, r0
}
     dc2:	bd10      	pop	{r4, pc}
     dc4:	43000400 	.word	0x43000400
     dc8:	000050dc 	.word	0x000050dc
     dcc:	00000c85 	.word	0x00000c85

00000dd0 <_i2c_m_sync_init_impl>:
		}
	}
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
     dd0:	b570      	push	{r4, r5, r6, lr}
     dd2:	0005      	movs	r5, r0
     dd4:	000c      	movs	r4, r1
	uint8_t i = _get_i2cm_index(hw);
     dd6:	0008      	movs	r0, r1
     dd8:	4b29      	ldr	r3, [pc, #164]	; (e80 <_i2c_m_sync_init_impl+0xb0>)
     dda:	4798      	blx	r3
     ddc:	b2c0      	uxtb	r0, r0
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     dde:	2201      	movs	r2, #1
     de0:	69e3      	ldr	r3, [r4, #28]
     de2:	421a      	tst	r2, r3
     de4:	d1fc      	bne.n	de0 <_i2c_m_sync_init_impl+0x10>
     de6:	2203      	movs	r2, #3
     de8:	69e3      	ldr	r3, [r4, #28]
     dea:	421a      	tst	r2, r3
     dec:	d1fc      	bne.n	de8 <_i2c_m_sync_init_impl+0x18>

static inline bool hri_sercomi2cm_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     dee:	6823      	ldr	r3, [r4, #0]

	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
	/* Check if module is enabled. */
	if (hri_sercomi2cm_get_CTRLA_ENABLE_bit(hw)) {
     df0:	079b      	lsls	r3, r3, #30
     df2:	d441      	bmi.n	e78 <_i2c_m_sync_init_impl+0xa8>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     df4:	2201      	movs	r2, #1
     df6:	69e3      	ldr	r3, [r4, #28]
     df8:	421a      	tst	r2, r3
     dfa:	d1fc      	bne.n	df6 <_i2c_m_sync_init_impl+0x26>
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_SWRST;
     dfc:	6823      	ldr	r3, [r4, #0]
     dfe:	2201      	movs	r2, #1
     e00:	4313      	orrs	r3, r2
     e02:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     e04:	69e3      	ldr	r3, [r4, #28]
     e06:	421a      	tst	r2, r3
     e08:	d1fc      	bne.n	e04 <_i2c_m_sync_init_impl+0x34>
		return ERR_DENIED;
	}
	hri_sercomi2cm_set_CTRLA_SWRST_bit(hw);
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
     e0a:	0043      	lsls	r3, r0, #1
     e0c:	181b      	adds	r3, r3, r0
     e0e:	00db      	lsls	r3, r3, #3
     e10:	4a1c      	ldr	r2, [pc, #112]	; (e84 <_i2c_m_sync_init_impl+0xb4>)
     e12:	18d3      	adds	r3, r2, r3
     e14:	6859      	ldr	r1, [r3, #4]
     e16:	2203      	movs	r2, #3
     e18:	69e3      	ldr	r3, [r4, #28]
     e1a:	421a      	tst	r2, r3
     e1c:	d1fc      	bne.n	e18 <_i2c_m_sync_init_impl+0x48>

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
     e1e:	6021      	str	r1, [r4, #0]
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
     e20:	0043      	lsls	r3, r0, #1
     e22:	181b      	adds	r3, r3, r0
     e24:	00db      	lsls	r3, r3, #3
     e26:	4a17      	ldr	r2, [pc, #92]	; (e84 <_i2c_m_sync_init_impl+0xb4>)
     e28:	18d3      	adds	r3, r2, r3
     e2a:	689e      	ldr	r6, [r3, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     e2c:	2204      	movs	r2, #4
     e2e:	69e3      	ldr	r3, [r4, #28]
     e30:	421a      	tst	r2, r3
     e32:	d1fc      	bne.n	e2e <_i2c_m_sync_init_impl+0x5e>

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
     e34:	6066      	str	r6, [r4, #4]
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
     e36:	0043      	lsls	r3, r0, #1
     e38:	181b      	adds	r3, r3, r0
     e3a:	00db      	lsls	r3, r3, #3
     e3c:	4a11      	ldr	r2, [pc, #68]	; (e84 <_i2c_m_sync_init_impl+0xb4>)
     e3e:	18d3      	adds	r3, r2, r3
     e40:	68db      	ldr	r3, [r3, #12]
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
     e42:	60e3      	str	r3, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
     e44:	0189      	lsls	r1, r1, #6
     e46:	0f89      	lsrs	r1, r1, #30
     e48:	81a9      	strh	r1, [r5, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
     e4a:	2301      	movs	r3, #1
     e4c:	428b      	cmp	r3, r1
     e4e:	4189      	sbcs	r1, r1
     e50:	4249      	negs	r1, r1
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     e52:	2204      	movs	r2, #4
     e54:	69e3      	ldr	r3, [r4, #28]
     e56:	421a      	tst	r2, r3
     e58:	d1fc      	bne.n	e54 <_i2c_m_sync_init_impl+0x84>
static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
     e5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
     e5c:	4a0a      	ldr	r2, [pc, #40]	; (e88 <_i2c_m_sync_init_impl+0xb8>)
     e5e:	401a      	ands	r2, r3
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
     e60:	038b      	lsls	r3, r1, #14
     e62:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
     e64:	6263      	str	r3, [r4, #36]	; 0x24

	service->trise = _i2cms[i].trise;
     e66:	0043      	lsls	r3, r0, #1
     e68:	1818      	adds	r0, r3, r0
     e6a:	00c0      	lsls	r0, r0, #3
     e6c:	4b05      	ldr	r3, [pc, #20]	; (e84 <_i2c_m_sync_init_impl+0xb4>)
     e6e:	1818      	adds	r0, r3, r0
     e70:	8a43      	ldrh	r3, [r0, #18]
     e72:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
     e74:	2000      	movs	r0, #0
}
     e76:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
     e78:	2011      	movs	r0, #17
     e7a:	4240      	negs	r0, r0
     e7c:	e7fb      	b.n	e76 <_i2c_m_sync_init_impl+0xa6>
     e7e:	46c0      	nop			; (mov r8, r8)
     e80:	00000da5 	.word	0x00000da5
     e84:	00005088 	.word	0x00005088
     e88:	ffffbfff 	.word	0xffffbfff

00000e8c <_usart_init>:
{
     e8c:	b510      	push	{r4, lr}
     e8e:	0004      	movs	r4, r0
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
     e90:	4b39      	ldr	r3, [pc, #228]	; (f78 <_usart_init+0xec>)
     e92:	4298      	cmp	r0, r3
     e94:	d005      	beq.n	ea2 <_usart_init+0x16>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     e96:	0383      	lsls	r3, r0, #14
     e98:	0e1b      	lsrs	r3, r3, #24
		if (_usarts[i].number == sercom_offset) {
     e9a:	2b03      	cmp	r3, #3
     e9c:	d05c      	beq.n	f58 <_usart_init+0xcc>
     e9e:	2b04      	cmp	r3, #4
     ea0:	d05c      	beq.n	f5c <_usart_init+0xd0>
	ASSERT(false);
     ea2:	4a36      	ldr	r2, [pc, #216]	; (f7c <_usart_init+0xf0>)
     ea4:	4936      	ldr	r1, [pc, #216]	; (f80 <_usart_init+0xf4>)
     ea6:	2000      	movs	r0, #0
     ea8:	4b36      	ldr	r3, [pc, #216]	; (f84 <_usart_init+0xf8>)
     eaa:	4798      	blx	r3
	return 0;
     eac:	2000      	movs	r0, #0
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     eae:	2201      	movs	r2, #1
     eb0:	69e3      	ldr	r3, [r4, #28]
     eb2:	421a      	tst	r2, r3
     eb4:	d1fc      	bne.n	eb0 <_usart_init+0x24>
     eb6:	2203      	movs	r2, #3
     eb8:	69e3      	ldr	r3, [r4, #28]
     eba:	421a      	tst	r2, r3
     ebc:	d1fc      	bne.n	eb8 <_usart_init+0x2c>

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     ebe:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomusart_get_CTRLA_ENABLE_bit(hw)) {
     ec0:	079b      	lsls	r3, r3, #30
     ec2:	d455      	bmi.n	f70 <_usart_init+0xe4>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     ec4:	2201      	movs	r2, #1
     ec6:	69e3      	ldr	r3, [r4, #28]
     ec8:	421a      	tst	r2, r3
     eca:	d1fc      	bne.n	ec6 <_usart_init+0x3a>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
     ecc:	6823      	ldr	r3, [r4, #0]
     ece:	2201      	movs	r2, #1
     ed0:	4313      	orrs	r3, r2
     ed2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     ed4:	69e3      	ldr	r3, [r4, #28]
     ed6:	421a      	tst	r2, r3
     ed8:	d1fc      	bne.n	ed4 <_usart_init+0x48>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
     eda:	0001      	movs	r1, r0
     edc:	0083      	lsls	r3, r0, #2
     ede:	181b      	adds	r3, r3, r0
     ee0:	009b      	lsls	r3, r3, #2
     ee2:	4a29      	ldr	r2, [pc, #164]	; (f88 <_usart_init+0xfc>)
     ee4:	18d3      	adds	r3, r2, r3
     ee6:	69d8      	ldr	r0, [r3, #28]
     ee8:	2203      	movs	r2, #3
     eea:	69e3      	ldr	r3, [r4, #28]
     eec:	421a      	tst	r2, r3
     eee:	d1fc      	bne.n	eea <_usart_init+0x5e>

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	((Sercom *)hw)->USART.CTRLA.reg = data;
     ef0:	6020      	str	r0, [r4, #0]
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
     ef2:	008b      	lsls	r3, r1, #2
     ef4:	185b      	adds	r3, r3, r1
     ef6:	009b      	lsls	r3, r3, #2
     ef8:	4a23      	ldr	r2, [pc, #140]	; (f88 <_usart_init+0xfc>)
     efa:	18d3      	adds	r3, r2, r3
     efc:	6a1b      	ldr	r3, [r3, #32]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     efe:	6063      	str	r3, [r4, #4]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
     f00:	23c0      	movs	r3, #192	; 0xc0
     f02:	01db      	lsls	r3, r3, #7
     f04:	4218      	tst	r0, r3
     f06:	d02b      	beq.n	f60 <_usart_init+0xd4>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
     f08:	008a      	lsls	r2, r1, #2
     f0a:	1852      	adds	r2, r2, r1
     f0c:	0093      	lsls	r3, r2, #2
     f0e:	4a1e      	ldr	r2, [pc, #120]	; (f88 <_usart_init+0xfc>)
     f10:	18d2      	adds	r2, r2, r3
     f12:	8c90      	ldrh	r0, [r2, #36]	; 0x24
     f14:	89a3      	ldrh	r3, [r4, #12]
     f16:	04c0      	lsls	r0, r0, #19
     f18:	0cc0      	lsrs	r0, r0, #19
     f1a:	0b5b      	lsrs	r3, r3, #13
     f1c:	035b      	lsls	r3, r3, #13
     f1e:	4303      	orrs	r3, r0
     f20:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
     f22:	3226      	adds	r2, #38	; 0x26
     f24:	7813      	ldrb	r3, [r2, #0]
     f26:	2207      	movs	r2, #7
     f28:	401a      	ands	r2, r3
     f2a:	89a3      	ldrh	r3, [r4, #12]
     f2c:	0352      	lsls	r2, r2, #13
     f2e:	04db      	lsls	r3, r3, #19
     f30:	0cdb      	lsrs	r3, r3, #19
     f32:	4313      	orrs	r3, r2
     f34:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
     f36:	4a14      	ldr	r2, [pc, #80]	; (f88 <_usart_init+0xfc>)
     f38:	0088      	lsls	r0, r1, #2
     f3a:	1843      	adds	r3, r0, r1
     f3c:	009b      	lsls	r3, r3, #2
     f3e:	18d3      	adds	r3, r2, r3
     f40:	3327      	adds	r3, #39	; 0x27
     f42:	781b      	ldrb	r3, [r3, #0]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     f44:	73a3      	strb	r3, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
     f46:	1841      	adds	r1, r0, r1
     f48:	0089      	lsls	r1, r1, #2
     f4a:	1852      	adds	r2, r2, r1
     f4c:	3228      	adds	r2, #40	; 0x28
     f4e:	7812      	ldrb	r2, [r2, #0]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     f50:	2330      	movs	r3, #48	; 0x30
     f52:	54e2      	strb	r2, [r4, r3]
	return ERR_NONE;
     f54:	2000      	movs	r0, #0
}
     f56:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     f58:	2000      	movs	r0, #0
     f5a:	e7a8      	b.n	eae <_usart_init+0x22>
		if (_usarts[i].number == sercom_offset) {
     f5c:	2001      	movs	r0, #1
     f5e:	e7a6      	b.n	eae <_usart_init+0x22>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
     f60:	008b      	lsls	r3, r1, #2
     f62:	185b      	adds	r3, r3, r1
     f64:	009b      	lsls	r3, r3, #2
     f66:	4a08      	ldr	r2, [pc, #32]	; (f88 <_usart_init+0xfc>)
     f68:	18d3      	adds	r3, r2, r3
     f6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	((Sercom *)hw)->USART.BAUD.reg = data;
     f6c:	81a3      	strh	r3, [r4, #12]
     f6e:	e7e2      	b.n	f36 <_usart_init+0xaa>
		return ERR_DENIED;
     f70:	2011      	movs	r0, #17
     f72:	4240      	negs	r0, r0
     f74:	e7ef      	b.n	f56 <_usart_init+0xca>
     f76:	46c0      	nop			; (mov r8, r8)
     f78:	43000400 	.word	0x43000400
     f7c:	00000243 	.word	0x00000243
     f80:	000050dc 	.word	0x000050dc
     f84:	00000c85 	.word	0x00000c85
     f88:	00005088 	.word	0x00005088

00000f8c <_usart_sync_init>:
{
     f8c:	b570      	push	{r4, r5, r6, lr}
     f8e:	0005      	movs	r5, r0
     f90:	000c      	movs	r4, r1
	ASSERT(device);
     f92:	1e43      	subs	r3, r0, #1
     f94:	4198      	sbcs	r0, r3
     f96:	b2c0      	uxtb	r0, r0
     f98:	22be      	movs	r2, #190	; 0xbe
     f9a:	4904      	ldr	r1, [pc, #16]	; (fac <_usart_sync_init+0x20>)
     f9c:	4b04      	ldr	r3, [pc, #16]	; (fb0 <_usart_sync_init+0x24>)
     f9e:	4798      	blx	r3
	device->hw = hw;
     fa0:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     fa2:	0020      	movs	r0, r4
     fa4:	4b03      	ldr	r3, [pc, #12]	; (fb4 <_usart_sync_init+0x28>)
     fa6:	4798      	blx	r3
}
     fa8:	bd70      	pop	{r4, r5, r6, pc}
     faa:	46c0      	nop			; (mov r8, r8)
     fac:	000050dc 	.word	0x000050dc
     fb0:	00000c85 	.word	0x00000c85
     fb4:	00000e8d 	.word	0x00000e8d

00000fb8 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     fb8:	6802      	ldr	r2, [r0, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     fba:	2103      	movs	r1, #3
     fbc:	69d3      	ldr	r3, [r2, #28]
     fbe:	4219      	tst	r1, r3
     fc0:	d1fc      	bne.n	fbc <_usart_sync_enable+0x4>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     fc2:	6813      	ldr	r3, [r2, #0]
     fc4:	2102      	movs	r1, #2
     fc6:	430b      	orrs	r3, r1
     fc8:	6013      	str	r3, [r2, #0]
}
     fca:	4770      	bx	lr

00000fcc <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     fcc:	6803      	ldr	r3, [r0, #0]
     fce:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
     fd0:	8519      	strh	r1, [r3, #40]	; 0x28
}
     fd2:	4770      	bx	lr

00000fd4 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     fd4:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     fd6:	8d18      	ldrh	r0, [r3, #40]	; 0x28
     fd8:	b2c0      	uxtb	r0, r0
}
     fda:	4770      	bx	lr

00000fdc <_usart_sync_is_byte_sent>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     fdc:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     fde:	7e18      	ldrb	r0, [r3, #24]
     fe0:	2301      	movs	r3, #1
     fe2:	4018      	ands	r0, r3
}
     fe4:	4770      	bx	lr

00000fe6 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     fe6:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     fe8:	7e18      	ldrb	r0, [r3, #24]
     fea:	0740      	lsls	r0, r0, #29
     fec:	0fc0      	lsrs	r0, r0, #31
}
     fee:	4770      	bx	lr

00000ff0 <_i2c_m_sync_init>:
{
     ff0:	b570      	push	{r4, r5, r6, lr}
     ff2:	0004      	movs	r4, r0
     ff4:	000d      	movs	r5, r1
	ASSERT(i2c_dev);
     ff6:	1e43      	subs	r3, r0, #1
     ff8:	4198      	sbcs	r0, r3
     ffa:	b2c0      	uxtb	r0, r0
     ffc:	4a04      	ldr	r2, [pc, #16]	; (1010 <_i2c_m_sync_init+0x20>)
     ffe:	4905      	ldr	r1, [pc, #20]	; (1014 <_i2c_m_sync_init+0x24>)
    1000:	4b05      	ldr	r3, [pc, #20]	; (1018 <_i2c_m_sync_init+0x28>)
    1002:	4798      	blx	r3
	i2c_dev->hw = hw;
    1004:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    1006:	0029      	movs	r1, r5
    1008:	0020      	movs	r0, r4
    100a:	4b04      	ldr	r3, [pc, #16]	; (101c <_i2c_m_sync_init+0x2c>)
    100c:	4798      	blx	r3
}
    100e:	bd70      	pop	{r4, r5, r6, pc}
    1010:	0000050f 	.word	0x0000050f
    1014:	000050dc 	.word	0x000050dc
    1018:	00000c85 	.word	0x00000c85
    101c:	00000dd1 	.word	0x00000dd1

00001020 <_i2c_m_sync_enable>:
{
    1020:	b570      	push	{r4, r5, r6, lr}
    1022:	0004      	movs	r4, r0
	ASSERT(i2c_dev);
    1024:	4d16      	ldr	r5, [pc, #88]	; (1080 <_i2c_m_sync_enable+0x60>)
    1026:	1e43      	subs	r3, r0, #1
    1028:	4198      	sbcs	r0, r3
    102a:	b2c0      	uxtb	r0, r0
    102c:	4a15      	ldr	r2, [pc, #84]	; (1084 <_i2c_m_sync_enable+0x64>)
    102e:	0029      	movs	r1, r5
    1030:	4e15      	ldr	r6, [pc, #84]	; (1088 <_i2c_m_sync_enable+0x68>)
    1032:	47b0      	blx	r6
	_i2c_m_enable_implementation(i2c_dev->hw);
    1034:	6924      	ldr	r4, [r4, #16]
	ASSERT(hw);
    1036:	0020      	movs	r0, r4
    1038:	1e43      	subs	r3, r0, #1
    103a:	4198      	sbcs	r0, r3
    103c:	b2c0      	uxtb	r0, r0
    103e:	4a13      	ldr	r2, [pc, #76]	; (108c <_i2c_m_sync_enable+0x6c>)
    1040:	0029      	movs	r1, r5
    1042:	47b0      	blx	r6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1044:	2203      	movs	r2, #3
    1046:	69e3      	ldr	r3, [r4, #28]
    1048:	421a      	tst	r2, r3
    104a:	d1fc      	bne.n	1046 <_i2c_m_sync_enable+0x26>
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    104c:	6823      	ldr	r3, [r4, #0]
    104e:	2202      	movs	r2, #2
    1050:	4313      	orrs	r3, r2
    1052:	6023      	str	r3, [r4, #0]
	int timeout = 65535;
    1054:	490e      	ldr	r1, [pc, #56]	; (1090 <_i2c_m_sync_enable+0x70>)
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1056:	3202      	adds	r2, #2
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    1058:	2003      	movs	r0, #3
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    105a:	2510      	movs	r5, #16
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    105c:	69e3      	ldr	r3, [r4, #28]
    105e:	421a      	tst	r2, r3
    1060:	d1fc      	bne.n	105c <_i2c_m_sync_enable+0x3c>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    1062:	8b63      	ldrh	r3, [r4, #26]
    1064:	091b      	lsrs	r3, r3, #4
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    1066:	4003      	ands	r3, r0
    1068:	2b01      	cmp	r3, #1
    106a:	d007      	beq.n	107c <_i2c_m_sync_enable+0x5c>
		timeout--;
    106c:	3901      	subs	r1, #1
		if (timeout <= 0) {
    106e:	2900      	cmp	r1, #0
    1070:	dcf4      	bgt.n	105c <_i2c_m_sync_enable+0x3c>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1072:	69e3      	ldr	r3, [r4, #28]
    1074:	421a      	tst	r2, r3
    1076:	d1fc      	bne.n	1072 <_i2c_m_sync_enable+0x52>
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    1078:	8365      	strh	r5, [r4, #26]
    107a:	e7ef      	b.n	105c <_i2c_m_sync_enable+0x3c>
}
    107c:	2000      	movs	r0, #0
    107e:	bd70      	pop	{r4, r5, r6, pc}
    1080:	000050dc 	.word	0x000050dc
    1084:	0000052c 	.word	0x0000052c
    1088:	00000c85 	.word	0x00000c85
    108c:	000005fe 	.word	0x000005fe
    1090:	0000ffff 	.word	0x0000ffff

00001094 <_i2c_m_sync_set_baudrate>:
{
    1094:	b5f0      	push	{r4, r5, r6, r7, lr}
    1096:	46d6      	mov	lr, sl
    1098:	464f      	mov	r7, r9
    109a:	4646      	mov	r6, r8
    109c:	b5c0      	push	{r6, r7, lr}
    109e:	b084      	sub	sp, #16
    10a0:	0006      	movs	r6, r0
    10a2:	0015      	movs	r5, r2
	void *   hw = i2c_dev->hw;
    10a4:	6904      	ldr	r4, [r0, #16]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    10a6:	2203      	movs	r2, #3
    10a8:	69e3      	ldr	r3, [r4, #28]
    10aa:	421a      	tst	r2, r3
    10ac:	d1fc      	bne.n	10a8 <_i2c_m_sync_set_baudrate+0x14>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    10ae:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomi2cm_get_CTRLA_ENABLE_bit(hw)) {
    10b0:	079b      	lsls	r3, r3, #30
    10b2:	d500      	bpl.n	10b6 <_i2c_m_sync_set_baudrate+0x22>
    10b4:	e094      	b.n	11e0 <_i2c_m_sync_set_baudrate+0x14c>
	tmp     = _get_i2cm_index(hw);
    10b6:	0020      	movs	r0, r4
    10b8:	4b4c      	ldr	r3, [pc, #304]	; (11ec <_i2c_m_sync_set_baudrate+0x158>)
    10ba:	4798      	blx	r3
	if (i2c_dev->service.mode == I2C_STANDARD_MODE) {
    10bc:	89b3      	ldrh	r3, [r6, #12]
    10be:	2b00      	cmp	r3, #0
    10c0:	d01a      	beq.n	10f8 <_i2c_m_sync_set_baudrate+0x64>
	} else if (i2c_dev->service.mode == I2C_FASTMODE) {
    10c2:	2b01      	cmp	r3, #1
    10c4:	d052      	beq.n	116c <_i2c_m_sync_set_baudrate+0xd8>
	} else if (i2c_dev->service.mode == I2C_HIGHSPEED_MODE) {
    10c6:	2b02      	cmp	r3, #2
    10c8:	d000      	beq.n	10cc <_i2c_m_sync_set_baudrate+0x38>
    10ca:	e08c      	b.n	11e6 <_i2c_m_sync_set_baudrate+0x152>
		tmp = (clkrate - 2 * baudrate) / (2 * baudrate);
    10cc:	0069      	lsls	r1, r5, #1
	tmp = ((Sercom *)hw)->I2CM.BAUD.reg;
    10ce:	68e0      	ldr	r0, [r4, #12]
	tmp &= ~SERCOM_I2CM_BAUD_HSBAUD_Msk;
    10d0:	4d47      	ldr	r5, [pc, #284]	; (11f0 <_i2c_m_sync_set_baudrate+0x15c>)
    10d2:	4005      	ands	r5, r0
    10d4:	20fa      	movs	r0, #250	; 0xfa
    10d6:	0180      	lsls	r0, r0, #6
    10d8:	1a40      	subs	r0, r0, r1
    10da:	4b46      	ldr	r3, [pc, #280]	; (11f4 <_i2c_m_sync_set_baudrate+0x160>)
    10dc:	4798      	blx	r3
	tmp |= SERCOM_I2CM_BAUD_HSBAUD(data);
    10de:	0400      	lsls	r0, r0, #16
    10e0:	23ff      	movs	r3, #255	; 0xff
    10e2:	041b      	lsls	r3, r3, #16
    10e4:	4018      	ands	r0, r3
    10e6:	4328      	orrs	r0, r5
	((Sercom *)hw)->I2CM.BAUD.reg = tmp;
    10e8:	60e0      	str	r0, [r4, #12]
	return ERR_NONE;
    10ea:	2000      	movs	r0, #0
}
    10ec:	b004      	add	sp, #16
    10ee:	bc1c      	pop	{r2, r3, r4}
    10f0:	4690      	mov	r8, r2
    10f2:	4699      	mov	r9, r3
    10f4:	46a2      	mov	sl, r4
    10f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tmp = ((Sercom *)hw)->I2CM.BAUD.reg;
    10f8:	68e7      	ldr	r7, [r4, #12]
	tmp &= ~SERCOM_I2CM_BAUD_BAUD_Msk;
    10fa:	33ff      	adds	r3, #255	; 0xff
    10fc:	4698      	mov	r8, r3
    10fe:	439f      	bics	r7, r3
		tmp = (uint32_t)((clkrate - 10 * baudrate - baudrate * clkrate * (i2c_dev->service.trise * 0.000000001))
    1100:	00a8      	lsls	r0, r5, #2
    1102:	1940      	adds	r0, r0, r5
    1104:	0040      	lsls	r0, r0, #1
    1106:	23fa      	movs	r3, #250	; 0xfa
    1108:	019b      	lsls	r3, r3, #6
    110a:	469a      	mov	sl, r3
    110c:	1a18      	subs	r0, r3, r0
    110e:	4b3a      	ldr	r3, [pc, #232]	; (11f8 <_i2c_m_sync_set_baudrate+0x164>)
    1110:	4699      	mov	r9, r3
    1112:	4798      	blx	r3
    1114:	9000      	str	r0, [sp, #0]
    1116:	9101      	str	r1, [sp, #4]
    1118:	89f0      	ldrh	r0, [r6, #14]
    111a:	4b38      	ldr	r3, [pc, #224]	; (11fc <_i2c_m_sync_set_baudrate+0x168>)
    111c:	4798      	blx	r3
    111e:	4e38      	ldr	r6, [pc, #224]	; (1200 <_i2c_m_sync_set_baudrate+0x16c>)
    1120:	4a38      	ldr	r2, [pc, #224]	; (1204 <_i2c_m_sync_set_baudrate+0x170>)
    1122:	4b39      	ldr	r3, [pc, #228]	; (1208 <_i2c_m_sync_set_baudrate+0x174>)
    1124:	47b0      	blx	r6
    1126:	9002      	str	r0, [sp, #8]
    1128:	9103      	str	r1, [sp, #12]
    112a:	4653      	mov	r3, sl
    112c:	436b      	muls	r3, r5
    112e:	0018      	movs	r0, r3
    1130:	47c8      	blx	r9
    1132:	0002      	movs	r2, r0
    1134:	000b      	movs	r3, r1
    1136:	9802      	ldr	r0, [sp, #8]
    1138:	9903      	ldr	r1, [sp, #12]
    113a:	47b0      	blx	r6
    113c:	0002      	movs	r2, r0
    113e:	000b      	movs	r3, r1
    1140:	9800      	ldr	r0, [sp, #0]
    1142:	9901      	ldr	r1, [sp, #4]
    1144:	4e31      	ldr	r6, [pc, #196]	; (120c <_i2c_m_sync_set_baudrate+0x178>)
    1146:	47b0      	blx	r6
    1148:	9000      	str	r0, [sp, #0]
    114a:	9101      	str	r1, [sp, #4]
		                 / (2 * baudrate));
    114c:	0068      	lsls	r0, r5, #1
    114e:	47c8      	blx	r9
    1150:	0002      	movs	r2, r0
    1152:	000b      	movs	r3, r1
    1154:	9800      	ldr	r0, [sp, #0]
    1156:	9901      	ldr	r1, [sp, #4]
    1158:	4d2d      	ldr	r5, [pc, #180]	; (1210 <_i2c_m_sync_set_baudrate+0x17c>)
    115a:	47a8      	blx	r5
		tmp = (uint32_t)((clkrate - 10 * baudrate - baudrate * clkrate * (i2c_dev->service.trise * 0.000000001))
    115c:	4b2d      	ldr	r3, [pc, #180]	; (1214 <_i2c_m_sync_set_baudrate+0x180>)
    115e:	4798      	blx	r3
	tmp |= SERCOM_I2CM_BAUD_BAUD(data);
    1160:	4643      	mov	r3, r8
    1162:	4018      	ands	r0, r3
    1164:	4338      	orrs	r0, r7
	((Sercom *)hw)->I2CM.BAUD.reg = tmp;
    1166:	60e0      	str	r0, [r4, #12]
	return ERR_NONE;
    1168:	2000      	movs	r0, #0
    116a:	e7bf      	b.n	10ec <_i2c_m_sync_set_baudrate+0x58>
	tmp = ((Sercom *)hw)->I2CM.BAUD.reg;
    116c:	68e7      	ldr	r7, [r4, #12]
	tmp &= ~SERCOM_I2CM_BAUD_BAUD_Msk;
    116e:	33fe      	adds	r3, #254	; 0xfe
    1170:	4698      	mov	r8, r3
    1172:	439f      	bics	r7, r3
		tmp = (uint32_t)((clkrate - 10 * baudrate - baudrate * clkrate * (i2c_dev->service.trise * 0.000000001))
    1174:	00a8      	lsls	r0, r5, #2
    1176:	1940      	adds	r0, r0, r5
    1178:	0040      	lsls	r0, r0, #1
    117a:	23fa      	movs	r3, #250	; 0xfa
    117c:	019b      	lsls	r3, r3, #6
    117e:	469a      	mov	sl, r3
    1180:	1a18      	subs	r0, r3, r0
    1182:	4b1d      	ldr	r3, [pc, #116]	; (11f8 <_i2c_m_sync_set_baudrate+0x164>)
    1184:	4699      	mov	r9, r3
    1186:	4798      	blx	r3
    1188:	9000      	str	r0, [sp, #0]
    118a:	9101      	str	r1, [sp, #4]
    118c:	89f0      	ldrh	r0, [r6, #14]
    118e:	4b1b      	ldr	r3, [pc, #108]	; (11fc <_i2c_m_sync_set_baudrate+0x168>)
    1190:	4798      	blx	r3
    1192:	4e1b      	ldr	r6, [pc, #108]	; (1200 <_i2c_m_sync_set_baudrate+0x16c>)
    1194:	4a1b      	ldr	r2, [pc, #108]	; (1204 <_i2c_m_sync_set_baudrate+0x170>)
    1196:	4b1c      	ldr	r3, [pc, #112]	; (1208 <_i2c_m_sync_set_baudrate+0x174>)
    1198:	47b0      	blx	r6
    119a:	9002      	str	r0, [sp, #8]
    119c:	9103      	str	r1, [sp, #12]
    119e:	4653      	mov	r3, sl
    11a0:	436b      	muls	r3, r5
    11a2:	0018      	movs	r0, r3
    11a4:	47c8      	blx	r9
    11a6:	0002      	movs	r2, r0
    11a8:	000b      	movs	r3, r1
    11aa:	9802      	ldr	r0, [sp, #8]
    11ac:	9903      	ldr	r1, [sp, #12]
    11ae:	47b0      	blx	r6
    11b0:	0002      	movs	r2, r0
    11b2:	000b      	movs	r3, r1
    11b4:	9800      	ldr	r0, [sp, #0]
    11b6:	9901      	ldr	r1, [sp, #4]
    11b8:	4e14      	ldr	r6, [pc, #80]	; (120c <_i2c_m_sync_set_baudrate+0x178>)
    11ba:	47b0      	blx	r6
    11bc:	9000      	str	r0, [sp, #0]
    11be:	9101      	str	r1, [sp, #4]
		                 / (2 * baudrate));
    11c0:	0068      	lsls	r0, r5, #1
    11c2:	47c8      	blx	r9
    11c4:	0002      	movs	r2, r0
    11c6:	000b      	movs	r3, r1
    11c8:	9800      	ldr	r0, [sp, #0]
    11ca:	9901      	ldr	r1, [sp, #4]
    11cc:	4d10      	ldr	r5, [pc, #64]	; (1210 <_i2c_m_sync_set_baudrate+0x17c>)
    11ce:	47a8      	blx	r5
		tmp = (uint32_t)((clkrate - 10 * baudrate - baudrate * clkrate * (i2c_dev->service.trise * 0.000000001))
    11d0:	4b10      	ldr	r3, [pc, #64]	; (1214 <_i2c_m_sync_set_baudrate+0x180>)
    11d2:	4798      	blx	r3
	tmp |= SERCOM_I2CM_BAUD_BAUD(data);
    11d4:	4643      	mov	r3, r8
    11d6:	4018      	ands	r0, r3
    11d8:	4338      	orrs	r0, r7
	((Sercom *)hw)->I2CM.BAUD.reg = tmp;
    11da:	60e0      	str	r0, [r4, #12]
	return ERR_NONE;
    11dc:	2000      	movs	r0, #0
    11de:	e785      	b.n	10ec <_i2c_m_sync_set_baudrate+0x58>
		return ERR_DENIED;
    11e0:	2011      	movs	r0, #17
    11e2:	4240      	negs	r0, r0
    11e4:	e782      	b.n	10ec <_i2c_m_sync_set_baudrate+0x58>
		return ERR_INVALID_ARG;
    11e6:	200d      	movs	r0, #13
    11e8:	4240      	negs	r0, r0
    11ea:	e77f      	b.n	10ec <_i2c_m_sync_set_baudrate+0x58>
    11ec:	00000da5 	.word	0x00000da5
    11f0:	ff00ffff 	.word	0xff00ffff
    11f4:	00001fbd 	.word	0x00001fbd
    11f8:	00003391 	.word	0x00003391
    11fc:	0000330d 	.word	0x0000330d
    1200:	00002779 	.word	0x00002779
    1204:	e826d695 	.word	0xe826d695
    1208:	3e112e0b 	.word	0x3e112e0b
    120c:	00002c79 	.word	0x00002c79
    1210:	00002111 	.word	0x00002111
    1214:	000020d5 	.word	0x000020d5

00001218 <_i2c_m_sync_transfer>:
{
    1218:	b5f0      	push	{r4, r5, r6, r7, lr}
    121a:	46de      	mov	lr, fp
    121c:	4657      	mov	r7, sl
    121e:	464e      	mov	r6, r9
    1220:	4645      	mov	r5, r8
    1222:	b5e0      	push	{r5, r6, r7, lr}
    1224:	b083      	sub	sp, #12
    1226:	0005      	movs	r5, r0
    1228:	4689      	mov	r9, r1
	void *   hw = i2c_dev->hw;
    122a:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    122c:	0003      	movs	r3, r0
    122e:	1e5a      	subs	r2, r3, #1
    1230:	4193      	sbcs	r3, r2
    1232:	b2db      	uxtb	r3, r3
    1234:	4698      	mov	r8, r3
    1236:	4ec0      	ldr	r6, [pc, #768]	; (1538 <_i2c_m_sync_transfer+0x320>)
    1238:	4ac0      	ldr	r2, [pc, #768]	; (153c <_i2c_m_sync_transfer+0x324>)
    123a:	0031      	movs	r1, r6
    123c:	0018      	movs	r0, r3
    123e:	4fc0      	ldr	r7, [pc, #768]	; (1540 <_i2c_m_sync_transfer+0x328>)
    1240:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    1242:	6928      	ldr	r0, [r5, #16]
    1244:	1e43      	subs	r3, r0, #1
    1246:	4198      	sbcs	r0, r3
    1248:	b2c0      	uxtb	r0, r0
    124a:	4abe      	ldr	r2, [pc, #760]	; (1544 <_i2c_m_sync_transfer+0x32c>)
    124c:	0031      	movs	r1, r6
    124e:	47b8      	blx	r7
	ASSERT(msg);
    1250:	4648      	mov	r0, r9
    1252:	1e43      	subs	r3, r0, #1
    1254:	4198      	sbcs	r0, r3
    1256:	b2c0      	uxtb	r0, r0
    1258:	4abb      	ldr	r2, [pc, #748]	; (1548 <_i2c_m_sync_transfer+0x330>)
    125a:	0031      	movs	r1, r6
    125c:	47b8      	blx	r7
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    125e:	886b      	ldrh	r3, [r5, #2]
    1260:	05db      	lsls	r3, r3, #23
    1262:	d500      	bpl.n	1266 <_i2c_m_sync_transfer+0x4e>
    1264:	e20b      	b.n	167e <_i2c_m_sync_transfer+0x466>
	msg->flags |= I2C_M_BUSY;
    1266:	464b      	mov	r3, r9
    1268:	885b      	ldrh	r3, [r3, #2]
    126a:	2280      	movs	r2, #128	; 0x80
    126c:	0052      	lsls	r2, r2, #1
    126e:	4313      	orrs	r3, r2
    1270:	464a      	mov	r2, r9
    1272:	8053      	strh	r3, [r2, #2]
	i2c_dev->service.msg = *msg;
    1274:	002b      	movs	r3, r5
    1276:	ca43      	ldmia	r2!, {r0, r1, r6}
    1278:	c343      	stmia	r3!, {r0, r1, r6}
	if (!(i2c_dev->service.msg.flags & I2C_M_NOADDR)) {
    127a:	886b      	ldrh	r3, [r5, #2]
    127c:	049b      	lsls	r3, r3, #18
    127e:	d50a      	bpl.n	1296 <_i2c_m_sync_transfer+0x7e>
			return I2C_NACK;
    1280:	2000      	movs	r0, #0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1282:	2380      	movs	r3, #128	; 0x80
    1284:	005b      	lsls	r3, r3, #1
    1286:	469b      	mov	fp, r3
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    1288:	2103      	movs	r1, #3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    128a:	2204      	movs	r2, #4
	if (flags & MB_FLAG) {
    128c:	2701      	movs	r7, #1
	} else if (flags & SB_FLAG) {
    128e:	3bfe      	subs	r3, #254	; 0xfe
    1290:	469a      	mov	sl, r3
    1292:	9001      	str	r0, [sp, #4]
    1294:	e1c0      	b.n	1618 <_i2c_m_sync_transfer+0x400>
	void *             hw    = i2c_dev->hw;
    1296:	692e      	ldr	r6, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1298:	6837      	ldr	r7, [r6, #0]
	ASSERT(i2c_dev);
    129a:	4aac      	ldr	r2, [pc, #688]	; (154c <_i2c_m_sync_transfer+0x334>)
    129c:	49a6      	ldr	r1, [pc, #664]	; (1538 <_i2c_m_sync_transfer+0x320>)
    129e:	4640      	mov	r0, r8
    12a0:	4ba7      	ldr	r3, [pc, #668]	; (1540 <_i2c_m_sync_transfer+0x328>)
    12a2:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    12a4:	686b      	ldr	r3, [r5, #4]
    12a6:	2b01      	cmp	r3, #1
    12a8:	d054      	beq.n	1354 <_i2c_m_sync_transfer+0x13c>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12aa:	2204      	movs	r2, #4
    12ac:	69f3      	ldr	r3, [r6, #28]
    12ae:	421a      	tst	r2, r3
    12b0:	d1fc      	bne.n	12ac <_i2c_m_sync_transfer+0x94>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    12b2:	6873      	ldr	r3, [r6, #4]
    12b4:	4aa6      	ldr	r2, [pc, #664]	; (1550 <_i2c_m_sync_transfer+0x338>)
    12b6:	4013      	ands	r3, r2
    12b8:	6073      	str	r3, [r6, #4]
	if (msg->addr & I2C_M_TEN) {
    12ba:	882b      	ldrh	r3, [r5, #0]
    12bc:	055a      	lsls	r2, r3, #21
    12be:	d555      	bpl.n	136c <_i2c_m_sync_transfer+0x154>
		if (msg->flags & I2C_M_RD) {
    12c0:	886a      	ldrh	r2, [r5, #2]
    12c2:	07d2      	lsls	r2, r2, #31
    12c4:	d504      	bpl.n	12d0 <_i2c_m_sync_transfer+0xb8>
			msg->flags |= I2C_M_TEN;
    12c6:	886a      	ldrh	r2, [r5, #2]
    12c8:	2180      	movs	r1, #128	; 0x80
    12ca:	00c9      	lsls	r1, r1, #3
    12cc:	430a      	orrs	r2, r1
    12ce:	806a      	strh	r2, [r5, #2]
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    12d0:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    12d2:	4aa0      	ldr	r2, [pc, #640]	; (1554 <_i2c_m_sync_transfer+0x33c>)
    12d4:	401a      	ands	r2, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12d6:	2104      	movs	r1, #4
    12d8:	69f3      	ldr	r3, [r6, #28]
    12da:	4219      	tst	r1, r3
    12dc:	d1fc      	bne.n	12d8 <_i2c_m_sync_transfer+0xc0>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    12de:	6a71      	ldr	r1, [r6, #36]	; 0x24
    12e0:	2380      	movs	r3, #128	; 0x80
    12e2:	01db      	lsls	r3, r3, #7
    12e4:	400b      	ands	r3, r1
		hri_sercomi2cm_write_ADDR_reg(hw,
    12e6:	2180      	movs	r1, #128	; 0x80
    12e8:	0209      	lsls	r1, r1, #8
    12ea:	4319      	orrs	r1, r3
    12ec:	4311      	orrs	r1, r2
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12ee:	2204      	movs	r2, #4
    12f0:	69f3      	ldr	r3, [r6, #28]
    12f2:	421a      	tst	r2, r3
    12f4:	d1fc      	bne.n	12f0 <_i2c_m_sync_transfer+0xd8>
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    12f6:	6271      	str	r1, [r6, #36]	; 0x24
	void *   hw      = i2c_dev->hw;
    12f8:	6928      	ldr	r0, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    12fa:	7e03      	ldrb	r3, [r0, #24]
    12fc:	b2db      	uxtb	r3, r3
    12fe:	4a96      	ldr	r2, [pc, #600]	; (1558 <_i2c_m_sync_transfer+0x340>)
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    1300:	2103      	movs	r1, #3
    1302:	4219      	tst	r1, r3
    1304:	d104      	bne.n	1310 <_i2c_m_sync_transfer+0xf8>
    1306:	7e03      	ldrb	r3, [r0, #24]
    1308:	b2db      	uxtb	r3, r3
    130a:	3a01      	subs	r2, #1
		if (timeout-- == 0) {
    130c:	2a00      	cmp	r2, #0
    130e:	d1f8      	bne.n	1302 <_i2c_m_sync_transfer+0xea>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1310:	6830      	ldr	r0, [r6, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1312:	2104      	movs	r1, #4
    1314:	69f2      	ldr	r2, [r6, #28]
    1316:	4211      	tst	r1, r2
    1318:	d1fc      	bne.n	1314 <_i2c_m_sync_transfer+0xfc>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    131a:	8b71      	ldrh	r1, [r6, #26]
    131c:	b289      	uxth	r1, r1
	if (flags & MB_FLAG) {
    131e:	07da      	lsls	r2, r3, #31
    1320:	d400      	bmi.n	1324 <_i2c_m_sync_transfer+0x10c>
    1322:	e098      	b.n	1456 <_i2c_m_sync_transfer+0x23e>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    1324:	078b      	lsls	r3, r1, #30
    1326:	d537      	bpl.n	1398 <_i2c_m_sync_transfer+0x180>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1328:	2301      	movs	r3, #1
    132a:	7633      	strb	r3, [r6, #24]
			msg->flags |= I2C_M_FAIL;
    132c:	886b      	ldrh	r3, [r5, #2]
    132e:	2280      	movs	r2, #128	; 0x80
    1330:	0152      	lsls	r2, r2, #5
    1332:	4313      	orrs	r3, r2
    1334:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    1336:	886b      	ldrh	r3, [r5, #2]
    1338:	4a88      	ldr	r2, [pc, #544]	; (155c <_i2c_m_sync_transfer+0x344>)
    133a:	4013      	ands	r3, r2
    133c:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    133e:	2001      	movs	r0, #1
    1340:	0003      	movs	r3, r0
    1342:	400b      	ands	r3, r1
			return I2C_ERR_BAD_ADDRESS;
    1344:	4258      	negs	r0, r3
    1346:	4158      	adcs	r0, r3
    1348:	3805      	subs	r0, #5
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    134a:	886b      	ldrh	r3, [r5, #2]
    134c:	4a83      	ldr	r2, [pc, #524]	; (155c <_i2c_m_sync_transfer+0x344>)
    134e:	4013      	ands	r3, r2
    1350:	806b      	strh	r3, [r5, #2]
			return ret;
    1352:	e18d      	b.n	1670 <_i2c_m_sync_transfer+0x458>
	if (msg->len == 1 && sclsm) {
    1354:	013b      	lsls	r3, r7, #4
    1356:	d5a8      	bpl.n	12aa <_i2c_m_sync_transfer+0x92>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1358:	2204      	movs	r2, #4
    135a:	69f3      	ldr	r3, [r6, #28]
    135c:	421a      	tst	r2, r3
    135e:	d1fc      	bne.n	135a <_i2c_m_sync_transfer+0x142>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1360:	6872      	ldr	r2, [r6, #4]
    1362:	2380      	movs	r3, #128	; 0x80
    1364:	02db      	lsls	r3, r3, #11
    1366:	4313      	orrs	r3, r2
    1368:	6073      	str	r3, [r6, #4]
    136a:	e7a6      	b.n	12ba <_i2c_m_sync_transfer+0xa2>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    136c:	8869      	ldrh	r1, [r5, #2]
    136e:	005b      	lsls	r3, r3, #1
    1370:	20ff      	movs	r0, #255	; 0xff
    1372:	4003      	ands	r3, r0
    1374:	38fe      	subs	r0, #254	; 0xfe
    1376:	4008      	ands	r0, r1
    1378:	4318      	orrs	r0, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    137a:	2204      	movs	r2, #4
    137c:	69f3      	ldr	r3, [r6, #28]
    137e:	421a      	tst	r2, r3
    1380:	d1fc      	bne.n	137c <_i2c_m_sync_transfer+0x164>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1382:	6a71      	ldr	r1, [r6, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1384:	2380      	movs	r3, #128	; 0x80
    1386:	01db      	lsls	r3, r3, #7
    1388:	4019      	ands	r1, r3
		hri_sercomi2cm_write_ADDR_reg(hw,
    138a:	4301      	orrs	r1, r0
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    138c:	2204      	movs	r2, #4
    138e:	69f3      	ldr	r3, [r6, #28]
    1390:	421a      	tst	r2, r3
    1392:	d1fc      	bne.n	138e <_i2c_m_sync_transfer+0x176>
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1394:	6271      	str	r1, [r6, #36]	; 0x24
    1396:	e7af      	b.n	12f8 <_i2c_m_sync_transfer+0xe0>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    1398:	074b      	lsls	r3, r1, #29
    139a:	d41b      	bmi.n	13d4 <_i2c_m_sync_transfer+0x1bc>
			if (msg->flags & I2C_M_TEN) {
    139c:	886b      	ldrh	r3, [r5, #2]
    139e:	055b      	lsls	r3, r3, #21
    13a0:	d534      	bpl.n	140c <_i2c_m_sync_transfer+0x1f4>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    13a2:	882b      	ldrh	r3, [r5, #0]
    13a4:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    13a6:	2206      	movs	r2, #6
    13a8:	401a      	ands	r2, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    13aa:	2104      	movs	r1, #4
    13ac:	69f3      	ldr	r3, [r6, #28]
    13ae:	4219      	tst	r1, r3
    13b0:	d1fc      	bne.n	13ac <_i2c_m_sync_transfer+0x194>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    13b2:	6a73      	ldr	r3, [r6, #36]	; 0x24
    13b4:	2180      	movs	r1, #128	; 0x80
    13b6:	01c9      	lsls	r1, r1, #7
    13b8:	400b      	ands	r3, r1
				hri_sercomi2cm_write_ADDR_reg(hw,
    13ba:	21f1      	movs	r1, #241	; 0xf1
    13bc:	430b      	orrs	r3, r1
    13be:	4313      	orrs	r3, r2
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    13c0:	39ed      	subs	r1, #237	; 0xed
    13c2:	69f2      	ldr	r2, [r6, #28]
    13c4:	4211      	tst	r1, r2
    13c6:	d1fc      	bne.n	13c2 <_i2c_m_sync_transfer+0x1aa>
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    13c8:	6273      	str	r3, [r6, #36]	; 0x24
				msg->flags &= ~I2C_M_TEN;
    13ca:	886b      	ldrh	r3, [r5, #2]
    13cc:	4a64      	ldr	r2, [pc, #400]	; (1560 <_i2c_m_sync_transfer+0x348>)
    13ce:	4013      	ands	r3, r2
    13d0:	806b      	strh	r3, [r5, #2]
    13d2:	e755      	b.n	1280 <_i2c_m_sync_transfer+0x68>
				if (msg->len > 0) {
    13d4:	686b      	ldr	r3, [r5, #4]
    13d6:	2b00      	cmp	r3, #0
    13d8:	dd04      	ble.n	13e4 <_i2c_m_sync_transfer+0x1cc>
					msg->flags |= I2C_M_FAIL;
    13da:	886b      	ldrh	r3, [r5, #2]
    13dc:	2280      	movs	r2, #128	; 0x80
    13de:	0152      	lsls	r2, r2, #5
    13e0:	4313      	orrs	r3, r2
    13e2:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    13e4:	886b      	ldrh	r3, [r5, #2]
    13e6:	b21b      	sxth	r3, r3
    13e8:	2b00      	cmp	r3, #0
    13ea:	da08      	bge.n	13fe <_i2c_m_sync_transfer+0x1e6>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    13ec:	2304      	movs	r3, #4
    13ee:	69f2      	ldr	r2, [r6, #28]
    13f0:	4213      	tst	r3, r2
    13f2:	d1fc      	bne.n	13ee <_i2c_m_sync_transfer+0x1d6>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    13f4:	6872      	ldr	r2, [r6, #4]
    13f6:	23c0      	movs	r3, #192	; 0xc0
    13f8:	029b      	lsls	r3, r3, #10
    13fa:	4313      	orrs	r3, r2
    13fc:	6073      	str	r3, [r6, #4]
				msg->flags &= ~I2C_M_BUSY;
    13fe:	886b      	ldrh	r3, [r5, #2]
    1400:	4a56      	ldr	r2, [pc, #344]	; (155c <_i2c_m_sync_transfer+0x344>)
    1402:	4013      	ands	r3, r2
    1404:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    1406:	2002      	movs	r0, #2
    1408:	4240      	negs	r0, r0
    140a:	e79e      	b.n	134a <_i2c_m_sync_transfer+0x132>
			if (msg->len == 0) {
    140c:	686b      	ldr	r3, [r5, #4]
    140e:	2b00      	cmp	r3, #0
    1410:	d112      	bne.n	1438 <_i2c_m_sync_transfer+0x220>
				if (msg->flags & I2C_M_STOP) {
    1412:	886b      	ldrh	r3, [r5, #2]
    1414:	b21b      	sxth	r3, r3
    1416:	2b00      	cmp	r3, #0
    1418:	db04      	blt.n	1424 <_i2c_m_sync_transfer+0x20c>
				msg->flags &= ~I2C_M_BUSY;
    141a:	886b      	ldrh	r3, [r5, #2]
    141c:	4a4f      	ldr	r2, [pc, #316]	; (155c <_i2c_m_sync_transfer+0x344>)
    141e:	4013      	ands	r3, r2
    1420:	806b      	strh	r3, [r5, #2]
    1422:	e72d      	b.n	1280 <_i2c_m_sync_transfer+0x68>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1424:	2304      	movs	r3, #4
    1426:	69f2      	ldr	r2, [r6, #28]
    1428:	4213      	tst	r3, r2
    142a:	d1fc      	bne.n	1426 <_i2c_m_sync_transfer+0x20e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    142c:	6872      	ldr	r2, [r6, #4]
    142e:	23c0      	movs	r3, #192	; 0xc0
    1430:	029b      	lsls	r3, r3, #10
    1432:	4313      	orrs	r3, r2
    1434:	6073      	str	r3, [r6, #4]
    1436:	e7f0      	b.n	141a <_i2c_m_sync_transfer+0x202>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    1438:	68ab      	ldr	r3, [r5, #8]
    143a:	781a      	ldrb	r2, [r3, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    143c:	2304      	movs	r3, #4
    143e:	69f1      	ldr	r1, [r6, #28]
    1440:	420b      	tst	r3, r1
    1442:	d1fc      	bne.n	143e <_i2c_m_sync_transfer+0x226>
	((Sercom *)hw)->I2CM.DATA.reg = data;
    1444:	2328      	movs	r3, #40	; 0x28
    1446:	54f2      	strb	r2, [r6, r3]
				msg->buffer++;
    1448:	68ab      	ldr	r3, [r5, #8]
    144a:	3301      	adds	r3, #1
    144c:	60ab      	str	r3, [r5, #8]
				msg->len--;
    144e:	686b      	ldr	r3, [r5, #4]
    1450:	3b01      	subs	r3, #1
    1452:	606b      	str	r3, [r5, #4]
    1454:	e714      	b.n	1280 <_i2c_m_sync_transfer+0x68>
	} else if (flags & SB_FLAG) {
    1456:	079b      	lsls	r3, r3, #30
    1458:	d400      	bmi.n	145c <_i2c_m_sync_transfer+0x244>
    145a:	e711      	b.n	1280 <_i2c_m_sync_transfer+0x68>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    145c:	686a      	ldr	r2, [r5, #4]
    145e:	2a00      	cmp	r2, #0
    1460:	d029      	beq.n	14b6 <_i2c_m_sync_transfer+0x29e>
    1462:	074b      	lsls	r3, r1, #29
    1464:	d427      	bmi.n	14b6 <_i2c_m_sync_transfer+0x29e>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    1466:	0103      	lsls	r3, r0, #4
    1468:	0fdb      	lsrs	r3, r3, #31
			msg->len--;
    146a:	3a01      	subs	r2, #1
    146c:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    146e:	2a00      	cmp	r2, #0
    1470:	d000      	beq.n	1474 <_i2c_m_sync_transfer+0x25c>
    1472:	e107      	b.n	1684 <_i2c_m_sync_transfer+0x46c>
    1474:	2b00      	cmp	r3, #0
    1476:	d100      	bne.n	147a <_i2c_m_sync_transfer+0x262>
    1478:	e10a      	b.n	1690 <_i2c_m_sync_transfer+0x478>
				if (msg->flags & I2C_M_STOP) {
    147a:	886b      	ldrh	r3, [r5, #2]
    147c:	b21b      	sxth	r3, r3
    147e:	2b00      	cmp	r3, #0
    1480:	da08      	bge.n	1494 <_i2c_m_sync_transfer+0x27c>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1482:	2304      	movs	r3, #4
    1484:	69f2      	ldr	r2, [r6, #28]
    1486:	4213      	tst	r3, r2
    1488:	d1fc      	bne.n	1484 <_i2c_m_sync_transfer+0x26c>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    148a:	6872      	ldr	r2, [r6, #4]
    148c:	23c0      	movs	r3, #192	; 0xc0
    148e:	029b      	lsls	r3, r3, #10
    1490:	4313      	orrs	r3, r2
    1492:	6073      	str	r3, [r6, #4]
				msg->flags &= ~I2C_M_BUSY;
    1494:	886b      	ldrh	r3, [r5, #2]
    1496:	4a31      	ldr	r2, [pc, #196]	; (155c <_i2c_m_sync_transfer+0x344>)
    1498:	4013      	ands	r3, r2
    149a:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    149c:	68a9      	ldr	r1, [r5, #8]
    149e:	1c4b      	adds	r3, r1, #1
    14a0:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    14a2:	2204      	movs	r2, #4
    14a4:	69f3      	ldr	r3, [r6, #28]
    14a6:	421a      	tst	r2, r3
    14a8:	d1fc      	bne.n	14a4 <_i2c_m_sync_transfer+0x28c>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    14aa:	2328      	movs	r3, #40	; 0x28
    14ac:	5cf3      	ldrb	r3, [r6, r3]
    14ae:	700b      	strb	r3, [r1, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    14b0:	2302      	movs	r3, #2
    14b2:	7633      	strb	r3, [r6, #24]
    14b4:	e6e4      	b.n	1280 <_i2c_m_sync_transfer+0x68>
    14b6:	2302      	movs	r3, #2
    14b8:	7633      	strb	r3, [r6, #24]
			return I2C_NACK;
    14ba:	2002      	movs	r0, #2
    14bc:	4240      	negs	r0, r0
    14be:	e744      	b.n	134a <_i2c_m_sync_transfer+0x132>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    14c0:	2204      	movs	r2, #4
    14c2:	69e3      	ldr	r3, [r4, #28]
    14c4:	421a      	tst	r2, r3
    14c6:	d1fc      	bne.n	14c2 <_i2c_m_sync_transfer+0x2aa>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    14c8:	6862      	ldr	r2, [r4, #4]
    14ca:	23c0      	movs	r3, #192	; 0xc0
    14cc:	029b      	lsls	r3, r3, #10
    14ce:	4313      	orrs	r3, r2
    14d0:	6063      	str	r3, [r4, #4]
    14d2:	e0b6      	b.n	1642 <_i2c_m_sync_transfer+0x42a>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    14d4:	4232      	tst	r2, r6
    14d6:	d11b      	bne.n	1510 <_i2c_m_sync_transfer+0x2f8>
			if (msg->flags & I2C_M_TEN) {
    14d8:	886b      	ldrh	r3, [r5, #2]
    14da:	055b      	lsls	r3, r3, #21
    14dc:	d54b      	bpl.n	1576 <_i2c_m_sync_transfer+0x35e>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    14de:	8828      	ldrh	r0, [r5, #0]
    14e0:	09c0      	lsrs	r0, r0, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    14e2:	2606      	movs	r6, #6
    14e4:	4006      	ands	r6, r0
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    14e6:	69e3      	ldr	r3, [r4, #28]
    14e8:	421a      	tst	r2, r3
    14ea:	d1fc      	bne.n	14e6 <_i2c_m_sync_transfer+0x2ce>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    14ec:	6a60      	ldr	r0, [r4, #36]	; 0x24
    14ee:	2380      	movs	r3, #128	; 0x80
    14f0:	01db      	lsls	r3, r3, #7
    14f2:	4018      	ands	r0, r3
				hri_sercomi2cm_write_ADDR_reg(hw,
    14f4:	23f1      	movs	r3, #241	; 0xf1
    14f6:	4318      	orrs	r0, r3
    14f8:	4330      	orrs	r0, r6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    14fa:	69e3      	ldr	r3, [r4, #28]
    14fc:	421a      	tst	r2, r3
    14fe:	d1fc      	bne.n	14fa <_i2c_m_sync_transfer+0x2e2>
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1500:	6260      	str	r0, [r4, #36]	; 0x24
				msg->flags &= ~I2C_M_TEN;
    1502:	886b      	ldrh	r3, [r5, #2]
    1504:	4816      	ldr	r0, [pc, #88]	; (1560 <_i2c_m_sync_transfer+0x348>)
    1506:	4003      	ands	r3, r0
    1508:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    150a:	2300      	movs	r3, #0
    150c:	9301      	str	r3, [sp, #4]
    150e:	e083      	b.n	1618 <_i2c_m_sync_transfer+0x400>
				if (msg->len > 0) {
    1510:	686b      	ldr	r3, [r5, #4]
    1512:	2b00      	cmp	r3, #0
    1514:	dd04      	ble.n	1520 <_i2c_m_sync_transfer+0x308>
					msg->flags |= I2C_M_FAIL;
    1516:	886b      	ldrh	r3, [r5, #2]
    1518:	2080      	movs	r0, #128	; 0x80
    151a:	0140      	lsls	r0, r0, #5
    151c:	4303      	orrs	r3, r0
    151e:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    1520:	886b      	ldrh	r3, [r5, #2]
    1522:	b21b      	sxth	r3, r3
    1524:	2b00      	cmp	r3, #0
    1526:	db1d      	blt.n	1564 <_i2c_m_sync_transfer+0x34c>
				msg->flags &= ~I2C_M_BUSY;
    1528:	886b      	ldrh	r3, [r5, #2]
    152a:	480c      	ldr	r0, [pc, #48]	; (155c <_i2c_m_sync_transfer+0x344>)
    152c:	4003      	ands	r3, r0
    152e:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    1530:	2302      	movs	r3, #2
    1532:	425b      	negs	r3, r3
    1534:	9301      	str	r3, [sp, #4]
    1536:	e06f      	b.n	1618 <_i2c_m_sync_transfer+0x400>
    1538:	000050dc 	.word	0x000050dc
    153c:	000005c9 	.word	0x000005c9
    1540:	00000c85 	.word	0x00000c85
    1544:	000005ca 	.word	0x000005ca
    1548:	000005cb 	.word	0x000005cb
    154c:	0000059e 	.word	0x0000059e
    1550:	fffbffff 	.word	0xfffbffff
    1554:	000007fe 	.word	0x000007fe
    1558:	0000ffff 	.word	0x0000ffff
    155c:	fffffeff 	.word	0xfffffeff
    1560:	fffffbff 	.word	0xfffffbff
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1564:	69e3      	ldr	r3, [r4, #28]
    1566:	421a      	tst	r2, r3
    1568:	d1fc      	bne.n	1564 <_i2c_m_sync_transfer+0x34c>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    156a:	6860      	ldr	r0, [r4, #4]
    156c:	23c0      	movs	r3, #192	; 0xc0
    156e:	029b      	lsls	r3, r3, #10
    1570:	4303      	orrs	r3, r0
    1572:	6063      	str	r3, [r4, #4]
    1574:	e7d8      	b.n	1528 <_i2c_m_sync_transfer+0x310>
			if (msg->len == 0) {
    1576:	686b      	ldr	r3, [r5, #4]
    1578:	2b00      	cmp	r3, #0
    157a:	d113      	bne.n	15a4 <_i2c_m_sync_transfer+0x38c>
				if (msg->flags & I2C_M_STOP) {
    157c:	886b      	ldrh	r3, [r5, #2]
    157e:	b21b      	sxth	r3, r3
    1580:	2b00      	cmp	r3, #0
    1582:	db06      	blt.n	1592 <_i2c_m_sync_transfer+0x37a>
				msg->flags &= ~I2C_M_BUSY;
    1584:	886b      	ldrh	r3, [r5, #2]
    1586:	4862      	ldr	r0, [pc, #392]	; (1710 <_i2c_m_sync_transfer+0x4f8>)
    1588:	4003      	ands	r3, r0
    158a:	806b      	strh	r3, [r5, #2]
			return I2C_OK;
    158c:	2300      	movs	r3, #0
    158e:	9301      	str	r3, [sp, #4]
    1590:	e042      	b.n	1618 <_i2c_m_sync_transfer+0x400>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1592:	69e3      	ldr	r3, [r4, #28]
    1594:	421a      	tst	r2, r3
    1596:	d1fc      	bne.n	1592 <_i2c_m_sync_transfer+0x37a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1598:	6860      	ldr	r0, [r4, #4]
    159a:	23c0      	movs	r3, #192	; 0xc0
    159c:	029b      	lsls	r3, r3, #10
    159e:	4303      	orrs	r3, r0
    15a0:	6063      	str	r3, [r4, #4]
    15a2:	e7ef      	b.n	1584 <_i2c_m_sync_transfer+0x36c>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    15a4:	68ab      	ldr	r3, [r5, #8]
    15a6:	7818      	ldrb	r0, [r3, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    15a8:	69e3      	ldr	r3, [r4, #28]
    15aa:	421a      	tst	r2, r3
    15ac:	d1fc      	bne.n	15a8 <_i2c_m_sync_transfer+0x390>
	((Sercom *)hw)->I2CM.DATA.reg = data;
    15ae:	2328      	movs	r3, #40	; 0x28
    15b0:	54e0      	strb	r0, [r4, r3]
				msg->buffer++;
    15b2:	68ab      	ldr	r3, [r5, #8]
    15b4:	3301      	adds	r3, #1
    15b6:	60ab      	str	r3, [r5, #8]
				msg->len--;
    15b8:	686b      	ldr	r3, [r5, #4]
    15ba:	3b01      	subs	r3, #1
    15bc:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    15be:	2300      	movs	r3, #0
    15c0:	9301      	str	r3, [sp, #4]
    15c2:	e029      	b.n	1618 <_i2c_m_sync_transfer+0x400>
	return I2C_OK;
    15c4:	2000      	movs	r0, #0
    15c6:	9001      	str	r0, [sp, #4]
	} else if (flags & SB_FLAG) {
    15c8:	4650      	mov	r0, sl
    15ca:	4218      	tst	r0, r3
    15cc:	d024      	beq.n	1618 <_i2c_m_sync_transfer+0x400>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    15ce:	686b      	ldr	r3, [r5, #4]
    15d0:	2b00      	cmp	r3, #0
    15d2:	d046      	beq.n	1662 <_i2c_m_sync_transfer+0x44a>
    15d4:	4232      	tst	r2, r6
    15d6:	d144      	bne.n	1662 <_i2c_m_sync_transfer+0x44a>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    15d8:	4660      	mov	r0, ip
    15da:	0ec0      	lsrs	r0, r0, #27
    15dc:	4038      	ands	r0, r7
			msg->len--;
    15de:	3b01      	subs	r3, #1
    15e0:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    15e2:	2b00      	cmp	r3, #0
    15e4:	d000      	beq.n	15e8 <_i2c_m_sync_transfer+0x3d0>
    15e6:	e07f      	b.n	16e8 <_i2c_m_sync_transfer+0x4d0>
    15e8:	2800      	cmp	r0, #0
    15ea:	d100      	bne.n	15ee <_i2c_m_sync_transfer+0x3d6>
    15ec:	e082      	b.n	16f4 <_i2c_m_sync_transfer+0x4dc>
				if (msg->flags & I2C_M_STOP) {
    15ee:	886b      	ldrh	r3, [r5, #2]
    15f0:	b21b      	sxth	r3, r3
    15f2:	2b00      	cmp	r3, #0
    15f4:	db2c      	blt.n	1650 <_i2c_m_sync_transfer+0x438>
				msg->flags &= ~I2C_M_BUSY;
    15f6:	886b      	ldrh	r3, [r5, #2]
    15f8:	4845      	ldr	r0, [pc, #276]	; (1710 <_i2c_m_sync_transfer+0x4f8>)
    15fa:	4003      	ands	r3, r0
    15fc:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    15fe:	68a8      	ldr	r0, [r5, #8]
    1600:	1c43      	adds	r3, r0, #1
    1602:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1604:	69e3      	ldr	r3, [r4, #28]
    1606:	421a      	tst	r2, r3
    1608:	d1fc      	bne.n	1604 <_i2c_m_sync_transfer+0x3ec>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    160a:	2328      	movs	r3, #40	; 0x28
    160c:	5ce3      	ldrb	r3, [r4, r3]
    160e:	7003      	strb	r3, [r0, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1610:	4653      	mov	r3, sl
    1612:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    1614:	2300      	movs	r3, #0
    1616:	9301      	str	r3, [sp, #4]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1618:	886b      	ldrh	r3, [r5, #2]
    161a:	465e      	mov	r6, fp
    161c:	4233      	tst	r3, r6
    161e:	d026      	beq.n	166e <_i2c_m_sync_transfer+0x456>
	void *   hw      = i2c_dev->hw;
    1620:	692e      	ldr	r6, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    1622:	7e33      	ldrb	r3, [r6, #24]
    1624:	b2db      	uxtb	r3, r3
    1626:	483b      	ldr	r0, [pc, #236]	; (1714 <_i2c_m_sync_transfer+0x4fc>)
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    1628:	4219      	tst	r1, r3
    162a:	d13f      	bne.n	16ac <_i2c_m_sync_transfer+0x494>
    162c:	7e33      	ldrb	r3, [r6, #24]
    162e:	b2db      	uxtb	r3, r3
    1630:	3801      	subs	r0, #1
		if (timeout-- == 0) {
    1632:	2800      	cmp	r0, #0
    1634:	d1f8      	bne.n	1628 <_i2c_m_sync_transfer+0x410>
			if (msg->flags & I2C_M_STOP) {
    1636:	464b      	mov	r3, r9
    1638:	885b      	ldrh	r3, [r3, #2]
    163a:	b21b      	sxth	r3, r3
    163c:	2b00      	cmp	r3, #0
    163e:	da00      	bge.n	1642 <_i2c_m_sync_transfer+0x42a>
    1640:	e73e      	b.n	14c0 <_i2c_m_sync_transfer+0x2a8>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1642:	886b      	ldrh	r3, [r5, #2]
    1644:	4a32      	ldr	r2, [pc, #200]	; (1710 <_i2c_m_sync_transfer+0x4f8>)
    1646:	4013      	ands	r3, r2
    1648:	806b      	strh	r3, [r5, #2]
			return I2C_ERR_BUS;
    164a:	2005      	movs	r0, #5
    164c:	4240      	negs	r0, r0
			return ret;
    164e:	e00f      	b.n	1670 <_i2c_m_sync_transfer+0x458>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1650:	69e3      	ldr	r3, [r4, #28]
    1652:	421a      	tst	r2, r3
    1654:	d1fc      	bne.n	1650 <_i2c_m_sync_transfer+0x438>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1656:	6860      	ldr	r0, [r4, #4]
    1658:	23c0      	movs	r3, #192	; 0xc0
    165a:	029b      	lsls	r3, r3, #10
    165c:	4303      	orrs	r3, r0
    165e:	6063      	str	r3, [r4, #4]
    1660:	e7c9      	b.n	15f6 <_i2c_m_sync_transfer+0x3de>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1662:	4653      	mov	r3, sl
    1664:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    1666:	2302      	movs	r3, #2
    1668:	425b      	negs	r3, r3
    166a:	9301      	str	r3, [sp, #4]
    166c:	e7d4      	b.n	1618 <_i2c_m_sync_transfer+0x400>
    166e:	9801      	ldr	r0, [sp, #4]
}
    1670:	b003      	add	sp, #12
    1672:	bc3c      	pop	{r2, r3, r4, r5}
    1674:	4690      	mov	r8, r2
    1676:	4699      	mov	r9, r3
    1678:	46a2      	mov	sl, r4
    167a:	46ab      	mov	fp, r5
    167c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return I2C_ERR_BUSY;
    167e:	2006      	movs	r0, #6
    1680:	4240      	negs	r0, r0
    1682:	e7f5      	b.n	1670 <_i2c_m_sync_transfer+0x458>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1684:	2a01      	cmp	r2, #1
    1686:	d000      	beq.n	168a <_i2c_m_sync_transfer+0x472>
    1688:	e708      	b.n	149c <_i2c_m_sync_transfer+0x284>
    168a:	2b00      	cmp	r3, #0
    168c:	d100      	bne.n	1690 <_i2c_m_sync_transfer+0x478>
    168e:	e705      	b.n	149c <_i2c_m_sync_transfer+0x284>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1690:	2304      	movs	r3, #4
    1692:	69f2      	ldr	r2, [r6, #28]
    1694:	4213      	tst	r3, r2
    1696:	d1fc      	bne.n	1692 <_i2c_m_sync_transfer+0x47a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1698:	6872      	ldr	r2, [r6, #4]
    169a:	2380      	movs	r3, #128	; 0x80
    169c:	02db      	lsls	r3, r3, #11
    169e:	4313      	orrs	r3, r2
    16a0:	6073      	str	r3, [r6, #4]
			if (msg->len == 0) {
    16a2:	686b      	ldr	r3, [r5, #4]
    16a4:	2b00      	cmp	r3, #0
    16a6:	d100      	bne.n	16aa <_i2c_m_sync_transfer+0x492>
    16a8:	e6e7      	b.n	147a <_i2c_m_sync_transfer+0x262>
    16aa:	e6f7      	b.n	149c <_i2c_m_sync_transfer+0x284>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    16ac:	6820      	ldr	r0, [r4, #0]
    16ae:	4684      	mov	ip, r0
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    16b0:	69e0      	ldr	r0, [r4, #28]
    16b2:	4202      	tst	r2, r0
    16b4:	d1fc      	bne.n	16b0 <_i2c_m_sync_transfer+0x498>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    16b6:	8b66      	ldrh	r6, [r4, #26]
    16b8:	b2b6      	uxth	r6, r6
	if (flags & MB_FLAG) {
    16ba:	421f      	tst	r7, r3
    16bc:	d100      	bne.n	16c0 <_i2c_m_sync_transfer+0x4a8>
    16be:	e781      	b.n	15c4 <_i2c_m_sync_transfer+0x3ac>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    16c0:	4653      	mov	r3, sl
    16c2:	4233      	tst	r3, r6
    16c4:	d100      	bne.n	16c8 <_i2c_m_sync_transfer+0x4b0>
    16c6:	e705      	b.n	14d4 <_i2c_m_sync_transfer+0x2bc>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    16c8:	7627      	strb	r7, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    16ca:	886b      	ldrh	r3, [r5, #2]
    16cc:	2080      	movs	r0, #128	; 0x80
    16ce:	0140      	lsls	r0, r0, #5
    16d0:	4303      	orrs	r3, r0
    16d2:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    16d4:	886b      	ldrh	r3, [r5, #2]
    16d6:	480e      	ldr	r0, [pc, #56]	; (1710 <_i2c_m_sync_transfer+0x4f8>)
    16d8:	4003      	ands	r3, r0
    16da:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    16dc:	403e      	ands	r6, r7
			return I2C_ERR_BAD_ADDRESS;
    16de:	4270      	negs	r0, r6
    16e0:	4170      	adcs	r0, r6
    16e2:	1f43      	subs	r3, r0, #5
    16e4:	9301      	str	r3, [sp, #4]
    16e6:	e797      	b.n	1618 <_i2c_m_sync_transfer+0x400>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    16e8:	2b01      	cmp	r3, #1
    16ea:	d000      	beq.n	16ee <_i2c_m_sync_transfer+0x4d6>
    16ec:	e787      	b.n	15fe <_i2c_m_sync_transfer+0x3e6>
    16ee:	2800      	cmp	r0, #0
    16f0:	d100      	bne.n	16f4 <_i2c_m_sync_transfer+0x4dc>
    16f2:	e784      	b.n	15fe <_i2c_m_sync_transfer+0x3e6>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    16f4:	69e3      	ldr	r3, [r4, #28]
    16f6:	421a      	tst	r2, r3
    16f8:	d1fc      	bne.n	16f4 <_i2c_m_sync_transfer+0x4dc>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    16fa:	6863      	ldr	r3, [r4, #4]
    16fc:	2080      	movs	r0, #128	; 0x80
    16fe:	02c0      	lsls	r0, r0, #11
    1700:	4303      	orrs	r3, r0
    1702:	6063      	str	r3, [r4, #4]
			if (msg->len == 0) {
    1704:	686b      	ldr	r3, [r5, #4]
    1706:	2b00      	cmp	r3, #0
    1708:	d100      	bne.n	170c <_i2c_m_sync_transfer+0x4f4>
    170a:	e770      	b.n	15ee <_i2c_m_sync_transfer+0x3d6>
    170c:	e777      	b.n	15fe <_i2c_m_sync_transfer+0x3e6>
    170e:	46c0      	nop			; (mov r8, r8)
    1710:	fffffeff 	.word	0xfffffeff
    1714:	0000ffff 	.word	0x0000ffff

00001718 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    1718:	4b02      	ldr	r3, [pc, #8]	; (1724 <_delay_init+0xc>)
    171a:	4a03      	ldr	r2, [pc, #12]	; (1728 <_delay_init+0x10>)
    171c:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    171e:	2205      	movs	r2, #5
    1720:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
    1722:	4770      	bx	lr
    1724:	e000e010 	.word	0xe000e010
    1728:	00ffffff 	.word	0x00ffffff

0000172c <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    172c:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
    172e:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    1730:	1e5e      	subs	r6, r3, #1
    1732:	b2f6      	uxtb	r6, r6
    1734:	2b00      	cmp	r3, #0
    1736:	d013      	beq.n	1760 <_delay_cycles+0x34>
    1738:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
    173a:	4a0e      	ldr	r2, [pc, #56]	; (1774 <_delay_cycles+0x48>)
    173c:	4d0e      	ldr	r5, [pc, #56]	; (1778 <_delay_cycles+0x4c>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    173e:	2080      	movs	r0, #128	; 0x80
    1740:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
    1742:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    1744:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1746:	6813      	ldr	r3, [r2, #0]
    1748:	4203      	tst	r3, r0
    174a:	d0fc      	beq.n	1746 <_delay_cycles+0x1a>
	while (n--) {
    174c:	3c01      	subs	r4, #1
    174e:	b2e4      	uxtb	r4, r4
    1750:	2cff      	cmp	r4, #255	; 0xff
    1752:	d1f6      	bne.n	1742 <_delay_cycles+0x16>
    1754:	0633      	lsls	r3, r6, #24
    1756:	1af6      	subs	r6, r6, r3
    1758:	4b08      	ldr	r3, [pc, #32]	; (177c <_delay_cycles+0x50>)
    175a:	469c      	mov	ip, r3
    175c:	4461      	add	r1, ip
    175e:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    1760:	4b04      	ldr	r3, [pc, #16]	; (1774 <_delay_cycles+0x48>)
    1762:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1764:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1766:	0019      	movs	r1, r3
    1768:	2280      	movs	r2, #128	; 0x80
    176a:	0252      	lsls	r2, r2, #9
    176c:	680b      	ldr	r3, [r1, #0]
    176e:	4213      	tst	r3, r2
    1770:	d0fc      	beq.n	176c <_delay_cycles+0x40>
		;
}
    1772:	bd70      	pop	{r4, r5, r6, pc}
    1774:	e000e010 	.word	0xe000e010
    1778:	00ffffff 	.word	0x00ffffff
    177c:	ff000001 	.word	0xff000001

00001780 <_tcc_pwm_deinit>:
/**
 * \brief De-initialize TCC for PWM mode
 */
void _tcc_pwm_deinit(struct _pwm_device *const device)
{
	void *const hw = device->hw;
    1780:	6903      	ldr	r3, [r0, #16]
}

static inline uint8_t _get_hardware_offset(const void *const hw)
{
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)TCC0) >> 10;
    1782:	4a11      	ldr	r2, [pc, #68]	; (17c8 <_tcc_pwm_deinit+0x48>)
    1784:	189a      	adds	r2, r3, r2
    1786:	0a92      	lsrs	r2, r2, #10
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TCC0_IRQn + _get_hardware_offset(hw)));
    1788:	320e      	adds	r2, #14
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    178a:	b2d0      	uxtb	r0, r2
    178c:	0612      	lsls	r2, r2, #24
    178e:	d40a      	bmi.n	17a6 <_tcc_pwm_deinit+0x26>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1790:	211f      	movs	r1, #31
    1792:	4001      	ands	r1, r0
    1794:	2201      	movs	r2, #1
    1796:	408a      	lsls	r2, r1
    1798:	2180      	movs	r1, #128	; 0x80
    179a:	480c      	ldr	r0, [pc, #48]	; (17cc <_tcc_pwm_deinit+0x4c>)
    179c:	5042      	str	r2, [r0, r1]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    179e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    17a2:	f3bf 8f6f 	isb	sy
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    17a6:	2103      	movs	r1, #3
    17a8:	689a      	ldr	r2, [r3, #8]
    17aa:	4211      	tst	r1, r2
    17ac:	d1fc      	bne.n	17a8 <_tcc_pwm_deinit+0x28>

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TCC_CRITICAL_SECTION_ENTER();
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    17ae:	681a      	ldr	r2, [r3, #0]
    17b0:	2102      	movs	r1, #2
    17b2:	438a      	bics	r2, r1
    17b4:	601a      	str	r2, [r3, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    17b6:	3901      	subs	r1, #1
    17b8:	689a      	ldr	r2, [r3, #8]
    17ba:	4211      	tst	r1, r2
    17bc:	d1fc      	bne.n	17b8 <_tcc_pwm_deinit+0x38>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    17be:	681a      	ldr	r2, [r3, #0]
    17c0:	2101      	movs	r1, #1
    17c2:	430a      	orrs	r2, r1
    17c4:	601a      	str	r2, [r3, #0]
}
    17c6:	4770      	bx	lr
    17c8:	bdffec00 	.word	0xbdffec00
    17cc:	e000e100 	.word	0xe000e100

000017d0 <_tcc_start_pwm>:
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    17d0:	6902      	ldr	r2, [r0, #16]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    17d2:	2103      	movs	r1, #3
    17d4:	6893      	ldr	r3, [r2, #8]
    17d6:	4219      	tst	r1, r3
    17d8:	d1fc      	bne.n	17d4 <_tcc_start_pwm+0x4>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    17da:	6813      	ldr	r3, [r2, #0]
    17dc:	2102      	movs	r1, #2
    17de:	430b      	orrs	r3, r1
    17e0:	6013      	str	r3, [r2, #0]
}
    17e2:	4770      	bx	lr

000017e4 <_tcc_stop_pwm>:
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    17e4:	6902      	ldr	r2, [r0, #16]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    17e6:	2103      	movs	r1, #3
    17e8:	6893      	ldr	r3, [r2, #8]
    17ea:	4219      	tst	r1, r3
    17ec:	d1fc      	bne.n	17e8 <_tcc_stop_pwm+0x4>
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    17ee:	6813      	ldr	r3, [r2, #0]
    17f0:	2102      	movs	r1, #2
    17f2:	438b      	bics	r3, r1
    17f4:	6013      	str	r3, [r2, #0]
}
    17f6:	4770      	bx	lr

000017f8 <_tcc_pwm_get_period>:
	return (pwm_period_t)(hri_tcc_read_PERB_reg(device->hw));
    17f8:	6903      	ldr	r3, [r0, #16]
	return ((Tcc *)hw)->PERBUF.reg;
    17fa:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
}
    17fc:	4770      	bx	lr

000017fe <_tcc_is_pwm_enabled>:
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    17fe:	6902      	ldr	r2, [r0, #16]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1800:	2103      	movs	r1, #3
    1802:	6893      	ldr	r3, [r2, #8]
    1804:	4219      	tst	r1, r3
    1806:	d1fc      	bne.n	1802 <_tcc_is_pwm_enabled+0x4>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    1808:	6810      	ldr	r0, [r2, #0]
	return (bool)tmp;
    180a:	0780      	lsls	r0, r0, #30
    180c:	0fc0      	lsrs	r0, r0, #31
}
    180e:	4770      	bx	lr

00001810 <tcc_pwm_interrupt_handler>:
{
    1810:	b570      	push	{r4, r5, r6, lr}
    1812:	0005      	movs	r5, r0
	void *const hw = device->hw;
    1814:	6904      	ldr	r4, [r0, #16]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    1816:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    1818:	07db      	lsls	r3, r3, #31
    181a:	d505      	bpl.n	1828 <tcc_pwm_interrupt_handler+0x18>
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    181c:	2301      	movs	r3, #1
    181e:	62e3      	str	r3, [r4, #44]	; 0x2c
		if (NULL != device->callback.pwm_period_cb) {
    1820:	6803      	ldr	r3, [r0, #0]
    1822:	2b00      	cmp	r3, #0
    1824:	d000      	beq.n	1828 <tcc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    1826:	4798      	blx	r3
	return (((Tcc *)hw)->INTENSET.reg & TCC_INTENSET_ERR) >> TCC_INTENSET_ERR_Pos;
    1828:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if (hri_tcc_get_INTEN_ERR_bit(hw)) {
    182a:	071b      	lsls	r3, r3, #28
    182c:	d506      	bpl.n	183c <tcc_pwm_interrupt_handler+0x2c>
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_ERR;
    182e:	2308      	movs	r3, #8
    1830:	62e3      	str	r3, [r4, #44]	; 0x2c
		if (NULL != device->callback.pwm_error_cb) {
    1832:	686b      	ldr	r3, [r5, #4]
    1834:	2b00      	cmp	r3, #0
    1836:	d001      	beq.n	183c <tcc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    1838:	0028      	movs	r0, r5
    183a:	4798      	blx	r3
}
    183c:	bd70      	pop	{r4, r5, r6, pc}
	...

00001840 <get_tcc_pwm_index>:
{
    1840:	b510      	push	{r4, lr}
	return ((uint32_t)hw - (uint32_t)TCC0) >> 10;
    1842:	4b0b      	ldr	r3, [pc, #44]	; (1870 <get_tcc_pwm_index+0x30>)
    1844:	469c      	mov	ip, r3
    1846:	4460      	add	r0, ip
    1848:	0a80      	lsrs	r0, r0, #10
    184a:	b2c0      	uxtb	r0, r0
		if (_tcc_pwms[i].number == tcc_offset) {
    184c:	2800      	cmp	r0, #0
    184e:	d00d      	beq.n	186c <get_tcc_pwm_index+0x2c>
    1850:	2802      	cmp	r0, #2
    1852:	d008      	beq.n	1866 <get_tcc_pwm_index+0x26>
	ASSERT(false);
    1854:	22ea      	movs	r2, #234	; 0xea
    1856:	0052      	lsls	r2, r2, #1
    1858:	4906      	ldr	r1, [pc, #24]	; (1874 <get_tcc_pwm_index+0x34>)
    185a:	2000      	movs	r0, #0
    185c:	4b06      	ldr	r3, [pc, #24]	; (1878 <get_tcc_pwm_index+0x38>)
    185e:	4798      	blx	r3
	return -1;
    1860:	2001      	movs	r0, #1
    1862:	4240      	negs	r0, r0
}
    1864:	bd10      	pop	{r4, pc}
    1866:	3801      	subs	r0, #1
			return i;
    1868:	b240      	sxtb	r0, r0
    186a:	e7fb      	b.n	1864 <get_tcc_pwm_index+0x24>
	for (i = 0; i < ARRAY_SIZE(_tcc_pwms); i++) {
    186c:	2000      	movs	r0, #0
    186e:	e7fb      	b.n	1868 <get_tcc_pwm_index+0x28>
    1870:	bdffec00 	.word	0xbdffec00
    1874:	00005118 	.word	0x00005118
    1878:	00000c85 	.word	0x00000c85

0000187c <_tcc_set_pwm_param>:
{
    187c:	b570      	push	{r4, r5, r6, lr}
    187e:	000e      	movs	r6, r1
    1880:	0015      	movs	r5, r2
	void *const hw = device->hw;
    1882:	6904      	ldr	r4, [r0, #16]
	int8_t      i  = get_tcc_pwm_index(hw);
    1884:	0020      	movs	r0, r4
    1886:	4b05      	ldr	r3, [pc, #20]	; (189c <_tcc_set_pwm_param+0x20>)
    1888:	4798      	blx	r3
	((Tcc *)hw)->PERBUF.reg = data;
    188a:	66e6      	str	r6, [r4, #108]	; 0x6c
	hri_tcc_write_CCB_reg(hw, _tcc_pwms[i].sel_ch, duty_cycle);
    188c:	0103      	lsls	r3, r0, #4
    188e:	4804      	ldr	r0, [pc, #16]	; (18a0 <_tcc_set_pwm_param+0x24>)
    1890:	18c0      	adds	r0, r0, r3
	((Tcc *)hw)->CCBUF[index].reg = data;
    1892:	7843      	ldrb	r3, [r0, #1]
    1894:	331c      	adds	r3, #28
    1896:	009b      	lsls	r3, r3, #2
    1898:	511d      	str	r5, [r3, r4]
}
    189a:	bd70      	pop	{r4, r5, r6, pc}
    189c:	00001841 	.word	0x00001841
    18a0:	000050f8 	.word	0x000050f8

000018a4 <_tcc_pwm_get_duty>:
{
    18a4:	b510      	push	{r4, lr}
	void *const hw         = device->hw;
    18a6:	6904      	ldr	r4, [r0, #16]
	int8_t      i          = get_tcc_pwm_index(hw);
    18a8:	0020      	movs	r0, r4
    18aa:	4b08      	ldr	r3, [pc, #32]	; (18cc <_tcc_pwm_get_duty+0x28>)
    18ac:	4798      	blx	r3
	return ((Tcc *)hw)->PERBUF.reg;
    18ae:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
	uint32_t    duty_cycle = hri_tcc_read_CCB_reg(hw, _tcc_pwms[i].sel_ch);
    18b0:	0103      	lsls	r3, r0, #4
    18b2:	4807      	ldr	r0, [pc, #28]	; (18d0 <_tcc_pwm_get_duty+0x2c>)
    18b4:	18c0      	adds	r0, r0, r3
	return ((Tcc *)hw)->CCBUF[index].reg;
    18b6:	7843      	ldrb	r3, [r0, #1]
    18b8:	331c      	adds	r3, #28
    18ba:	009b      	lsls	r3, r3, #2
    18bc:	591b      	ldr	r3, [r3, r4]
	return ((duty_cycle * 1000) / per);
    18be:	20fa      	movs	r0, #250	; 0xfa
    18c0:	0080      	lsls	r0, r0, #2
    18c2:	4358      	muls	r0, r3
    18c4:	4b03      	ldr	r3, [pc, #12]	; (18d4 <_tcc_pwm_get_duty+0x30>)
    18c6:	4798      	blx	r3
}
    18c8:	bd10      	pop	{r4, pc}
    18ca:	46c0      	nop			; (mov r8, r8)
    18cc:	00001841 	.word	0x00001841
    18d0:	000050f8 	.word	0x000050f8
    18d4:	00001fbd 	.word	0x00001fbd

000018d8 <_tcc_pwm_init>:
{
    18d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    18da:	46c6      	mov	lr, r8
    18dc:	b500      	push	{lr}
    18de:	0007      	movs	r7, r0
    18e0:	000c      	movs	r4, r1
	return ((uint32_t)hw - (uint32_t)TCC0) >> 10;
    18e2:	4b66      	ldr	r3, [pc, #408]	; (1a7c <_tcc_pwm_init+0x1a4>)
    18e4:	18cd      	adds	r5, r1, r3
    18e6:	0aad      	lsrs	r5, r5, #10
    18e8:	b2ed      	uxtb	r5, r5
		if (_tccs[i].number == tcc_offset) {
    18ea:	4b65      	ldr	r3, [pc, #404]	; (1a80 <_tcc_pwm_init+0x1a8>)
    18ec:	781b      	ldrb	r3, [r3, #0]
    18ee:	42ab      	cmp	r3, r5
    18f0:	d100      	bne.n	18f4 <_tcc_pwm_init+0x1c>
    18f2:	e089      	b.n	1a08 <_tcc_pwm_init+0x130>
    18f4:	2324      	movs	r3, #36	; 0x24
    18f6:	4a62      	ldr	r2, [pc, #392]	; (1a80 <_tcc_pwm_init+0x1a8>)
    18f8:	5cd3      	ldrb	r3, [r2, r3]
    18fa:	42ab      	cmp	r3, r5
    18fc:	d100      	bne.n	1900 <_tcc_pwm_init+0x28>
    18fe:	e07f      	b.n	1a00 <_tcc_pwm_init+0x128>
	ASSERT(false);
    1900:	22c0      	movs	r2, #192	; 0xc0
    1902:	32ff      	adds	r2, #255	; 0xff
    1904:	495f      	ldr	r1, [pc, #380]	; (1a84 <_tcc_pwm_init+0x1ac>)
    1906:	2000      	movs	r0, #0
    1908:	4b5f      	ldr	r3, [pc, #380]	; (1a88 <_tcc_pwm_init+0x1b0>)
    190a:	4798      	blx	r3
	return -1;
    190c:	2301      	movs	r3, #1
    190e:	425b      	negs	r3, r3
    1910:	4698      	mov	r8, r3
	int8_t j = get_tcc_pwm_index(hw);
    1912:	0020      	movs	r0, r4
    1914:	4b5d      	ldr	r3, [pc, #372]	; (1a8c <_tcc_pwm_init+0x1b4>)
    1916:	4798      	blx	r3
    1918:	0006      	movs	r6, r0
	device->hw = hw;
    191a:	613c      	str	r4, [r7, #16]
	ASSERT(ARRAY_SIZE(_tcc_pwms));
    191c:	22fb      	movs	r2, #251	; 0xfb
    191e:	4959      	ldr	r1, [pc, #356]	; (1a84 <_tcc_pwm_init+0x1ac>)
    1920:	2001      	movs	r0, #1
    1922:	4b59      	ldr	r3, [pc, #356]	; (1a88 <_tcc_pwm_init+0x1b0>)
    1924:	4798      	blx	r3
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1926:	2201      	movs	r2, #1
    1928:	68a3      	ldr	r3, [r4, #8]
    192a:	421a      	tst	r2, r3
    192c:	d1fc      	bne.n	1928 <_tcc_pwm_init+0x50>
    192e:	2203      	movs	r2, #3
    1930:	68a3      	ldr	r3, [r4, #8]
    1932:	421a      	tst	r2, r3
    1934:	d1fc      	bne.n	1930 <_tcc_pwm_init+0x58>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    1936:	6823      	ldr	r3, [r4, #0]
	if (hri_tcc_get_CTRLA_ENABLE_bit(hw)) {
    1938:	079b      	lsls	r3, r3, #30
    193a:	d500      	bpl.n	193e <_tcc_pwm_init+0x66>
    193c:	e096      	b.n	1a6c <_tcc_pwm_init+0x194>
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    193e:	2201      	movs	r2, #1
    1940:	68a3      	ldr	r3, [r4, #8]
    1942:	421a      	tst	r2, r3
    1944:	d1fc      	bne.n	1940 <_tcc_pwm_init+0x68>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    1946:	6823      	ldr	r3, [r4, #0]
    1948:	2201      	movs	r2, #1
    194a:	4313      	orrs	r3, r2
    194c:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    194e:	68a3      	ldr	r3, [r4, #8]
    1950:	421a      	tst	r2, r3
    1952:	d1fc      	bne.n	194e <_tcc_pwm_init+0x76>
	hri_tcc_write_CTRLA_reg(hw, _tccs[i].ctrl_a);
    1954:	4641      	mov	r1, r8
    1956:	00cb      	lsls	r3, r1, #3
    1958:	4443      	add	r3, r8
    195a:	009b      	lsls	r3, r3, #2
    195c:	4a48      	ldr	r2, [pc, #288]	; (1a80 <_tcc_pwm_init+0x1a8>)
    195e:	18d3      	adds	r3, r2, r3
    1960:	6858      	ldr	r0, [r3, #4]
    1962:	2203      	movs	r2, #3
    1964:	68a3      	ldr	r3, [r4, #8]
    1966:	421a      	tst	r2, r3
    1968:	d1fc      	bne.n	1964 <_tcc_pwm_init+0x8c>

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	((Tcc *)hw)->CTRLA.reg = data;
    196a:	6020      	str	r0, [r4, #0]
	hri_tcc_set_CTRLB_reg(hw, _tccs[i].ctrl_b);
    196c:	00cb      	lsls	r3, r1, #3
    196e:	185b      	adds	r3, r3, r1
    1970:	009a      	lsls	r2, r3, #2
    1972:	4b43      	ldr	r3, [pc, #268]	; (1a80 <_tcc_pwm_init+0x1a8>)
    1974:	189b      	adds	r3, r3, r2
    1976:	7a1a      	ldrb	r2, [r3, #8]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    1978:	7162      	strb	r2, [r4, #5]
	hri_tcc_write_DBGCTRL_reg(hw, _tccs[i].dbg_ctrl);
    197a:	7a5a      	ldrb	r2, [r3, #9]
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    197c:	77a2      	strb	r2, [r4, #30]
	hri_tcc_write_EVCTRL_reg(hw, _tccs[i].event_ctrl);
    197e:	68db      	ldr	r3, [r3, #12]
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    1980:	6223      	str	r3, [r4, #32]
	hri_tcc_write_WAVE_reg(hw, _tcc_pwms[j].wave);
    1982:	0132      	lsls	r2, r6, #4
    1984:	4b42      	ldr	r3, [pc, #264]	; (1a90 <_tcc_pwm_init+0x1b8>)
    1986:	189b      	adds	r3, r3, r2
    1988:	68da      	ldr	r2, [r3, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    198a:	68a3      	ldr	r3, [r4, #8]
    198c:	051b      	lsls	r3, r3, #20
    198e:	d1fc      	bne.n	198a <_tcc_pwm_init+0xb2>

static inline void hri_tcc_write_WAVE_reg(const void *const hw, hri_tcc_wave_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_MASK);
	((Tcc *)hw)->WAVE.reg = data;
    1990:	63e2      	str	r2, [r4, #60]	; 0x3c
	hri_tcc_write_PER_reg(hw, _tcc_pwms[j].period);
    1992:	0132      	lsls	r2, r6, #4
    1994:	4b3e      	ldr	r3, [pc, #248]	; (1a90 <_tcc_pwm_init+0x1b8>)
    1996:	189b      	adds	r3, r3, r2
    1998:	685a      	ldr	r2, [r3, #4]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    199a:	68a3      	ldr	r3, [r4, #8]
    199c:	051b      	lsls	r3, r3, #20
    199e:	d1fc      	bne.n	199a <_tcc_pwm_init+0xc2>
	((Tcc *)hw)->PER.reg = data;
    19a0:	6422      	str	r2, [r4, #64]	; 0x40
	if (0 == _tcc_pwms[j].sel_ch) {
    19a2:	0132      	lsls	r2, r6, #4
    19a4:	4b3a      	ldr	r3, [pc, #232]	; (1a90 <_tcc_pwm_init+0x1b8>)
    19a6:	189b      	adds	r3, r3, r2
    19a8:	785b      	ldrb	r3, [r3, #1]
    19aa:	2b00      	cmp	r3, #0
    19ac:	d12e      	bne.n	1a0c <_tcc_pwm_init+0x134>
		_tccs[i].cc0 = _tcc_pwms[j].duty_cycle;
    19ae:	4b38      	ldr	r3, [pc, #224]	; (1a90 <_tcc_pwm_init+0x1b8>)
    19b0:	189e      	adds	r6, r3, r2
    19b2:	68b2      	ldr	r2, [r6, #8]
    19b4:	00cb      	lsls	r3, r1, #3
    19b6:	1859      	adds	r1, r3, r1
    19b8:	0089      	lsls	r1, r1, #2
    19ba:	4b31      	ldr	r3, [pc, #196]	; (1a80 <_tcc_pwm_init+0x1a8>)
    19bc:	1859      	adds	r1, r3, r1
    19be:	614a      	str	r2, [r1, #20]
	((Tcc *)hw)->CC[index].reg = data;
    19c0:	6462      	str	r2, [r4, #68]	; 0x44
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_LUPD;
    19c2:	2302      	movs	r3, #2
    19c4:	7123      	strb	r3, [r4, #4]
	if (hw == TCC0) {
    19c6:	4b33      	ldr	r3, [pc, #204]	; (1a94 <_tcc_pwm_init+0x1bc>)
    19c8:	429c      	cmp	r4, r3
    19ca:	d049      	beq.n	1a60 <_tcc_pwm_init+0x188>
	if (hw == TCC2) {
    19cc:	4b32      	ldr	r3, [pc, #200]	; (1a98 <_tcc_pwm_init+0x1c0>)
    19ce:	429c      	cmp	r4, r3
    19d0:	d049      	beq.n	1a66 <_tcc_pwm_init+0x18e>
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TCC0_IRQn + _get_hardware_offset(hw)));
    19d2:	350e      	adds	r5, #14
  if ((int32_t)(IRQn) >= 0)
    19d4:	b2eb      	uxtb	r3, r5
    19d6:	062a      	lsls	r2, r5, #24
    19d8:	d44e      	bmi.n	1a78 <_tcc_pwm_init+0x1a0>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    19da:	221f      	movs	r2, #31
    19dc:	401a      	ands	r2, r3
    19de:	2301      	movs	r3, #1
    19e0:	4093      	lsls	r3, r2
    19e2:	4a2e      	ldr	r2, [pc, #184]	; (1a9c <_tcc_pwm_init+0x1c4>)
    19e4:	2180      	movs	r1, #128	; 0x80
    19e6:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    19e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    19ec:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    19f0:	3101      	adds	r1, #1
    19f2:	31ff      	adds	r1, #255	; 0xff
    19f4:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    19f6:	6013      	str	r3, [r2, #0]
	return ERR_NONE;
    19f8:	2000      	movs	r0, #0
}
    19fa:	bc04      	pop	{r2}
    19fc:	4690      	mov	r8, r2
    19fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (_tccs[i].number == tcc_offset) {
    1a00:	2301      	movs	r3, #1
			return i;
    1a02:	b25b      	sxtb	r3, r3
    1a04:	4698      	mov	r8, r3
    1a06:	e784      	b.n	1912 <_tcc_pwm_init+0x3a>
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    1a08:	2300      	movs	r3, #0
    1a0a:	e7fa      	b.n	1a02 <_tcc_pwm_init+0x12a>
	} else if (1 == _tcc_pwms[j].sel_ch) {
    1a0c:	2b01      	cmp	r3, #1
    1a0e:	d00f      	beq.n	1a30 <_tcc_pwm_init+0x158>
	} else if (2 == _tcc_pwms[j].sel_ch) {
    1a10:	2b02      	cmp	r3, #2
    1a12:	d019      	beq.n	1a48 <_tcc_pwm_init+0x170>
	} else if (3 == _tcc_pwms[j].sel_ch) {
    1a14:	2b03      	cmp	r3, #3
    1a16:	d12c      	bne.n	1a72 <_tcc_pwm_init+0x19a>
		_tccs[i].cc3 = _tcc_pwms[j].duty_cycle;
    1a18:	0136      	lsls	r6, r6, #4
    1a1a:	4b1d      	ldr	r3, [pc, #116]	; (1a90 <_tcc_pwm_init+0x1b8>)
    1a1c:	199e      	adds	r6, r3, r6
    1a1e:	68b2      	ldr	r2, [r6, #8]
    1a20:	00cb      	lsls	r3, r1, #3
    1a22:	1859      	adds	r1, r3, r1
    1a24:	0089      	lsls	r1, r1, #2
    1a26:	4b16      	ldr	r3, [pc, #88]	; (1a80 <_tcc_pwm_init+0x1a8>)
    1a28:	1859      	adds	r1, r3, r1
    1a2a:	620a      	str	r2, [r1, #32]
	((Tcc *)hw)->CC[index].reg = data;
    1a2c:	6522      	str	r2, [r4, #80]	; 0x50
    1a2e:	e7c8      	b.n	19c2 <_tcc_pwm_init+0xea>
		_tccs[i].cc1 = _tcc_pwms[j].duty_cycle;
    1a30:	0136      	lsls	r6, r6, #4
    1a32:	4b17      	ldr	r3, [pc, #92]	; (1a90 <_tcc_pwm_init+0x1b8>)
    1a34:	199e      	adds	r6, r3, r6
    1a36:	68b2      	ldr	r2, [r6, #8]
    1a38:	00cb      	lsls	r3, r1, #3
    1a3a:	1859      	adds	r1, r3, r1
    1a3c:	0089      	lsls	r1, r1, #2
    1a3e:	4b10      	ldr	r3, [pc, #64]	; (1a80 <_tcc_pwm_init+0x1a8>)
    1a40:	1859      	adds	r1, r3, r1
    1a42:	618a      	str	r2, [r1, #24]
    1a44:	64a2      	str	r2, [r4, #72]	; 0x48
    1a46:	e7bc      	b.n	19c2 <_tcc_pwm_init+0xea>
		_tccs[i].cc2 = _tcc_pwms[j].duty_cycle;
    1a48:	0136      	lsls	r6, r6, #4
    1a4a:	4b11      	ldr	r3, [pc, #68]	; (1a90 <_tcc_pwm_init+0x1b8>)
    1a4c:	199e      	adds	r6, r3, r6
    1a4e:	68b2      	ldr	r2, [r6, #8]
    1a50:	00cb      	lsls	r3, r1, #3
    1a52:	1859      	adds	r1, r3, r1
    1a54:	0089      	lsls	r1, r1, #2
    1a56:	4b0a      	ldr	r3, [pc, #40]	; (1a80 <_tcc_pwm_init+0x1a8>)
    1a58:	1859      	adds	r1, r3, r1
    1a5a:	61ca      	str	r2, [r1, #28]
    1a5c:	64e2      	str	r2, [r4, #76]	; 0x4c
    1a5e:	e7b0      	b.n	19c2 <_tcc_pwm_init+0xea>
		_tcc0_dev = (struct _pwm_device *)dev;
    1a60:	4b0f      	ldr	r3, [pc, #60]	; (1aa0 <_tcc_pwm_init+0x1c8>)
    1a62:	601f      	str	r7, [r3, #0]
    1a64:	e7b5      	b.n	19d2 <_tcc_pwm_init+0xfa>
		_tcc2_dev = (struct _pwm_device *)dev;
    1a66:	4b0e      	ldr	r3, [pc, #56]	; (1aa0 <_tcc_pwm_init+0x1c8>)
    1a68:	605f      	str	r7, [r3, #4]
    1a6a:	e7b2      	b.n	19d2 <_tcc_pwm_init+0xfa>
		return ERR_DENIED;
    1a6c:	2011      	movs	r0, #17
    1a6e:	4240      	negs	r0, r0
    1a70:	e7c3      	b.n	19fa <_tcc_pwm_init+0x122>
		return ERR_NO_RESOURCE;
    1a72:	201c      	movs	r0, #28
    1a74:	4240      	negs	r0, r0
    1a76:	e7c0      	b.n	19fa <_tcc_pwm_init+0x122>
	return ERR_NONE;
    1a78:	2000      	movs	r0, #0
    1a7a:	e7be      	b.n	19fa <_tcc_pwm_init+0x122>
    1a7c:	bdffec00 	.word	0xbdffec00
    1a80:	20000000 	.word	0x20000000
    1a84:	00005118 	.word	0x00005118
    1a88:	00000c85 	.word	0x00000c85
    1a8c:	00001841 	.word	0x00001841
    1a90:	000050f8 	.word	0x000050f8
    1a94:	42001400 	.word	0x42001400
    1a98:	42001c00 	.word	0x42001c00
    1a9c:	e000e100 	.word	0xe000e100
    1aa0:	2000012c 	.word	0x2000012c

00001aa4 <_tcc_pwm_set_irq_state>:
{
    1aa4:	b570      	push	{r4, r5, r6, lr}
    1aa6:	0004      	movs	r4, r0
    1aa8:	000e      	movs	r6, r1
    1aaa:	0015      	movs	r5, r2
	ASSERT(device);
    1aac:	1e43      	subs	r3, r0, #1
    1aae:	4198      	sbcs	r0, r3
    1ab0:	b2c0      	uxtb	r0, r0
    1ab2:	22b7      	movs	r2, #183	; 0xb7
    1ab4:	0052      	lsls	r2, r2, #1
    1ab6:	490d      	ldr	r1, [pc, #52]	; (1aec <_tcc_pwm_set_irq_state+0x48>)
    1ab8:	4b0d      	ldr	r3, [pc, #52]	; (1af0 <_tcc_pwm_set_irq_state+0x4c>)
    1aba:	4798      	blx	r3
	if (PWM_DEVICE_PERIOD_CB == type) {
    1abc:	2e00      	cmp	r6, #0
    1abe:	d108      	bne.n	1ad2 <_tcc_pwm_set_irq_state+0x2e>
		hri_tcc_write_INTEN_OVF_bit(device->hw, disable);
    1ac0:	6923      	ldr	r3, [r4, #16]
	if (value == 0x0) {
    1ac2:	2d00      	cmp	r5, #0
    1ac4:	d102      	bne.n	1acc <_tcc_pwm_set_irq_state+0x28>
		((Tcc *)hw)->INTENCLR.reg = TCC_INTENSET_OVF;
    1ac6:	2201      	movs	r2, #1
    1ac8:	625a      	str	r2, [r3, #36]	; 0x24
    1aca:	e004      	b.n	1ad6 <_tcc_pwm_set_irq_state+0x32>
		((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    1acc:	2201      	movs	r2, #1
    1ace:	629a      	str	r2, [r3, #40]	; 0x28
    1ad0:	e001      	b.n	1ad6 <_tcc_pwm_set_irq_state+0x32>
	} else if (PWM_DEVICE_ERROR_CB == type) {
    1ad2:	2e01      	cmp	r6, #1
    1ad4:	d000      	beq.n	1ad8 <_tcc_pwm_set_irq_state+0x34>
}
    1ad6:	bd70      	pop	{r4, r5, r6, pc}
		hri_tcc_write_INTEN_ERR_bit(device->hw, disable);
    1ad8:	6923      	ldr	r3, [r4, #16]
	if (value == 0x0) {
    1ada:	2d00      	cmp	r5, #0
    1adc:	d002      	beq.n	1ae4 <_tcc_pwm_set_irq_state+0x40>
		((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_ERR;
    1ade:	2208      	movs	r2, #8
    1ae0:	629a      	str	r2, [r3, #40]	; 0x28
}
    1ae2:	e7f8      	b.n	1ad6 <_tcc_pwm_set_irq_state+0x32>
		((Tcc *)hw)->INTENCLR.reg = TCC_INTENSET_ERR;
    1ae4:	2208      	movs	r2, #8
    1ae6:	625a      	str	r2, [r3, #36]	; 0x24
    1ae8:	e7f5      	b.n	1ad6 <_tcc_pwm_set_irq_state+0x32>
    1aea:	46c0      	nop			; (mov r8, r8)
    1aec:	00005118 	.word	0x00005118
    1af0:	00000c85 	.word	0x00000c85

00001af4 <_tcc_get_pwm>:
	return &_tcc_pwm_functions;
    1af4:	4801      	ldr	r0, [pc, #4]	; (1afc <_tcc_get_pwm+0x8>)
}
    1af6:	3048      	adds	r0, #72	; 0x48
    1af8:	4770      	bx	lr
    1afa:	46c0      	nop			; (mov r8, r8)
    1afc:	20000000 	.word	0x20000000

00001b00 <TCC0_Handler>:
{
    1b00:	b510      	push	{r4, lr}
	tcc_pwm_interrupt_handler(_tcc0_dev);
    1b02:	4b02      	ldr	r3, [pc, #8]	; (1b0c <TCC0_Handler+0xc>)
    1b04:	6818      	ldr	r0, [r3, #0]
    1b06:	4b02      	ldr	r3, [pc, #8]	; (1b10 <TCC0_Handler+0x10>)
    1b08:	4798      	blx	r3
}
    1b0a:	bd10      	pop	{r4, pc}
    1b0c:	2000012c 	.word	0x2000012c
    1b10:	00001811 	.word	0x00001811

00001b14 <TCC2_Handler>:
{
    1b14:	b510      	push	{r4, lr}
	tcc_pwm_interrupt_handler(_tcc2_dev);
    1b16:	4b02      	ldr	r3, [pc, #8]	; (1b20 <TCC2_Handler+0xc>)
    1b18:	6858      	ldr	r0, [r3, #4]
    1b1a:	4b02      	ldr	r3, [pc, #8]	; (1b24 <TCC2_Handler+0x10>)
    1b1c:	4798      	blx	r3
}
    1b1e:	bd10      	pop	{r4, pc}
    1b20:	2000012c 	.word	0x2000012c
    1b24:	00001811 	.word	0x00001811

00001b28 <_tc_start_pwm>:
/**
 * \brief Start PWM
 */
void _tc_start_pwm(struct _pwm_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    1b28:	6902      	ldr	r2, [r0, #16]
typedef uint8_t  hri_tc_status_reg_t;
typedef uint8_t  hri_tc_wave_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1b2a:	2103      	movs	r1, #3
    1b2c:	6913      	ldr	r3, [r2, #16]
    1b2e:	4219      	tst	r1, r3
    1b30:	d1fc      	bne.n	1b2c <_tc_start_pwm+0x4>

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1b32:	6813      	ldr	r3, [r2, #0]
    1b34:	2102      	movs	r1, #2
    1b36:	430b      	orrs	r3, r1
    1b38:	6013      	str	r3, [r2, #0]
}
    1b3a:	4770      	bx	lr

00001b3c <_tc_stop_pwm>:
/**
 * \brief Stop PWM
 */
void _tc_stop_pwm(struct _pwm_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    1b3c:	6902      	ldr	r2, [r0, #16]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1b3e:	2103      	movs	r1, #3
    1b40:	6913      	ldr	r3, [r2, #16]
    1b42:	4219      	tst	r1, r3
    1b44:	d1fc      	bne.n	1b40 <_tc_stop_pwm+0x4>

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1b46:	6813      	ldr	r3, [r2, #0]
    1b48:	2102      	movs	r1, #2
    1b4a:	438b      	bics	r3, r1
    1b4c:	6013      	str	r3, [r2, #0]
}
    1b4e:	4770      	bx	lr

00001b50 <_tc_is_pwm_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _tc_is_pwm_enabled(const struct _pwm_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    1b50:	6902      	ldr	r2, [r0, #16]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1b52:	2103      	movs	r1, #3
    1b54:	6913      	ldr	r3, [r2, #16]
    1b56:	4219      	tst	r1, r3
    1b58:	d1fc      	bne.n	1b54 <_tc_is_pwm_enabled+0x4>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    1b5a:	6810      	ldr	r0, [r2, #0]
	return (bool)tmp;
    1b5c:	0780      	lsls	r0, r0, #30
    1b5e:	0fc0      	lsrs	r0, r0, #31
}
    1b60:	4770      	bx	lr
	...

00001b64 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    1b64:	b510      	push	{r4, lr}
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	if ((uint32_t)TC4 == (uint32_t)hw) {
    1b66:	4b0c      	ldr	r3, [pc, #48]	; (1b98 <get_tc_index+0x34>)
    1b68:	4298      	cmp	r0, r3
    1b6a:	d011      	beq.n	1b90 <get_tc_index+0x2c>
		return 4;
	}
	return (((uint32_t)hw - (uint32_t)TC0) >> 10);
    1b6c:	4b0b      	ldr	r3, [pc, #44]	; (1b9c <get_tc_index+0x38>)
    1b6e:	469c      	mov	ip, r3
    1b70:	4460      	add	r0, ip
    1b72:	0a80      	lsrs	r0, r0, #10
		if (_tcs[i].number == index) {
    1b74:	4b0a      	ldr	r3, [pc, #40]	; (1ba0 <get_tc_index+0x3c>)
    1b76:	781b      	ldrb	r3, [r3, #0]
    1b78:	b2c0      	uxtb	r0, r0
    1b7a:	4283      	cmp	r3, r0
    1b7c:	d00a      	beq.n	1b94 <get_tc_index+0x30>
	ASSERT(false);
    1b7e:	226a      	movs	r2, #106	; 0x6a
    1b80:	32ff      	adds	r2, #255	; 0xff
    1b82:	4908      	ldr	r1, [pc, #32]	; (1ba4 <get_tc_index+0x40>)
    1b84:	2000      	movs	r0, #0
    1b86:	4b08      	ldr	r3, [pc, #32]	; (1ba8 <get_tc_index+0x44>)
    1b88:	4798      	blx	r3
	return -1;
    1b8a:	2001      	movs	r0, #1
    1b8c:	4240      	negs	r0, r0
}
    1b8e:	bd10      	pop	{r4, pc}
	if ((uint32_t)TC4 == (uint32_t)hw) {
    1b90:	2004      	movs	r0, #4
    1b92:	e7ef      	b.n	1b74 <get_tc_index+0x10>
			return i;
    1b94:	2000      	movs	r0, #0
    1b96:	e7fa      	b.n	1b8e <get_tc_index+0x2a>
    1b98:	43000800 	.word	0x43000800
    1b9c:	bdffe000 	.word	0xbdffe000
    1ba0:	2000006c 	.word	0x2000006c
    1ba4:	00005130 	.word	0x00005130
    1ba8:	00000c85 	.word	0x00000c85

00001bac <_tc_pwm_init>:
{
    1bac:	b570      	push	{r4, r5, r6, lr}
    1bae:	0005      	movs	r5, r0
    1bb0:	000c      	movs	r4, r1
	int8_t i   = get_tc_index(hw);
    1bb2:	0008      	movs	r0, r1
    1bb4:	4b3f      	ldr	r3, [pc, #252]	; (1cb4 <_tc_pwm_init+0x108>)
    1bb6:	4798      	blx	r3
	device->hw = hw;
    1bb8:	612c      	str	r4, [r5, #16]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1bba:	2201      	movs	r2, #1
    1bbc:	6923      	ldr	r3, [r4, #16]
    1bbe:	421a      	tst	r2, r3
    1bc0:	d1fc      	bne.n	1bbc <_tc_pwm_init+0x10>
    1bc2:	2203      	movs	r2, #3
    1bc4:	6923      	ldr	r3, [r4, #16]
    1bc6:	421a      	tst	r2, r3
    1bc8:	d1fc      	bne.n	1bc4 <_tc_pwm_init+0x18>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    1bca:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    1bcc:	079b      	lsls	r3, r3, #30
    1bce:	d500      	bpl.n	1bd2 <_tc_pwm_init+0x26>
    1bd0:	e067      	b.n	1ca2 <_tc_pwm_init+0xf6>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1bd2:	2201      	movs	r2, #1
    1bd4:	6923      	ldr	r3, [r4, #16]
    1bd6:	421a      	tst	r2, r3
    1bd8:	d1fc      	bne.n	1bd4 <_tc_pwm_init+0x28>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    1bda:	6823      	ldr	r3, [r4, #0]
    1bdc:	2201      	movs	r2, #1
    1bde:	4313      	orrs	r3, r2
    1be0:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1be2:	6923      	ldr	r3, [r4, #16]
    1be4:	421a      	tst	r2, r3
    1be6:	d1fc      	bne.n	1be2 <_tc_pwm_init+0x36>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    1be8:	0083      	lsls	r3, r0, #2
    1bea:	181b      	adds	r3, r3, r0
    1bec:	009b      	lsls	r3, r3, #2
    1bee:	4a32      	ldr	r2, [pc, #200]	; (1cb8 <_tc_pwm_init+0x10c>)
    1bf0:	18d3      	adds	r3, r2, r3
    1bf2:	6859      	ldr	r1, [r3, #4]
    1bf4:	2203      	movs	r2, #3
    1bf6:	6923      	ldr	r3, [r4, #16]
    1bf8:	421a      	tst	r2, r3
    1bfa:	d1fc      	bne.n	1bf6 <_tc_pwm_init+0x4a>

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    1bfc:	6021      	str	r1, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1bfe:	0083      	lsls	r3, r0, #2
    1c00:	181b      	adds	r3, r3, r0
    1c02:	009b      	lsls	r3, r3, #2
    1c04:	4a2c      	ldr	r2, [pc, #176]	; (1cb8 <_tc_pwm_init+0x10c>)
    1c06:	18d3      	adds	r3, r2, r3
    1c08:	7a9a      	ldrb	r2, [r3, #10]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    1c0a:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    1c0c:	891b      	ldrh	r3, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    1c0e:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    1c10:	2303      	movs	r3, #3
    1c12:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1c14:	3309      	adds	r3, #9
    1c16:	400b      	ands	r3, r1
    1c18:	2b08      	cmp	r3, #8
    1c1a:	d035      	beq.n	1c88 <_tc_pwm_init+0xdc>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1c1c:	2b00      	cmp	r3, #0
    1c1e:	d143      	bne.n	1ca8 <_tc_pwm_init+0xfc>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    1c20:	0083      	lsls	r3, r0, #2
    1c22:	181b      	adds	r3, r3, r0
    1c24:	009b      	lsls	r3, r3, #2
    1c26:	4a24      	ldr	r2, [pc, #144]	; (1cb8 <_tc_pwm_init+0x10c>)
    1c28:	18d3      	adds	r3, r2, r3
    1c2a:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1c2c:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    1c2e:	8a1b      	ldrh	r3, [r3, #16]
    1c30:	83e3      	strh	r3, [r4, #30]
	if (hw == TC0) {
    1c32:	4b22      	ldr	r3, [pc, #136]	; (1cbc <_tc_pwm_init+0x110>)
    1c34:	429c      	cmp	r4, r3
    1c36:	d031      	beq.n	1c9c <_tc_pwm_init+0xf0>
	NVIC_DisableIRQ(_tcs[i].irq);
    1c38:	0083      	lsls	r3, r0, #2
    1c3a:	181b      	adds	r3, r3, r0
    1c3c:	009b      	lsls	r3, r3, #2
    1c3e:	4a1e      	ldr	r2, [pc, #120]	; (1cb8 <_tc_pwm_init+0x10c>)
    1c40:	18d3      	adds	r3, r2, r3
    1c42:	785b      	ldrb	r3, [r3, #1]
    1c44:	b25b      	sxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
    1c46:	2b00      	cmp	r3, #0
    1c48:	db31      	blt.n	1cae <_tc_pwm_init+0x102>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1c4a:	221f      	movs	r2, #31
    1c4c:	401a      	ands	r2, r3
    1c4e:	2301      	movs	r3, #1
    1c50:	4093      	lsls	r3, r2
    1c52:	2280      	movs	r2, #128	; 0x80
    1c54:	491a      	ldr	r1, [pc, #104]	; (1cc0 <_tc_pwm_init+0x114>)
    1c56:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    1c58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c5c:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    1c60:	0083      	lsls	r3, r0, #2
    1c62:	1818      	adds	r0, r3, r0
    1c64:	0080      	lsls	r0, r0, #2
    1c66:	4b14      	ldr	r3, [pc, #80]	; (1cb8 <_tc_pwm_init+0x10c>)
    1c68:	1818      	adds	r0, r3, r0
    1c6a:	2301      	movs	r3, #1
    1c6c:	56c3      	ldrsb	r3, [r0, r3]
	return 0;
    1c6e:	2000      	movs	r0, #0
  if ((int32_t)(IRQn) >= 0)
    1c70:	2b00      	cmp	r3, #0
    1c72:	db08      	blt.n	1c86 <_tc_pwm_init+0xda>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1c74:	3a61      	subs	r2, #97	; 0x61
    1c76:	401a      	ands	r2, r3
    1c78:	2301      	movs	r3, #1
    1c7a:	4093      	lsls	r3, r2
    1c7c:	000a      	movs	r2, r1
    1c7e:	21c0      	movs	r1, #192	; 0xc0
    1c80:	0049      	lsls	r1, r1, #1
    1c82:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1c84:	6013      	str	r3, [r2, #0]
}
    1c86:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    1c88:	0083      	lsls	r3, r0, #2
    1c8a:	181b      	adds	r3, r3, r0
    1c8c:	009b      	lsls	r3, r3, #2
    1c8e:	4a0a      	ldr	r2, [pc, #40]	; (1cb8 <_tc_pwm_init+0x10c>)
    1c90:	18d3      	adds	r3, r2, r3
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1c92:	68da      	ldr	r2, [r3, #12]
    1c94:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    1c96:	691b      	ldr	r3, [r3, #16]
    1c98:	6223      	str	r3, [r4, #32]
    1c9a:	e7ca      	b.n	1c32 <_tc_pwm_init+0x86>
		_tc0_dev = (struct _pwm_device *)dev;
    1c9c:	4b09      	ldr	r3, [pc, #36]	; (1cc4 <_tc_pwm_init+0x118>)
    1c9e:	601d      	str	r5, [r3, #0]
    1ca0:	e7ca      	b.n	1c38 <_tc_pwm_init+0x8c>
		return ERR_DENIED;
    1ca2:	2011      	movs	r0, #17
    1ca4:	4240      	negs	r0, r0
    1ca6:	e7ee      	b.n	1c86 <_tc_pwm_init+0xda>
		return -1;
    1ca8:	2001      	movs	r0, #1
    1caa:	4240      	negs	r0, r0
    1cac:	e7eb      	b.n	1c86 <_tc_pwm_init+0xda>
	return 0;
    1cae:	2000      	movs	r0, #0
    1cb0:	e7e9      	b.n	1c86 <_tc_pwm_init+0xda>
    1cb2:	46c0      	nop			; (mov r8, r8)
    1cb4:	00001b65 	.word	0x00001b65
    1cb8:	2000006c 	.word	0x2000006c
    1cbc:	42002000 	.word	0x42002000
    1cc0:	e000e100 	.word	0xe000e100
    1cc4:	20000134 	.word	0x20000134

00001cc8 <_tc_set_pwm_param>:
{
    1cc8:	b570      	push	{r4, r5, r6, lr}
    1cca:	000d      	movs	r5, r1
    1ccc:	0014      	movs	r4, r2
	void *const hw = device->hw;
    1cce:	6906      	ldr	r6, [r0, #16]
	int8_t      i  = get_tc_index(hw);
    1cd0:	0030      	movs	r0, r6
    1cd2:	4b0b      	ldr	r3, [pc, #44]	; (1d00 <_tc_set_pwm_param+0x38>)
    1cd4:	4798      	blx	r3
	_tcs[i].cc0 = period;
    1cd6:	490b      	ldr	r1, [pc, #44]	; (1d04 <_tc_set_pwm_param+0x3c>)
    1cd8:	0083      	lsls	r3, r0, #2
    1cda:	181a      	adds	r2, r3, r0
    1cdc:	0092      	lsls	r2, r2, #2
    1cde:	188a      	adds	r2, r1, r2
    1ce0:	60d5      	str	r5, [r2, #12]
	_tcs[i].cc1 = duty_cycle;
    1ce2:	6114      	str	r4, [r2, #16]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1ce4:	6853      	ldr	r3, [r2, #4]
    1ce6:	220c      	movs	r2, #12
    1ce8:	4013      	ands	r3, r2
    1cea:	2b08      	cmp	r3, #8
    1cec:	d004      	beq.n	1cf8 <_tc_set_pwm_param+0x30>
		hri_tccount16_write_CC_reg(hw, 0, _tcs[i].cc0);
    1cee:	b2ad      	uxth	r5, r5
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1cf0:	83b5      	strh	r5, [r6, #28]
		hri_tccount16_write_CC_reg(hw, 1, _tcs[i].cc1);
    1cf2:	b2a4      	uxth	r4, r4
    1cf4:	83f4      	strh	r4, [r6, #30]
}
    1cf6:	bd70      	pop	{r4, r5, r6, pc}
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1cf8:	61f5      	str	r5, [r6, #28]
    1cfa:	6234      	str	r4, [r6, #32]
    1cfc:	e7fb      	b.n	1cf6 <_tc_set_pwm_param+0x2e>
    1cfe:	46c0      	nop			; (mov r8, r8)
    1d00:	00001b65 	.word	0x00001b65
    1d04:	2000006c 	.word	0x2000006c

00001d08 <_tc_pwm_get_period>:
{
    1d08:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    1d0a:	6904      	ldr	r4, [r0, #16]
	int8_t      i  = get_tc_index(hw);
    1d0c:	0020      	movs	r0, r4
    1d0e:	4b08      	ldr	r3, [pc, #32]	; (1d30 <_tc_pwm_get_period+0x28>)
    1d10:	4798      	blx	r3
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1d12:	0083      	lsls	r3, r0, #2
    1d14:	1818      	adds	r0, r3, r0
    1d16:	0080      	lsls	r0, r0, #2
    1d18:	4b06      	ldr	r3, [pc, #24]	; (1d34 <_tc_pwm_get_period+0x2c>)
    1d1a:	1818      	adds	r0, r3, r0
    1d1c:	6843      	ldr	r3, [r0, #4]
    1d1e:	220c      	movs	r2, #12
    1d20:	4013      	ands	r3, r2
    1d22:	2b08      	cmp	r3, #8
    1d24:	d002      	beq.n	1d2c <_tc_pwm_get_period+0x24>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    1d26:	8ba0      	ldrh	r0, [r4, #28]
    1d28:	b280      	uxth	r0, r0
}
    1d2a:	bd10      	pop	{r4, pc}
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    1d2c:	69e0      	ldr	r0, [r4, #28]
		return (pwm_period_t)(hri_tccount32_read_CC_reg(hw, 0));
    1d2e:	e7fc      	b.n	1d2a <_tc_pwm_get_period+0x22>
    1d30:	00001b65 	.word	0x00001b65
    1d34:	2000006c 	.word	0x2000006c

00001d38 <_tc_pwm_get_duty>:
{
    1d38:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    1d3a:	6904      	ldr	r4, [r0, #16]
	int8_t      i  = get_tc_index(hw);
    1d3c:	0020      	movs	r0, r4
    1d3e:	4b0c      	ldr	r3, [pc, #48]	; (1d70 <_tc_pwm_get_duty+0x38>)
    1d40:	4798      	blx	r3
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1d42:	0083      	lsls	r3, r0, #2
    1d44:	1818      	adds	r0, r3, r0
    1d46:	0080      	lsls	r0, r0, #2
    1d48:	4b0a      	ldr	r3, [pc, #40]	; (1d74 <_tc_pwm_get_duty+0x3c>)
    1d4a:	1818      	adds	r0, r3, r0
    1d4c:	6843      	ldr	r3, [r0, #4]
    1d4e:	220c      	movs	r2, #12
    1d50:	4013      	ands	r3, r2
    1d52:	2b08      	cmp	r3, #8
    1d54:	d009      	beq.n	1d6a <_tc_pwm_get_duty+0x32>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    1d56:	8ba1      	ldrh	r1, [r4, #28]
    1d58:	b289      	uxth	r1, r1
    1d5a:	8be3      	ldrh	r3, [r4, #30]
    1d5c:	b29b      	uxth	r3, r3
	return ((duty_cycle * 1000) / per);
    1d5e:	20fa      	movs	r0, #250	; 0xfa
    1d60:	0080      	lsls	r0, r0, #2
    1d62:	4358      	muls	r0, r3
    1d64:	4b04      	ldr	r3, [pc, #16]	; (1d78 <_tc_pwm_get_duty+0x40>)
    1d66:	4798      	blx	r3
}
    1d68:	bd10      	pop	{r4, pc}
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    1d6a:	69e1      	ldr	r1, [r4, #28]
    1d6c:	6a23      	ldr	r3, [r4, #32]
    1d6e:	e7f6      	b.n	1d5e <_tc_pwm_get_duty+0x26>
    1d70:	00001b65 	.word	0x00001b65
    1d74:	2000006c 	.word	0x2000006c
    1d78:	00001fbd 	.word	0x00001fbd

00001d7c <_tc_pwm_deinit>:
{
    1d7c:	b570      	push	{r4, r5, r6, lr}
	void *const hw = device->hw;
    1d7e:	6904      	ldr	r4, [r0, #16]
	int8_t      i  = get_tc_index(hw);
    1d80:	0020      	movs	r0, r4
    1d82:	4b16      	ldr	r3, [pc, #88]	; (1ddc <_tc_pwm_deinit+0x60>)
    1d84:	4798      	blx	r3
    1d86:	0005      	movs	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    1d88:	22cb      	movs	r2, #203	; 0xcb
    1d8a:	4915      	ldr	r1, [pc, #84]	; (1de0 <_tc_pwm_deinit+0x64>)
    1d8c:	2001      	movs	r0, #1
    1d8e:	4b15      	ldr	r3, [pc, #84]	; (1de4 <_tc_pwm_deinit+0x68>)
    1d90:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    1d92:	00a8      	lsls	r0, r5, #2
    1d94:	1940      	adds	r0, r0, r5
    1d96:	0080      	lsls	r0, r0, #2
    1d98:	4b13      	ldr	r3, [pc, #76]	; (1de8 <_tc_pwm_deinit+0x6c>)
    1d9a:	1818      	adds	r0, r3, r0
    1d9c:	2301      	movs	r3, #1
    1d9e:	56c3      	ldrsb	r3, [r0, r3]
  if ((int32_t)(IRQn) >= 0)
    1da0:	2b00      	cmp	r3, #0
    1da2:	db0a      	blt.n	1dba <_tc_pwm_deinit+0x3e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1da4:	221f      	movs	r2, #31
    1da6:	401a      	ands	r2, r3
    1da8:	2301      	movs	r3, #1
    1daa:	4093      	lsls	r3, r2
    1dac:	2280      	movs	r2, #128	; 0x80
    1dae:	490f      	ldr	r1, [pc, #60]	; (1dec <_tc_pwm_deinit+0x70>)
    1db0:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    1db2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1db6:	f3bf 8f6f 	isb	sy
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1dba:	2203      	movs	r2, #3
    1dbc:	6923      	ldr	r3, [r4, #16]
    1dbe:	421a      	tst	r2, r3
    1dc0:	d1fc      	bne.n	1dbc <_tc_pwm_deinit+0x40>
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1dc2:	6823      	ldr	r3, [r4, #0]
    1dc4:	2202      	movs	r2, #2
    1dc6:	4393      	bics	r3, r2
    1dc8:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1dca:	3a01      	subs	r2, #1
    1dcc:	6923      	ldr	r3, [r4, #16]
    1dce:	421a      	tst	r2, r3
    1dd0:	d1fc      	bne.n	1dcc <_tc_pwm_deinit+0x50>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    1dd2:	6823      	ldr	r3, [r4, #0]
    1dd4:	2201      	movs	r2, #1
    1dd6:	4313      	orrs	r3, r2
    1dd8:	6023      	str	r3, [r4, #0]
}
    1dda:	bd70      	pop	{r4, r5, r6, pc}
    1ddc:	00001b65 	.word	0x00001b65
    1de0:	00005130 	.word	0x00005130
    1de4:	00000c85 	.word	0x00000c85
    1de8:	2000006c 	.word	0x2000006c
    1dec:	e000e100 	.word	0xe000e100

00001df0 <_tc_pwm_set_irq_state>:
{
    1df0:	b570      	push	{r4, r5, r6, lr}
    1df2:	0004      	movs	r4, r0
    1df4:	000e      	movs	r6, r1
    1df6:	0015      	movs	r5, r2
	ASSERT(device);
    1df8:	1e43      	subs	r3, r0, #1
    1dfa:	4198      	sbcs	r0, r3
    1dfc:	b2c0      	uxtb	r0, r0
    1dfe:	2290      	movs	r2, #144	; 0x90
    1e00:	0052      	lsls	r2, r2, #1
    1e02:	490d      	ldr	r1, [pc, #52]	; (1e38 <_tc_pwm_set_irq_state+0x48>)
    1e04:	4b0d      	ldr	r3, [pc, #52]	; (1e3c <_tc_pwm_set_irq_state+0x4c>)
    1e06:	4798      	blx	r3
	if (PWM_DEVICE_PERIOD_CB == type) {
    1e08:	2e00      	cmp	r6, #0
    1e0a:	d108      	bne.n	1e1e <_tc_pwm_set_irq_state+0x2e>
		hri_tc_write_INTEN_OVF_bit(device->hw, disable);
    1e0c:	6923      	ldr	r3, [r4, #16]
	if (value == 0x0) {
    1e0e:	2d00      	cmp	r5, #0
    1e10:	d102      	bne.n	1e18 <_tc_pwm_set_irq_state+0x28>
		((Tc *)hw)->COUNT8.INTENCLR.reg = TC_INTENSET_OVF;
    1e12:	2201      	movs	r2, #1
    1e14:	721a      	strb	r2, [r3, #8]
    1e16:	e004      	b.n	1e22 <_tc_pwm_set_irq_state+0x32>
		((Tc *)hw)->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    1e18:	2201      	movs	r2, #1
    1e1a:	725a      	strb	r2, [r3, #9]
    1e1c:	e001      	b.n	1e22 <_tc_pwm_set_irq_state+0x32>
	} else if (PWM_DEVICE_ERROR_CB == type) {
    1e1e:	2e01      	cmp	r6, #1
    1e20:	d000      	beq.n	1e24 <_tc_pwm_set_irq_state+0x34>
}
    1e22:	bd70      	pop	{r4, r5, r6, pc}
		hri_tc_write_INTEN_ERR_bit(device->hw, disable);
    1e24:	6923      	ldr	r3, [r4, #16]
	if (value == 0x0) {
    1e26:	2d00      	cmp	r5, #0
    1e28:	d002      	beq.n	1e30 <_tc_pwm_set_irq_state+0x40>
		((Tc *)hw)->COUNT8.INTENSET.reg = TC_INTENSET_ERR;
    1e2a:	2202      	movs	r2, #2
    1e2c:	725a      	strb	r2, [r3, #9]
}
    1e2e:	e7f8      	b.n	1e22 <_tc_pwm_set_irq_state+0x32>
		((Tc *)hw)->COUNT8.INTENCLR.reg = TC_INTENSET_ERR;
    1e30:	2202      	movs	r2, #2
    1e32:	721a      	strb	r2, [r3, #8]
    1e34:	e7f5      	b.n	1e22 <_tc_pwm_set_irq_state+0x32>
    1e36:	46c0      	nop			; (mov r8, r8)
    1e38:	00005130 	.word	0x00005130
    1e3c:	00000c85 	.word	0x00000c85

00001e40 <_tc_get_pwm>:
	return &_tc_pwm_functions;
    1e40:	4801      	ldr	r0, [pc, #4]	; (1e48 <_tc_get_pwm+0x8>)
}
    1e42:	3014      	adds	r0, #20
    1e44:	4770      	bx	lr
    1e46:	46c0      	nop			; (mov r8, r8)
    1e48:	2000006c 	.word	0x2000006c

00001e4c <TC0_Handler>:
{
    1e4c:	b570      	push	{r4, r5, r6, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    1e4e:	4b0c      	ldr	r3, [pc, #48]	; (1e80 <TC0_Handler+0x34>)
    1e50:	681d      	ldr	r5, [r3, #0]
	void *const hw = device->hw;
    1e52:	692c      	ldr	r4, [r5, #16]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1e54:	7aa3      	ldrb	r3, [r4, #10]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1e56:	07db      	lsls	r3, r3, #31
    1e58:	d506      	bpl.n	1e68 <TC0_Handler+0x1c>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1e5a:	2301      	movs	r3, #1
    1e5c:	72a3      	strb	r3, [r4, #10]
		if (NULL != device->callback.pwm_period_cb) {
    1e5e:	682b      	ldr	r3, [r5, #0]
    1e60:	2b00      	cmp	r3, #0
    1e62:	d001      	beq.n	1e68 <TC0_Handler+0x1c>
			device->callback.pwm_period_cb(device);
    1e64:	0028      	movs	r0, r5
    1e66:	4798      	blx	r3
	return (((Tc *)hw)->COUNT8.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    1e68:	7a63      	ldrb	r3, [r4, #9]
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    1e6a:	079b      	lsls	r3, r3, #30
    1e6c:	d506      	bpl.n	1e7c <TC0_Handler+0x30>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1e6e:	2302      	movs	r3, #2
    1e70:	72a3      	strb	r3, [r4, #10]
		if (NULL != device->callback.pwm_error_cb) {
    1e72:	686b      	ldr	r3, [r5, #4]
    1e74:	2b00      	cmp	r3, #0
    1e76:	d001      	beq.n	1e7c <TC0_Handler+0x30>
			device->callback.pwm_error_cb(device);
    1e78:	0028      	movs	r0, r5
    1e7a:	4798      	blx	r3
}
    1e7c:	bd70      	pop	{r4, r5, r6, pc}
    1e7e:	46c0      	nop			; (mov r8, r8)
    1e80:	20000134 	.word	0x20000134

00001e84 <main>:
#include <atmel_start.h>
#include "oled.h"
			
int main(void)
{
    1e84:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    1e86:	4b08      	ldr	r3, [pc, #32]	; (1ea8 <main+0x24>)
    1e88:	4798      	blx	r3
	
	/* init OLED */
	OLED_Init();
    1e8a:	4b08      	ldr	r3, [pc, #32]	; (1eac <main+0x28>)
    1e8c:	4798      	blx	r3
    OLED_FillAll();
    1e8e:	4b08      	ldr	r3, [pc, #32]	; (1eb0 <main+0x2c>)
    1e90:	4798      	blx	r3
    OLED_Clear();
    1e92:	4b08      	ldr	r3, [pc, #32]	; (1eb4 <main+0x30>)
    1e94:	4798      	blx	r3

	OLED_ShowString(OLED_DISPLAY_COLUMN_START, OLED_DISPLAY_ROW_1, "MicroChip");
    1e96:	4a08      	ldr	r2, [pc, #32]	; (1eb8 <main+0x34>)
    1e98:	2100      	movs	r1, #0
    1e9a:	2000      	movs	r0, #0
    1e9c:	4b07      	ldr	r3, [pc, #28]	; (1ebc <main+0x38>)
    1e9e:	4798      	blx	r3
	
	STDIO_REDIRECT_0_example();
    1ea0:	4b07      	ldr	r3, [pc, #28]	; (1ec0 <main+0x3c>)
    1ea2:	4798      	blx	r3
    1ea4:	e7fe      	b.n	1ea4 <main+0x20>
    1ea6:	46c0      	nop			; (mov r8, r8)
    1ea8:	00000115 	.word	0x00000115
    1eac:	0000024d 	.word	0x0000024d
    1eb0:	0000033d 	.word	0x0000033d
    1eb4:	00000209 	.word	0x00000209
    1eb8:	00005144 	.word	0x00005144
    1ebc:	000003e5 	.word	0x000003e5
    1ec0:	00001f89 	.word	0x00001f89

00001ec4 <_read>:
#include <stdio.h>

int __attribute__((weak)) _read(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
    1ec4:	b510      	push	{r4, lr}
    1ec6:	000b      	movs	r3, r1
	int n = 0;

	if (file != 0) {
    1ec8:	2800      	cmp	r0, #0
    1eca:	d109      	bne.n	1ee0 <_read+0x1c>
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    1ecc:	0011      	movs	r1, r2
    1ece:	0018      	movs	r0, r3
    1ed0:	4b05      	ldr	r3, [pc, #20]	; (1ee8 <_read+0x24>)
    1ed2:	4798      	blx	r3
    1ed4:	2800      	cmp	r0, #0
    1ed6:	db00      	blt.n	1eda <_read+0x16>
	if (n < 0) {
		return -1;
	}

	return n;
}
    1ed8:	bd10      	pop	{r4, pc}
    1eda:	2001      	movs	r0, #1
    1edc:	4240      	negs	r0, r0
    1ede:	e7fb      	b.n	1ed8 <_read+0x14>
		return -1;
    1ee0:	2001      	movs	r0, #1
    1ee2:	4240      	negs	r0, r0
    1ee4:	e7f8      	b.n	1ed8 <_read+0x14>
    1ee6:	46c0      	nop			; (mov r8, r8)
    1ee8:	00001f41 	.word	0x00001f41

00001eec <_write>:
#include <stdio.h>

int __attribute__((weak)) _write(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
    1eec:	b510      	push	{r4, lr}
    1eee:	000b      	movs	r3, r1
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    1ef0:	3801      	subs	r0, #1
    1ef2:	2802      	cmp	r0, #2
    1ef4:	d809      	bhi.n	1f0a <_write+0x1e>
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    1ef6:	0011      	movs	r1, r2
    1ef8:	0018      	movs	r0, r3
    1efa:	4b05      	ldr	r3, [pc, #20]	; (1f10 <_write+0x24>)
    1efc:	4798      	blx	r3
    1efe:	2800      	cmp	r0, #0
    1f00:	db00      	blt.n	1f04 <_write+0x18>
	if (n < 0) {
		return -1;
	}

	return n;
}
    1f02:	bd10      	pop	{r4, pc}
    1f04:	2001      	movs	r0, #1
    1f06:	4240      	negs	r0, r0
    1f08:	e7fb      	b.n	1f02 <_write+0x16>
		return -1;
    1f0a:	2001      	movs	r0, #1
    1f0c:	4240      	negs	r0, r0
    1f0e:	e7f8      	b.n	1f02 <_write+0x16>
    1f10:	00001f65 	.word	0x00001f65

00001f14 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    1f14:	b570      	push	{r4, r5, r6, lr}
    1f16:	0006      	movs	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    1f18:	4d06      	ldr	r5, [pc, #24]	; (1f34 <stdio_io_init+0x20>)
    1f1a:	682b      	ldr	r3, [r5, #0]
    1f1c:	6898      	ldr	r0, [r3, #8]
    1f1e:	2100      	movs	r1, #0
    1f20:	4c05      	ldr	r4, [pc, #20]	; (1f38 <stdio_io_init+0x24>)
    1f22:	47a0      	blx	r4
	setbuf(stdin, NULL);
    1f24:	682b      	ldr	r3, [r5, #0]
    1f26:	6858      	ldr	r0, [r3, #4]
    1f28:	2100      	movs	r1, #0
    1f2a:	47a0      	blx	r4
 * and AVR GCC library:
 * - printf() emits one character at a time.
 * - getchar() requests only 1 byte to exit.
 */
#endif
	stdio_io = io;
    1f2c:	4b03      	ldr	r3, [pc, #12]	; (1f3c <stdio_io_init+0x28>)
    1f2e:	601e      	str	r6, [r3, #0]
}
    1f30:	bd70      	pop	{r4, r5, r6, pc}
    1f32:	46c0      	nop			; (mov r8, r8)
    1f34:	200000a4 	.word	0x200000a4
    1f38:	00003819 	.word	0x00003819
    1f3c:	20000138 	.word	0x20000138

00001f40 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    1f40:	b510      	push	{r4, lr}
    1f42:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    1f44:	4b05      	ldr	r3, [pc, #20]	; (1f5c <stdio_io_read+0x1c>)
    1f46:	6818      	ldr	r0, [r3, #0]
    1f48:	2800      	cmp	r0, #0
    1f4a:	d004      	beq.n	1f56 <stdio_io_read+0x16>
		return 0;
	}
	return io_read(stdio_io, buf, len);
    1f4c:	b28a      	uxth	r2, r1
    1f4e:	0021      	movs	r1, r4
    1f50:	4b03      	ldr	r3, [pc, #12]	; (1f60 <stdio_io_read+0x20>)
    1f52:	4798      	blx	r3
}
    1f54:	bd10      	pop	{r4, pc}
		return 0;
    1f56:	2000      	movs	r0, #0
    1f58:	e7fc      	b.n	1f54 <stdio_io_read+0x14>
    1f5a:	46c0      	nop			; (mov r8, r8)
    1f5c:	20000138 	.word	0x20000138
    1f60:	00000a9d 	.word	0x00000a9d

00001f64 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    1f64:	b510      	push	{r4, lr}
    1f66:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    1f68:	4b05      	ldr	r3, [pc, #20]	; (1f80 <stdio_io_write+0x1c>)
    1f6a:	6818      	ldr	r0, [r3, #0]
    1f6c:	2800      	cmp	r0, #0
    1f6e:	d004      	beq.n	1f7a <stdio_io_write+0x16>
		return 0;
	}
	return io_write(stdio_io, buf, len);
    1f70:	b28a      	uxth	r2, r1
    1f72:	0021      	movs	r1, r4
    1f74:	4b03      	ldr	r3, [pc, #12]	; (1f84 <stdio_io_write+0x20>)
    1f76:	4798      	blx	r3
}
    1f78:	bd10      	pop	{r4, pc}
		return 0;
    1f7a:	2000      	movs	r0, #0
    1f7c:	e7fc      	b.n	1f78 <stdio_io_write+0x14>
    1f7e:	46c0      	nop			; (mov r8, r8)
    1f80:	20000138 	.word	0x20000138
    1f84:	00000a69 	.word	0x00000a69

00001f88 <STDIO_REDIRECT_0_example>:

#include "atmel_start.h"
#include "stdio_start.h"

void STDIO_REDIRECT_0_example(void)
{
    1f88:	b510      	push	{r4, lr}
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
    1f8a:	4802      	ldr	r0, [pc, #8]	; (1f94 <STDIO_REDIRECT_0_example+0xc>)
    1f8c:	4b02      	ldr	r3, [pc, #8]	; (1f98 <STDIO_REDIRECT_0_example+0x10>)
    1f8e:	4798      	blx	r3
}
    1f90:	bd10      	pop	{r4, pc}
    1f92:	46c0      	nop			; (mov r8, r8)
    1f94:	00005150 	.word	0x00005150
    1f98:	00003805 	.word	0x00003805

00001f9c <stdio_redirect_init>:

void stdio_redirect_init(void)
{
    1f9c:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
    1f9e:	4c04      	ldr	r4, [pc, #16]	; (1fb0 <stdio_redirect_init+0x14>)
    1fa0:	0020      	movs	r0, r4
    1fa2:	4b04      	ldr	r3, [pc, #16]	; (1fb4 <stdio_redirect_init+0x18>)
    1fa4:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    1fa6:	0020      	movs	r0, r4
    1fa8:	4b03      	ldr	r3, [pc, #12]	; (1fb8 <stdio_redirect_init+0x1c>)
    1faa:	4798      	blx	r3
}
    1fac:	bd10      	pop	{r4, pc}
    1fae:	46c0      	nop			; (mov r8, r8)
    1fb0:	20000164 	.word	0x20000164
    1fb4:	00000c59 	.word	0x00000c59
    1fb8:	00001f15 	.word	0x00001f15

00001fbc <__udivsi3>:
    1fbc:	2200      	movs	r2, #0
    1fbe:	0843      	lsrs	r3, r0, #1
    1fc0:	428b      	cmp	r3, r1
    1fc2:	d374      	bcc.n	20ae <STACK_SIZE+0xae>
    1fc4:	0903      	lsrs	r3, r0, #4
    1fc6:	428b      	cmp	r3, r1
    1fc8:	d35f      	bcc.n	208a <STACK_SIZE+0x8a>
    1fca:	0a03      	lsrs	r3, r0, #8
    1fcc:	428b      	cmp	r3, r1
    1fce:	d344      	bcc.n	205a <STACK_SIZE+0x5a>
    1fd0:	0b03      	lsrs	r3, r0, #12
    1fd2:	428b      	cmp	r3, r1
    1fd4:	d328      	bcc.n	2028 <STACK_SIZE+0x28>
    1fd6:	0c03      	lsrs	r3, r0, #16
    1fd8:	428b      	cmp	r3, r1
    1fda:	d30d      	bcc.n	1ff8 <__udivsi3+0x3c>
    1fdc:	22ff      	movs	r2, #255	; 0xff
    1fde:	0209      	lsls	r1, r1, #8
    1fe0:	ba12      	rev	r2, r2
    1fe2:	0c03      	lsrs	r3, r0, #16
    1fe4:	428b      	cmp	r3, r1
    1fe6:	d302      	bcc.n	1fee <__udivsi3+0x32>
    1fe8:	1212      	asrs	r2, r2, #8
    1fea:	0209      	lsls	r1, r1, #8
    1fec:	d065      	beq.n	20ba <STACK_SIZE+0xba>
    1fee:	0b03      	lsrs	r3, r0, #12
    1ff0:	428b      	cmp	r3, r1
    1ff2:	d319      	bcc.n	2028 <STACK_SIZE+0x28>
    1ff4:	e000      	b.n	1ff8 <__udivsi3+0x3c>
    1ff6:	0a09      	lsrs	r1, r1, #8
    1ff8:	0bc3      	lsrs	r3, r0, #15
    1ffa:	428b      	cmp	r3, r1
    1ffc:	d301      	bcc.n	2002 <STACK_SIZE+0x2>
    1ffe:	03cb      	lsls	r3, r1, #15
    2000:	1ac0      	subs	r0, r0, r3
    2002:	4152      	adcs	r2, r2
    2004:	0b83      	lsrs	r3, r0, #14
    2006:	428b      	cmp	r3, r1
    2008:	d301      	bcc.n	200e <STACK_SIZE+0xe>
    200a:	038b      	lsls	r3, r1, #14
    200c:	1ac0      	subs	r0, r0, r3
    200e:	4152      	adcs	r2, r2
    2010:	0b43      	lsrs	r3, r0, #13
    2012:	428b      	cmp	r3, r1
    2014:	d301      	bcc.n	201a <STACK_SIZE+0x1a>
    2016:	034b      	lsls	r3, r1, #13
    2018:	1ac0      	subs	r0, r0, r3
    201a:	4152      	adcs	r2, r2
    201c:	0b03      	lsrs	r3, r0, #12
    201e:	428b      	cmp	r3, r1
    2020:	d301      	bcc.n	2026 <STACK_SIZE+0x26>
    2022:	030b      	lsls	r3, r1, #12
    2024:	1ac0      	subs	r0, r0, r3
    2026:	4152      	adcs	r2, r2
    2028:	0ac3      	lsrs	r3, r0, #11
    202a:	428b      	cmp	r3, r1
    202c:	d301      	bcc.n	2032 <STACK_SIZE+0x32>
    202e:	02cb      	lsls	r3, r1, #11
    2030:	1ac0      	subs	r0, r0, r3
    2032:	4152      	adcs	r2, r2
    2034:	0a83      	lsrs	r3, r0, #10
    2036:	428b      	cmp	r3, r1
    2038:	d301      	bcc.n	203e <STACK_SIZE+0x3e>
    203a:	028b      	lsls	r3, r1, #10
    203c:	1ac0      	subs	r0, r0, r3
    203e:	4152      	adcs	r2, r2
    2040:	0a43      	lsrs	r3, r0, #9
    2042:	428b      	cmp	r3, r1
    2044:	d301      	bcc.n	204a <STACK_SIZE+0x4a>
    2046:	024b      	lsls	r3, r1, #9
    2048:	1ac0      	subs	r0, r0, r3
    204a:	4152      	adcs	r2, r2
    204c:	0a03      	lsrs	r3, r0, #8
    204e:	428b      	cmp	r3, r1
    2050:	d301      	bcc.n	2056 <STACK_SIZE+0x56>
    2052:	020b      	lsls	r3, r1, #8
    2054:	1ac0      	subs	r0, r0, r3
    2056:	4152      	adcs	r2, r2
    2058:	d2cd      	bcs.n	1ff6 <__udivsi3+0x3a>
    205a:	09c3      	lsrs	r3, r0, #7
    205c:	428b      	cmp	r3, r1
    205e:	d301      	bcc.n	2064 <STACK_SIZE+0x64>
    2060:	01cb      	lsls	r3, r1, #7
    2062:	1ac0      	subs	r0, r0, r3
    2064:	4152      	adcs	r2, r2
    2066:	0983      	lsrs	r3, r0, #6
    2068:	428b      	cmp	r3, r1
    206a:	d301      	bcc.n	2070 <STACK_SIZE+0x70>
    206c:	018b      	lsls	r3, r1, #6
    206e:	1ac0      	subs	r0, r0, r3
    2070:	4152      	adcs	r2, r2
    2072:	0943      	lsrs	r3, r0, #5
    2074:	428b      	cmp	r3, r1
    2076:	d301      	bcc.n	207c <STACK_SIZE+0x7c>
    2078:	014b      	lsls	r3, r1, #5
    207a:	1ac0      	subs	r0, r0, r3
    207c:	4152      	adcs	r2, r2
    207e:	0903      	lsrs	r3, r0, #4
    2080:	428b      	cmp	r3, r1
    2082:	d301      	bcc.n	2088 <STACK_SIZE+0x88>
    2084:	010b      	lsls	r3, r1, #4
    2086:	1ac0      	subs	r0, r0, r3
    2088:	4152      	adcs	r2, r2
    208a:	08c3      	lsrs	r3, r0, #3
    208c:	428b      	cmp	r3, r1
    208e:	d301      	bcc.n	2094 <STACK_SIZE+0x94>
    2090:	00cb      	lsls	r3, r1, #3
    2092:	1ac0      	subs	r0, r0, r3
    2094:	4152      	adcs	r2, r2
    2096:	0883      	lsrs	r3, r0, #2
    2098:	428b      	cmp	r3, r1
    209a:	d301      	bcc.n	20a0 <STACK_SIZE+0xa0>
    209c:	008b      	lsls	r3, r1, #2
    209e:	1ac0      	subs	r0, r0, r3
    20a0:	4152      	adcs	r2, r2
    20a2:	0843      	lsrs	r3, r0, #1
    20a4:	428b      	cmp	r3, r1
    20a6:	d301      	bcc.n	20ac <STACK_SIZE+0xac>
    20a8:	004b      	lsls	r3, r1, #1
    20aa:	1ac0      	subs	r0, r0, r3
    20ac:	4152      	adcs	r2, r2
    20ae:	1a41      	subs	r1, r0, r1
    20b0:	d200      	bcs.n	20b4 <STACK_SIZE+0xb4>
    20b2:	4601      	mov	r1, r0
    20b4:	4152      	adcs	r2, r2
    20b6:	4610      	mov	r0, r2
    20b8:	4770      	bx	lr
    20ba:	e7ff      	b.n	20bc <STACK_SIZE+0xbc>
    20bc:	b501      	push	{r0, lr}
    20be:	2000      	movs	r0, #0
    20c0:	f000 f806 	bl	20d0 <__aeabi_idiv0>
    20c4:	bd02      	pop	{r1, pc}
    20c6:	46c0      	nop			; (mov r8, r8)

000020c8 <__aeabi_uidivmod>:
    20c8:	2900      	cmp	r1, #0
    20ca:	d0f7      	beq.n	20bc <STACK_SIZE+0xbc>
    20cc:	e776      	b.n	1fbc <__udivsi3>
    20ce:	4770      	bx	lr

000020d0 <__aeabi_idiv0>:
    20d0:	4770      	bx	lr
    20d2:	46c0      	nop			; (mov r8, r8)

000020d4 <__aeabi_d2uiz>:
    20d4:	b570      	push	{r4, r5, r6, lr}
    20d6:	2200      	movs	r2, #0
    20d8:	4b0c      	ldr	r3, [pc, #48]	; (210c <__aeabi_d2uiz+0x38>)
    20da:	0004      	movs	r4, r0
    20dc:	000d      	movs	r5, r1
    20de:	f001 f9c3 	bl	3468 <__aeabi_dcmpge>
    20e2:	2800      	cmp	r0, #0
    20e4:	d104      	bne.n	20f0 <__aeabi_d2uiz+0x1c>
    20e6:	0020      	movs	r0, r4
    20e8:	0029      	movs	r1, r5
    20ea:	f001 f8db 	bl	32a4 <__aeabi_d2iz>
    20ee:	bd70      	pop	{r4, r5, r6, pc}
    20f0:	4b06      	ldr	r3, [pc, #24]	; (210c <__aeabi_d2uiz+0x38>)
    20f2:	2200      	movs	r2, #0
    20f4:	0020      	movs	r0, r4
    20f6:	0029      	movs	r1, r5
    20f8:	f000 fdbe 	bl	2c78 <__aeabi_dsub>
    20fc:	f001 f8d2 	bl	32a4 <__aeabi_d2iz>
    2100:	2380      	movs	r3, #128	; 0x80
    2102:	061b      	lsls	r3, r3, #24
    2104:	469c      	mov	ip, r3
    2106:	4460      	add	r0, ip
    2108:	e7f1      	b.n	20ee <__aeabi_d2uiz+0x1a>
    210a:	46c0      	nop			; (mov r8, r8)
    210c:	41e00000 	.word	0x41e00000

00002110 <__aeabi_ddiv>:
    2110:	b5f0      	push	{r4, r5, r6, r7, lr}
    2112:	4657      	mov	r7, sl
    2114:	4645      	mov	r5, r8
    2116:	46de      	mov	lr, fp
    2118:	464e      	mov	r6, r9
    211a:	b5e0      	push	{r5, r6, r7, lr}
    211c:	004c      	lsls	r4, r1, #1
    211e:	030e      	lsls	r6, r1, #12
    2120:	b087      	sub	sp, #28
    2122:	4683      	mov	fp, r0
    2124:	4692      	mov	sl, r2
    2126:	001d      	movs	r5, r3
    2128:	4680      	mov	r8, r0
    212a:	0b36      	lsrs	r6, r6, #12
    212c:	0d64      	lsrs	r4, r4, #21
    212e:	0fcf      	lsrs	r7, r1, #31
    2130:	2c00      	cmp	r4, #0
    2132:	d04f      	beq.n	21d4 <__aeabi_ddiv+0xc4>
    2134:	4b6f      	ldr	r3, [pc, #444]	; (22f4 <__aeabi_ddiv+0x1e4>)
    2136:	429c      	cmp	r4, r3
    2138:	d035      	beq.n	21a6 <__aeabi_ddiv+0x96>
    213a:	2380      	movs	r3, #128	; 0x80
    213c:	0f42      	lsrs	r2, r0, #29
    213e:	041b      	lsls	r3, r3, #16
    2140:	00f6      	lsls	r6, r6, #3
    2142:	4313      	orrs	r3, r2
    2144:	4333      	orrs	r3, r6
    2146:	4699      	mov	r9, r3
    2148:	00c3      	lsls	r3, r0, #3
    214a:	4698      	mov	r8, r3
    214c:	4b6a      	ldr	r3, [pc, #424]	; (22f8 <__aeabi_ddiv+0x1e8>)
    214e:	2600      	movs	r6, #0
    2150:	469c      	mov	ip, r3
    2152:	2300      	movs	r3, #0
    2154:	4464      	add	r4, ip
    2156:	9303      	str	r3, [sp, #12]
    2158:	032b      	lsls	r3, r5, #12
    215a:	0b1b      	lsrs	r3, r3, #12
    215c:	469b      	mov	fp, r3
    215e:	006b      	lsls	r3, r5, #1
    2160:	0fed      	lsrs	r5, r5, #31
    2162:	4650      	mov	r0, sl
    2164:	0d5b      	lsrs	r3, r3, #21
    2166:	9501      	str	r5, [sp, #4]
    2168:	d05e      	beq.n	2228 <__aeabi_ddiv+0x118>
    216a:	4a62      	ldr	r2, [pc, #392]	; (22f4 <__aeabi_ddiv+0x1e4>)
    216c:	4293      	cmp	r3, r2
    216e:	d053      	beq.n	2218 <__aeabi_ddiv+0x108>
    2170:	465a      	mov	r2, fp
    2172:	00d1      	lsls	r1, r2, #3
    2174:	2280      	movs	r2, #128	; 0x80
    2176:	0f40      	lsrs	r0, r0, #29
    2178:	0412      	lsls	r2, r2, #16
    217a:	4302      	orrs	r2, r0
    217c:	430a      	orrs	r2, r1
    217e:	4693      	mov	fp, r2
    2180:	4652      	mov	r2, sl
    2182:	00d1      	lsls	r1, r2, #3
    2184:	4a5c      	ldr	r2, [pc, #368]	; (22f8 <__aeabi_ddiv+0x1e8>)
    2186:	4694      	mov	ip, r2
    2188:	2200      	movs	r2, #0
    218a:	4463      	add	r3, ip
    218c:	0038      	movs	r0, r7
    218e:	4068      	eors	r0, r5
    2190:	4684      	mov	ip, r0
    2192:	9002      	str	r0, [sp, #8]
    2194:	1ae4      	subs	r4, r4, r3
    2196:	4316      	orrs	r6, r2
    2198:	2e0f      	cmp	r6, #15
    219a:	d900      	bls.n	219e <__aeabi_ddiv+0x8e>
    219c:	e0b4      	b.n	2308 <__aeabi_ddiv+0x1f8>
    219e:	4b57      	ldr	r3, [pc, #348]	; (22fc <__aeabi_ddiv+0x1ec>)
    21a0:	00b6      	lsls	r6, r6, #2
    21a2:	599b      	ldr	r3, [r3, r6]
    21a4:	469f      	mov	pc, r3
    21a6:	0003      	movs	r3, r0
    21a8:	4333      	orrs	r3, r6
    21aa:	4699      	mov	r9, r3
    21ac:	d16c      	bne.n	2288 <__aeabi_ddiv+0x178>
    21ae:	2300      	movs	r3, #0
    21b0:	4698      	mov	r8, r3
    21b2:	3302      	adds	r3, #2
    21b4:	2608      	movs	r6, #8
    21b6:	9303      	str	r3, [sp, #12]
    21b8:	e7ce      	b.n	2158 <__aeabi_ddiv+0x48>
    21ba:	46cb      	mov	fp, r9
    21bc:	4641      	mov	r1, r8
    21be:	9a03      	ldr	r2, [sp, #12]
    21c0:	9701      	str	r7, [sp, #4]
    21c2:	2a02      	cmp	r2, #2
    21c4:	d165      	bne.n	2292 <__aeabi_ddiv+0x182>
    21c6:	9b01      	ldr	r3, [sp, #4]
    21c8:	4c4a      	ldr	r4, [pc, #296]	; (22f4 <__aeabi_ddiv+0x1e4>)
    21ca:	469c      	mov	ip, r3
    21cc:	2300      	movs	r3, #0
    21ce:	2200      	movs	r2, #0
    21d0:	4698      	mov	r8, r3
    21d2:	e06b      	b.n	22ac <__aeabi_ddiv+0x19c>
    21d4:	0003      	movs	r3, r0
    21d6:	4333      	orrs	r3, r6
    21d8:	4699      	mov	r9, r3
    21da:	d04e      	beq.n	227a <__aeabi_ddiv+0x16a>
    21dc:	2e00      	cmp	r6, #0
    21de:	d100      	bne.n	21e2 <__aeabi_ddiv+0xd2>
    21e0:	e1bc      	b.n	255c <__aeabi_ddiv+0x44c>
    21e2:	0030      	movs	r0, r6
    21e4:	f001 f94a 	bl	347c <__clzsi2>
    21e8:	0003      	movs	r3, r0
    21ea:	3b0b      	subs	r3, #11
    21ec:	2b1c      	cmp	r3, #28
    21ee:	dd00      	ble.n	21f2 <__aeabi_ddiv+0xe2>
    21f0:	e1ac      	b.n	254c <__aeabi_ddiv+0x43c>
    21f2:	221d      	movs	r2, #29
    21f4:	1ad3      	subs	r3, r2, r3
    21f6:	465a      	mov	r2, fp
    21f8:	0001      	movs	r1, r0
    21fa:	40da      	lsrs	r2, r3
    21fc:	3908      	subs	r1, #8
    21fe:	408e      	lsls	r6, r1
    2200:	0013      	movs	r3, r2
    2202:	4333      	orrs	r3, r6
    2204:	4699      	mov	r9, r3
    2206:	465b      	mov	r3, fp
    2208:	408b      	lsls	r3, r1
    220a:	4698      	mov	r8, r3
    220c:	2300      	movs	r3, #0
    220e:	4c3c      	ldr	r4, [pc, #240]	; (2300 <__aeabi_ddiv+0x1f0>)
    2210:	2600      	movs	r6, #0
    2212:	1a24      	subs	r4, r4, r0
    2214:	9303      	str	r3, [sp, #12]
    2216:	e79f      	b.n	2158 <__aeabi_ddiv+0x48>
    2218:	4651      	mov	r1, sl
    221a:	465a      	mov	r2, fp
    221c:	4311      	orrs	r1, r2
    221e:	d129      	bne.n	2274 <__aeabi_ddiv+0x164>
    2220:	2200      	movs	r2, #0
    2222:	4693      	mov	fp, r2
    2224:	3202      	adds	r2, #2
    2226:	e7b1      	b.n	218c <__aeabi_ddiv+0x7c>
    2228:	4659      	mov	r1, fp
    222a:	4301      	orrs	r1, r0
    222c:	d01e      	beq.n	226c <__aeabi_ddiv+0x15c>
    222e:	465b      	mov	r3, fp
    2230:	2b00      	cmp	r3, #0
    2232:	d100      	bne.n	2236 <__aeabi_ddiv+0x126>
    2234:	e19e      	b.n	2574 <__aeabi_ddiv+0x464>
    2236:	4658      	mov	r0, fp
    2238:	f001 f920 	bl	347c <__clzsi2>
    223c:	0003      	movs	r3, r0
    223e:	3b0b      	subs	r3, #11
    2240:	2b1c      	cmp	r3, #28
    2242:	dd00      	ble.n	2246 <__aeabi_ddiv+0x136>
    2244:	e18f      	b.n	2566 <__aeabi_ddiv+0x456>
    2246:	0002      	movs	r2, r0
    2248:	4659      	mov	r1, fp
    224a:	3a08      	subs	r2, #8
    224c:	4091      	lsls	r1, r2
    224e:	468b      	mov	fp, r1
    2250:	211d      	movs	r1, #29
    2252:	1acb      	subs	r3, r1, r3
    2254:	4651      	mov	r1, sl
    2256:	40d9      	lsrs	r1, r3
    2258:	000b      	movs	r3, r1
    225a:	4659      	mov	r1, fp
    225c:	430b      	orrs	r3, r1
    225e:	4651      	mov	r1, sl
    2260:	469b      	mov	fp, r3
    2262:	4091      	lsls	r1, r2
    2264:	4b26      	ldr	r3, [pc, #152]	; (2300 <__aeabi_ddiv+0x1f0>)
    2266:	2200      	movs	r2, #0
    2268:	1a1b      	subs	r3, r3, r0
    226a:	e78f      	b.n	218c <__aeabi_ddiv+0x7c>
    226c:	2300      	movs	r3, #0
    226e:	2201      	movs	r2, #1
    2270:	469b      	mov	fp, r3
    2272:	e78b      	b.n	218c <__aeabi_ddiv+0x7c>
    2274:	4651      	mov	r1, sl
    2276:	2203      	movs	r2, #3
    2278:	e788      	b.n	218c <__aeabi_ddiv+0x7c>
    227a:	2300      	movs	r3, #0
    227c:	4698      	mov	r8, r3
    227e:	3301      	adds	r3, #1
    2280:	2604      	movs	r6, #4
    2282:	2400      	movs	r4, #0
    2284:	9303      	str	r3, [sp, #12]
    2286:	e767      	b.n	2158 <__aeabi_ddiv+0x48>
    2288:	2303      	movs	r3, #3
    228a:	46b1      	mov	r9, r6
    228c:	9303      	str	r3, [sp, #12]
    228e:	260c      	movs	r6, #12
    2290:	e762      	b.n	2158 <__aeabi_ddiv+0x48>
    2292:	2a03      	cmp	r2, #3
    2294:	d100      	bne.n	2298 <__aeabi_ddiv+0x188>
    2296:	e25c      	b.n	2752 <__aeabi_ddiv+0x642>
    2298:	9b01      	ldr	r3, [sp, #4]
    229a:	2a01      	cmp	r2, #1
    229c:	d000      	beq.n	22a0 <__aeabi_ddiv+0x190>
    229e:	e1e4      	b.n	266a <__aeabi_ddiv+0x55a>
    22a0:	4013      	ands	r3, r2
    22a2:	469c      	mov	ip, r3
    22a4:	2300      	movs	r3, #0
    22a6:	2400      	movs	r4, #0
    22a8:	2200      	movs	r2, #0
    22aa:	4698      	mov	r8, r3
    22ac:	2100      	movs	r1, #0
    22ae:	0312      	lsls	r2, r2, #12
    22b0:	0b13      	lsrs	r3, r2, #12
    22b2:	0d0a      	lsrs	r2, r1, #20
    22b4:	0512      	lsls	r2, r2, #20
    22b6:	431a      	orrs	r2, r3
    22b8:	0523      	lsls	r3, r4, #20
    22ba:	4c12      	ldr	r4, [pc, #72]	; (2304 <__aeabi_ddiv+0x1f4>)
    22bc:	4640      	mov	r0, r8
    22be:	4022      	ands	r2, r4
    22c0:	4313      	orrs	r3, r2
    22c2:	4662      	mov	r2, ip
    22c4:	005b      	lsls	r3, r3, #1
    22c6:	07d2      	lsls	r2, r2, #31
    22c8:	085b      	lsrs	r3, r3, #1
    22ca:	4313      	orrs	r3, r2
    22cc:	0019      	movs	r1, r3
    22ce:	b007      	add	sp, #28
    22d0:	bc3c      	pop	{r2, r3, r4, r5}
    22d2:	4690      	mov	r8, r2
    22d4:	4699      	mov	r9, r3
    22d6:	46a2      	mov	sl, r4
    22d8:	46ab      	mov	fp, r5
    22da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22dc:	2300      	movs	r3, #0
    22de:	2280      	movs	r2, #128	; 0x80
    22e0:	469c      	mov	ip, r3
    22e2:	0312      	lsls	r2, r2, #12
    22e4:	4698      	mov	r8, r3
    22e6:	4c03      	ldr	r4, [pc, #12]	; (22f4 <__aeabi_ddiv+0x1e4>)
    22e8:	e7e0      	b.n	22ac <__aeabi_ddiv+0x19c>
    22ea:	2300      	movs	r3, #0
    22ec:	4c01      	ldr	r4, [pc, #4]	; (22f4 <__aeabi_ddiv+0x1e4>)
    22ee:	2200      	movs	r2, #0
    22f0:	4698      	mov	r8, r3
    22f2:	e7db      	b.n	22ac <__aeabi_ddiv+0x19c>
    22f4:	000007ff 	.word	0x000007ff
    22f8:	fffffc01 	.word	0xfffffc01
    22fc:	00005168 	.word	0x00005168
    2300:	fffffc0d 	.word	0xfffffc0d
    2304:	800fffff 	.word	0x800fffff
    2308:	45d9      	cmp	r9, fp
    230a:	d900      	bls.n	230e <__aeabi_ddiv+0x1fe>
    230c:	e139      	b.n	2582 <__aeabi_ddiv+0x472>
    230e:	d100      	bne.n	2312 <__aeabi_ddiv+0x202>
    2310:	e134      	b.n	257c <__aeabi_ddiv+0x46c>
    2312:	2300      	movs	r3, #0
    2314:	4646      	mov	r6, r8
    2316:	464d      	mov	r5, r9
    2318:	469a      	mov	sl, r3
    231a:	3c01      	subs	r4, #1
    231c:	465b      	mov	r3, fp
    231e:	0e0a      	lsrs	r2, r1, #24
    2320:	021b      	lsls	r3, r3, #8
    2322:	431a      	orrs	r2, r3
    2324:	020b      	lsls	r3, r1, #8
    2326:	0c17      	lsrs	r7, r2, #16
    2328:	9303      	str	r3, [sp, #12]
    232a:	0413      	lsls	r3, r2, #16
    232c:	0c1b      	lsrs	r3, r3, #16
    232e:	0039      	movs	r1, r7
    2330:	0028      	movs	r0, r5
    2332:	4690      	mov	r8, r2
    2334:	9301      	str	r3, [sp, #4]
    2336:	f7ff fe41 	bl	1fbc <__udivsi3>
    233a:	0002      	movs	r2, r0
    233c:	9b01      	ldr	r3, [sp, #4]
    233e:	4683      	mov	fp, r0
    2340:	435a      	muls	r2, r3
    2342:	0028      	movs	r0, r5
    2344:	0039      	movs	r1, r7
    2346:	4691      	mov	r9, r2
    2348:	f7ff febe 	bl	20c8 <__aeabi_uidivmod>
    234c:	0c35      	lsrs	r5, r6, #16
    234e:	0409      	lsls	r1, r1, #16
    2350:	430d      	orrs	r5, r1
    2352:	45a9      	cmp	r9, r5
    2354:	d90d      	bls.n	2372 <__aeabi_ddiv+0x262>
    2356:	465b      	mov	r3, fp
    2358:	4445      	add	r5, r8
    235a:	3b01      	subs	r3, #1
    235c:	45a8      	cmp	r8, r5
    235e:	d900      	bls.n	2362 <__aeabi_ddiv+0x252>
    2360:	e13a      	b.n	25d8 <__aeabi_ddiv+0x4c8>
    2362:	45a9      	cmp	r9, r5
    2364:	d800      	bhi.n	2368 <__aeabi_ddiv+0x258>
    2366:	e137      	b.n	25d8 <__aeabi_ddiv+0x4c8>
    2368:	2302      	movs	r3, #2
    236a:	425b      	negs	r3, r3
    236c:	469c      	mov	ip, r3
    236e:	4445      	add	r5, r8
    2370:	44e3      	add	fp, ip
    2372:	464b      	mov	r3, r9
    2374:	1aeb      	subs	r3, r5, r3
    2376:	0039      	movs	r1, r7
    2378:	0018      	movs	r0, r3
    237a:	9304      	str	r3, [sp, #16]
    237c:	f7ff fe1e 	bl	1fbc <__udivsi3>
    2380:	9b01      	ldr	r3, [sp, #4]
    2382:	0005      	movs	r5, r0
    2384:	4343      	muls	r3, r0
    2386:	0039      	movs	r1, r7
    2388:	9804      	ldr	r0, [sp, #16]
    238a:	4699      	mov	r9, r3
    238c:	f7ff fe9c 	bl	20c8 <__aeabi_uidivmod>
    2390:	0433      	lsls	r3, r6, #16
    2392:	0409      	lsls	r1, r1, #16
    2394:	0c1b      	lsrs	r3, r3, #16
    2396:	430b      	orrs	r3, r1
    2398:	4599      	cmp	r9, r3
    239a:	d909      	bls.n	23b0 <__aeabi_ddiv+0x2a0>
    239c:	4443      	add	r3, r8
    239e:	1e6a      	subs	r2, r5, #1
    23a0:	4598      	cmp	r8, r3
    23a2:	d900      	bls.n	23a6 <__aeabi_ddiv+0x296>
    23a4:	e11a      	b.n	25dc <__aeabi_ddiv+0x4cc>
    23a6:	4599      	cmp	r9, r3
    23a8:	d800      	bhi.n	23ac <__aeabi_ddiv+0x29c>
    23aa:	e117      	b.n	25dc <__aeabi_ddiv+0x4cc>
    23ac:	3d02      	subs	r5, #2
    23ae:	4443      	add	r3, r8
    23b0:	464a      	mov	r2, r9
    23b2:	1a9b      	subs	r3, r3, r2
    23b4:	465a      	mov	r2, fp
    23b6:	0412      	lsls	r2, r2, #16
    23b8:	432a      	orrs	r2, r5
    23ba:	9903      	ldr	r1, [sp, #12]
    23bc:	4693      	mov	fp, r2
    23be:	0c10      	lsrs	r0, r2, #16
    23c0:	0c0a      	lsrs	r2, r1, #16
    23c2:	4691      	mov	r9, r2
    23c4:	0409      	lsls	r1, r1, #16
    23c6:	465a      	mov	r2, fp
    23c8:	0c09      	lsrs	r1, r1, #16
    23ca:	464e      	mov	r6, r9
    23cc:	000d      	movs	r5, r1
    23ce:	0412      	lsls	r2, r2, #16
    23d0:	0c12      	lsrs	r2, r2, #16
    23d2:	4345      	muls	r5, r0
    23d4:	9105      	str	r1, [sp, #20]
    23d6:	4351      	muls	r1, r2
    23d8:	4372      	muls	r2, r6
    23da:	4370      	muls	r0, r6
    23dc:	1952      	adds	r2, r2, r5
    23de:	0c0e      	lsrs	r6, r1, #16
    23e0:	18b2      	adds	r2, r6, r2
    23e2:	4295      	cmp	r5, r2
    23e4:	d903      	bls.n	23ee <__aeabi_ddiv+0x2de>
    23e6:	2580      	movs	r5, #128	; 0x80
    23e8:	026d      	lsls	r5, r5, #9
    23ea:	46ac      	mov	ip, r5
    23ec:	4460      	add	r0, ip
    23ee:	0c15      	lsrs	r5, r2, #16
    23f0:	0409      	lsls	r1, r1, #16
    23f2:	0412      	lsls	r2, r2, #16
    23f4:	0c09      	lsrs	r1, r1, #16
    23f6:	1828      	adds	r0, r5, r0
    23f8:	1852      	adds	r2, r2, r1
    23fa:	4283      	cmp	r3, r0
    23fc:	d200      	bcs.n	2400 <__aeabi_ddiv+0x2f0>
    23fe:	e0ce      	b.n	259e <__aeabi_ddiv+0x48e>
    2400:	d100      	bne.n	2404 <__aeabi_ddiv+0x2f4>
    2402:	e0c8      	b.n	2596 <__aeabi_ddiv+0x486>
    2404:	1a1d      	subs	r5, r3, r0
    2406:	4653      	mov	r3, sl
    2408:	1a9e      	subs	r6, r3, r2
    240a:	45b2      	cmp	sl, r6
    240c:	4192      	sbcs	r2, r2
    240e:	4252      	negs	r2, r2
    2410:	1aab      	subs	r3, r5, r2
    2412:	469a      	mov	sl, r3
    2414:	4598      	cmp	r8, r3
    2416:	d100      	bne.n	241a <__aeabi_ddiv+0x30a>
    2418:	e117      	b.n	264a <__aeabi_ddiv+0x53a>
    241a:	0039      	movs	r1, r7
    241c:	0018      	movs	r0, r3
    241e:	f7ff fdcd 	bl	1fbc <__udivsi3>
    2422:	9b01      	ldr	r3, [sp, #4]
    2424:	0005      	movs	r5, r0
    2426:	4343      	muls	r3, r0
    2428:	0039      	movs	r1, r7
    242a:	4650      	mov	r0, sl
    242c:	9304      	str	r3, [sp, #16]
    242e:	f7ff fe4b 	bl	20c8 <__aeabi_uidivmod>
    2432:	9804      	ldr	r0, [sp, #16]
    2434:	040b      	lsls	r3, r1, #16
    2436:	0c31      	lsrs	r1, r6, #16
    2438:	4319      	orrs	r1, r3
    243a:	4288      	cmp	r0, r1
    243c:	d909      	bls.n	2452 <__aeabi_ddiv+0x342>
    243e:	4441      	add	r1, r8
    2440:	1e6b      	subs	r3, r5, #1
    2442:	4588      	cmp	r8, r1
    2444:	d900      	bls.n	2448 <__aeabi_ddiv+0x338>
    2446:	e107      	b.n	2658 <__aeabi_ddiv+0x548>
    2448:	4288      	cmp	r0, r1
    244a:	d800      	bhi.n	244e <__aeabi_ddiv+0x33e>
    244c:	e104      	b.n	2658 <__aeabi_ddiv+0x548>
    244e:	3d02      	subs	r5, #2
    2450:	4441      	add	r1, r8
    2452:	9b04      	ldr	r3, [sp, #16]
    2454:	1acb      	subs	r3, r1, r3
    2456:	0018      	movs	r0, r3
    2458:	0039      	movs	r1, r7
    245a:	9304      	str	r3, [sp, #16]
    245c:	f7ff fdae 	bl	1fbc <__udivsi3>
    2460:	9b01      	ldr	r3, [sp, #4]
    2462:	4682      	mov	sl, r0
    2464:	4343      	muls	r3, r0
    2466:	0039      	movs	r1, r7
    2468:	9804      	ldr	r0, [sp, #16]
    246a:	9301      	str	r3, [sp, #4]
    246c:	f7ff fe2c 	bl	20c8 <__aeabi_uidivmod>
    2470:	9801      	ldr	r0, [sp, #4]
    2472:	040b      	lsls	r3, r1, #16
    2474:	0431      	lsls	r1, r6, #16
    2476:	0c09      	lsrs	r1, r1, #16
    2478:	4319      	orrs	r1, r3
    247a:	4288      	cmp	r0, r1
    247c:	d90d      	bls.n	249a <__aeabi_ddiv+0x38a>
    247e:	4653      	mov	r3, sl
    2480:	4441      	add	r1, r8
    2482:	3b01      	subs	r3, #1
    2484:	4588      	cmp	r8, r1
    2486:	d900      	bls.n	248a <__aeabi_ddiv+0x37a>
    2488:	e0e8      	b.n	265c <__aeabi_ddiv+0x54c>
    248a:	4288      	cmp	r0, r1
    248c:	d800      	bhi.n	2490 <__aeabi_ddiv+0x380>
    248e:	e0e5      	b.n	265c <__aeabi_ddiv+0x54c>
    2490:	2302      	movs	r3, #2
    2492:	425b      	negs	r3, r3
    2494:	469c      	mov	ip, r3
    2496:	4441      	add	r1, r8
    2498:	44e2      	add	sl, ip
    249a:	9b01      	ldr	r3, [sp, #4]
    249c:	042d      	lsls	r5, r5, #16
    249e:	1ace      	subs	r6, r1, r3
    24a0:	4651      	mov	r1, sl
    24a2:	4329      	orrs	r1, r5
    24a4:	9d05      	ldr	r5, [sp, #20]
    24a6:	464f      	mov	r7, r9
    24a8:	002a      	movs	r2, r5
    24aa:	040b      	lsls	r3, r1, #16
    24ac:	0c08      	lsrs	r0, r1, #16
    24ae:	0c1b      	lsrs	r3, r3, #16
    24b0:	435a      	muls	r2, r3
    24b2:	4345      	muls	r5, r0
    24b4:	437b      	muls	r3, r7
    24b6:	4378      	muls	r0, r7
    24b8:	195b      	adds	r3, r3, r5
    24ba:	0c17      	lsrs	r7, r2, #16
    24bc:	18fb      	adds	r3, r7, r3
    24be:	429d      	cmp	r5, r3
    24c0:	d903      	bls.n	24ca <__aeabi_ddiv+0x3ba>
    24c2:	2580      	movs	r5, #128	; 0x80
    24c4:	026d      	lsls	r5, r5, #9
    24c6:	46ac      	mov	ip, r5
    24c8:	4460      	add	r0, ip
    24ca:	0c1d      	lsrs	r5, r3, #16
    24cc:	0412      	lsls	r2, r2, #16
    24ce:	041b      	lsls	r3, r3, #16
    24d0:	0c12      	lsrs	r2, r2, #16
    24d2:	1828      	adds	r0, r5, r0
    24d4:	189b      	adds	r3, r3, r2
    24d6:	4286      	cmp	r6, r0
    24d8:	d200      	bcs.n	24dc <__aeabi_ddiv+0x3cc>
    24da:	e093      	b.n	2604 <__aeabi_ddiv+0x4f4>
    24dc:	d100      	bne.n	24e0 <__aeabi_ddiv+0x3d0>
    24de:	e08e      	b.n	25fe <__aeabi_ddiv+0x4ee>
    24e0:	2301      	movs	r3, #1
    24e2:	4319      	orrs	r1, r3
    24e4:	4ba0      	ldr	r3, [pc, #640]	; (2768 <__aeabi_ddiv+0x658>)
    24e6:	18e3      	adds	r3, r4, r3
    24e8:	2b00      	cmp	r3, #0
    24ea:	dc00      	bgt.n	24ee <__aeabi_ddiv+0x3de>
    24ec:	e099      	b.n	2622 <__aeabi_ddiv+0x512>
    24ee:	074a      	lsls	r2, r1, #29
    24f0:	d000      	beq.n	24f4 <__aeabi_ddiv+0x3e4>
    24f2:	e09e      	b.n	2632 <__aeabi_ddiv+0x522>
    24f4:	465a      	mov	r2, fp
    24f6:	01d2      	lsls	r2, r2, #7
    24f8:	d506      	bpl.n	2508 <__aeabi_ddiv+0x3f8>
    24fa:	465a      	mov	r2, fp
    24fc:	4b9b      	ldr	r3, [pc, #620]	; (276c <__aeabi_ddiv+0x65c>)
    24fe:	401a      	ands	r2, r3
    2500:	2380      	movs	r3, #128	; 0x80
    2502:	4693      	mov	fp, r2
    2504:	00db      	lsls	r3, r3, #3
    2506:	18e3      	adds	r3, r4, r3
    2508:	4a99      	ldr	r2, [pc, #612]	; (2770 <__aeabi_ddiv+0x660>)
    250a:	4293      	cmp	r3, r2
    250c:	dd68      	ble.n	25e0 <__aeabi_ddiv+0x4d0>
    250e:	2301      	movs	r3, #1
    2510:	9a02      	ldr	r2, [sp, #8]
    2512:	4c98      	ldr	r4, [pc, #608]	; (2774 <__aeabi_ddiv+0x664>)
    2514:	401a      	ands	r2, r3
    2516:	2300      	movs	r3, #0
    2518:	4694      	mov	ip, r2
    251a:	4698      	mov	r8, r3
    251c:	2200      	movs	r2, #0
    251e:	e6c5      	b.n	22ac <__aeabi_ddiv+0x19c>
    2520:	2280      	movs	r2, #128	; 0x80
    2522:	464b      	mov	r3, r9
    2524:	0312      	lsls	r2, r2, #12
    2526:	4213      	tst	r3, r2
    2528:	d00a      	beq.n	2540 <__aeabi_ddiv+0x430>
    252a:	465b      	mov	r3, fp
    252c:	4213      	tst	r3, r2
    252e:	d106      	bne.n	253e <__aeabi_ddiv+0x42e>
    2530:	431a      	orrs	r2, r3
    2532:	0312      	lsls	r2, r2, #12
    2534:	0b12      	lsrs	r2, r2, #12
    2536:	46ac      	mov	ip, r5
    2538:	4688      	mov	r8, r1
    253a:	4c8e      	ldr	r4, [pc, #568]	; (2774 <__aeabi_ddiv+0x664>)
    253c:	e6b6      	b.n	22ac <__aeabi_ddiv+0x19c>
    253e:	464b      	mov	r3, r9
    2540:	431a      	orrs	r2, r3
    2542:	0312      	lsls	r2, r2, #12
    2544:	0b12      	lsrs	r2, r2, #12
    2546:	46bc      	mov	ip, r7
    2548:	4c8a      	ldr	r4, [pc, #552]	; (2774 <__aeabi_ddiv+0x664>)
    254a:	e6af      	b.n	22ac <__aeabi_ddiv+0x19c>
    254c:	0003      	movs	r3, r0
    254e:	465a      	mov	r2, fp
    2550:	3b28      	subs	r3, #40	; 0x28
    2552:	409a      	lsls	r2, r3
    2554:	2300      	movs	r3, #0
    2556:	4691      	mov	r9, r2
    2558:	4698      	mov	r8, r3
    255a:	e657      	b.n	220c <__aeabi_ddiv+0xfc>
    255c:	4658      	mov	r0, fp
    255e:	f000 ff8d 	bl	347c <__clzsi2>
    2562:	3020      	adds	r0, #32
    2564:	e640      	b.n	21e8 <__aeabi_ddiv+0xd8>
    2566:	0003      	movs	r3, r0
    2568:	4652      	mov	r2, sl
    256a:	3b28      	subs	r3, #40	; 0x28
    256c:	409a      	lsls	r2, r3
    256e:	2100      	movs	r1, #0
    2570:	4693      	mov	fp, r2
    2572:	e677      	b.n	2264 <__aeabi_ddiv+0x154>
    2574:	f000 ff82 	bl	347c <__clzsi2>
    2578:	3020      	adds	r0, #32
    257a:	e65f      	b.n	223c <__aeabi_ddiv+0x12c>
    257c:	4588      	cmp	r8, r1
    257e:	d200      	bcs.n	2582 <__aeabi_ddiv+0x472>
    2580:	e6c7      	b.n	2312 <__aeabi_ddiv+0x202>
    2582:	464b      	mov	r3, r9
    2584:	07de      	lsls	r6, r3, #31
    2586:	085d      	lsrs	r5, r3, #1
    2588:	4643      	mov	r3, r8
    258a:	085b      	lsrs	r3, r3, #1
    258c:	431e      	orrs	r6, r3
    258e:	4643      	mov	r3, r8
    2590:	07db      	lsls	r3, r3, #31
    2592:	469a      	mov	sl, r3
    2594:	e6c2      	b.n	231c <__aeabi_ddiv+0x20c>
    2596:	2500      	movs	r5, #0
    2598:	4592      	cmp	sl, r2
    259a:	d300      	bcc.n	259e <__aeabi_ddiv+0x48e>
    259c:	e733      	b.n	2406 <__aeabi_ddiv+0x2f6>
    259e:	9e03      	ldr	r6, [sp, #12]
    25a0:	4659      	mov	r1, fp
    25a2:	46b4      	mov	ip, r6
    25a4:	44e2      	add	sl, ip
    25a6:	45b2      	cmp	sl, r6
    25a8:	41ad      	sbcs	r5, r5
    25aa:	426d      	negs	r5, r5
    25ac:	4445      	add	r5, r8
    25ae:	18eb      	adds	r3, r5, r3
    25b0:	3901      	subs	r1, #1
    25b2:	4598      	cmp	r8, r3
    25b4:	d207      	bcs.n	25c6 <__aeabi_ddiv+0x4b6>
    25b6:	4298      	cmp	r0, r3
    25b8:	d900      	bls.n	25bc <__aeabi_ddiv+0x4ac>
    25ba:	e07f      	b.n	26bc <__aeabi_ddiv+0x5ac>
    25bc:	d100      	bne.n	25c0 <__aeabi_ddiv+0x4b0>
    25be:	e0bc      	b.n	273a <__aeabi_ddiv+0x62a>
    25c0:	1a1d      	subs	r5, r3, r0
    25c2:	468b      	mov	fp, r1
    25c4:	e71f      	b.n	2406 <__aeabi_ddiv+0x2f6>
    25c6:	4598      	cmp	r8, r3
    25c8:	d1fa      	bne.n	25c0 <__aeabi_ddiv+0x4b0>
    25ca:	9d03      	ldr	r5, [sp, #12]
    25cc:	4555      	cmp	r5, sl
    25ce:	d9f2      	bls.n	25b6 <__aeabi_ddiv+0x4a6>
    25d0:	4643      	mov	r3, r8
    25d2:	468b      	mov	fp, r1
    25d4:	1a1d      	subs	r5, r3, r0
    25d6:	e716      	b.n	2406 <__aeabi_ddiv+0x2f6>
    25d8:	469b      	mov	fp, r3
    25da:	e6ca      	b.n	2372 <__aeabi_ddiv+0x262>
    25dc:	0015      	movs	r5, r2
    25de:	e6e7      	b.n	23b0 <__aeabi_ddiv+0x2a0>
    25e0:	465a      	mov	r2, fp
    25e2:	08c9      	lsrs	r1, r1, #3
    25e4:	0752      	lsls	r2, r2, #29
    25e6:	430a      	orrs	r2, r1
    25e8:	055b      	lsls	r3, r3, #21
    25ea:	4690      	mov	r8, r2
    25ec:	0d5c      	lsrs	r4, r3, #21
    25ee:	465a      	mov	r2, fp
    25f0:	2301      	movs	r3, #1
    25f2:	9902      	ldr	r1, [sp, #8]
    25f4:	0252      	lsls	r2, r2, #9
    25f6:	4019      	ands	r1, r3
    25f8:	0b12      	lsrs	r2, r2, #12
    25fa:	468c      	mov	ip, r1
    25fc:	e656      	b.n	22ac <__aeabi_ddiv+0x19c>
    25fe:	2b00      	cmp	r3, #0
    2600:	d100      	bne.n	2604 <__aeabi_ddiv+0x4f4>
    2602:	e76f      	b.n	24e4 <__aeabi_ddiv+0x3d4>
    2604:	4446      	add	r6, r8
    2606:	1e4a      	subs	r2, r1, #1
    2608:	45b0      	cmp	r8, r6
    260a:	d929      	bls.n	2660 <__aeabi_ddiv+0x550>
    260c:	0011      	movs	r1, r2
    260e:	4286      	cmp	r6, r0
    2610:	d000      	beq.n	2614 <__aeabi_ddiv+0x504>
    2612:	e765      	b.n	24e0 <__aeabi_ddiv+0x3d0>
    2614:	9a03      	ldr	r2, [sp, #12]
    2616:	4293      	cmp	r3, r2
    2618:	d000      	beq.n	261c <__aeabi_ddiv+0x50c>
    261a:	e761      	b.n	24e0 <__aeabi_ddiv+0x3d0>
    261c:	e762      	b.n	24e4 <__aeabi_ddiv+0x3d4>
    261e:	2101      	movs	r1, #1
    2620:	4249      	negs	r1, r1
    2622:	2001      	movs	r0, #1
    2624:	1ac2      	subs	r2, r0, r3
    2626:	2a38      	cmp	r2, #56	; 0x38
    2628:	dd21      	ble.n	266e <__aeabi_ddiv+0x55e>
    262a:	9b02      	ldr	r3, [sp, #8]
    262c:	4003      	ands	r3, r0
    262e:	469c      	mov	ip, r3
    2630:	e638      	b.n	22a4 <__aeabi_ddiv+0x194>
    2632:	220f      	movs	r2, #15
    2634:	400a      	ands	r2, r1
    2636:	2a04      	cmp	r2, #4
    2638:	d100      	bne.n	263c <__aeabi_ddiv+0x52c>
    263a:	e75b      	b.n	24f4 <__aeabi_ddiv+0x3e4>
    263c:	000a      	movs	r2, r1
    263e:	1d11      	adds	r1, r2, #4
    2640:	4291      	cmp	r1, r2
    2642:	4192      	sbcs	r2, r2
    2644:	4252      	negs	r2, r2
    2646:	4493      	add	fp, r2
    2648:	e754      	b.n	24f4 <__aeabi_ddiv+0x3e4>
    264a:	4b47      	ldr	r3, [pc, #284]	; (2768 <__aeabi_ddiv+0x658>)
    264c:	18e3      	adds	r3, r4, r3
    264e:	2b00      	cmp	r3, #0
    2650:	dde5      	ble.n	261e <__aeabi_ddiv+0x50e>
    2652:	2201      	movs	r2, #1
    2654:	4252      	negs	r2, r2
    2656:	e7f2      	b.n	263e <__aeabi_ddiv+0x52e>
    2658:	001d      	movs	r5, r3
    265a:	e6fa      	b.n	2452 <__aeabi_ddiv+0x342>
    265c:	469a      	mov	sl, r3
    265e:	e71c      	b.n	249a <__aeabi_ddiv+0x38a>
    2660:	42b0      	cmp	r0, r6
    2662:	d839      	bhi.n	26d8 <__aeabi_ddiv+0x5c8>
    2664:	d06e      	beq.n	2744 <__aeabi_ddiv+0x634>
    2666:	0011      	movs	r1, r2
    2668:	e73a      	b.n	24e0 <__aeabi_ddiv+0x3d0>
    266a:	9302      	str	r3, [sp, #8]
    266c:	e73a      	b.n	24e4 <__aeabi_ddiv+0x3d4>
    266e:	2a1f      	cmp	r2, #31
    2670:	dc3c      	bgt.n	26ec <__aeabi_ddiv+0x5dc>
    2672:	2320      	movs	r3, #32
    2674:	1a9b      	subs	r3, r3, r2
    2676:	000c      	movs	r4, r1
    2678:	4658      	mov	r0, fp
    267a:	4099      	lsls	r1, r3
    267c:	4098      	lsls	r0, r3
    267e:	1e4b      	subs	r3, r1, #1
    2680:	4199      	sbcs	r1, r3
    2682:	465b      	mov	r3, fp
    2684:	40d4      	lsrs	r4, r2
    2686:	40d3      	lsrs	r3, r2
    2688:	4320      	orrs	r0, r4
    268a:	4308      	orrs	r0, r1
    268c:	001a      	movs	r2, r3
    268e:	0743      	lsls	r3, r0, #29
    2690:	d009      	beq.n	26a6 <__aeabi_ddiv+0x596>
    2692:	230f      	movs	r3, #15
    2694:	4003      	ands	r3, r0
    2696:	2b04      	cmp	r3, #4
    2698:	d005      	beq.n	26a6 <__aeabi_ddiv+0x596>
    269a:	0001      	movs	r1, r0
    269c:	1d08      	adds	r0, r1, #4
    269e:	4288      	cmp	r0, r1
    26a0:	419b      	sbcs	r3, r3
    26a2:	425b      	negs	r3, r3
    26a4:	18d2      	adds	r2, r2, r3
    26a6:	0213      	lsls	r3, r2, #8
    26a8:	d53a      	bpl.n	2720 <__aeabi_ddiv+0x610>
    26aa:	2301      	movs	r3, #1
    26ac:	9a02      	ldr	r2, [sp, #8]
    26ae:	2401      	movs	r4, #1
    26b0:	401a      	ands	r2, r3
    26b2:	2300      	movs	r3, #0
    26b4:	4694      	mov	ip, r2
    26b6:	4698      	mov	r8, r3
    26b8:	2200      	movs	r2, #0
    26ba:	e5f7      	b.n	22ac <__aeabi_ddiv+0x19c>
    26bc:	2102      	movs	r1, #2
    26be:	4249      	negs	r1, r1
    26c0:	468c      	mov	ip, r1
    26c2:	9d03      	ldr	r5, [sp, #12]
    26c4:	44e3      	add	fp, ip
    26c6:	46ac      	mov	ip, r5
    26c8:	44e2      	add	sl, ip
    26ca:	45aa      	cmp	sl, r5
    26cc:	41ad      	sbcs	r5, r5
    26ce:	426d      	negs	r5, r5
    26d0:	4445      	add	r5, r8
    26d2:	18ed      	adds	r5, r5, r3
    26d4:	1a2d      	subs	r5, r5, r0
    26d6:	e696      	b.n	2406 <__aeabi_ddiv+0x2f6>
    26d8:	1e8a      	subs	r2, r1, #2
    26da:	9903      	ldr	r1, [sp, #12]
    26dc:	004d      	lsls	r5, r1, #1
    26de:	428d      	cmp	r5, r1
    26e0:	4189      	sbcs	r1, r1
    26e2:	4249      	negs	r1, r1
    26e4:	4441      	add	r1, r8
    26e6:	1876      	adds	r6, r6, r1
    26e8:	9503      	str	r5, [sp, #12]
    26ea:	e78f      	b.n	260c <__aeabi_ddiv+0x4fc>
    26ec:	201f      	movs	r0, #31
    26ee:	4240      	negs	r0, r0
    26f0:	1ac3      	subs	r3, r0, r3
    26f2:	4658      	mov	r0, fp
    26f4:	40d8      	lsrs	r0, r3
    26f6:	0003      	movs	r3, r0
    26f8:	2a20      	cmp	r2, #32
    26fa:	d028      	beq.n	274e <__aeabi_ddiv+0x63e>
    26fc:	2040      	movs	r0, #64	; 0x40
    26fe:	465d      	mov	r5, fp
    2700:	1a82      	subs	r2, r0, r2
    2702:	4095      	lsls	r5, r2
    2704:	4329      	orrs	r1, r5
    2706:	1e4a      	subs	r2, r1, #1
    2708:	4191      	sbcs	r1, r2
    270a:	4319      	orrs	r1, r3
    270c:	2307      	movs	r3, #7
    270e:	2200      	movs	r2, #0
    2710:	400b      	ands	r3, r1
    2712:	d009      	beq.n	2728 <__aeabi_ddiv+0x618>
    2714:	230f      	movs	r3, #15
    2716:	2200      	movs	r2, #0
    2718:	400b      	ands	r3, r1
    271a:	0008      	movs	r0, r1
    271c:	2b04      	cmp	r3, #4
    271e:	d1bd      	bne.n	269c <__aeabi_ddiv+0x58c>
    2720:	0001      	movs	r1, r0
    2722:	0753      	lsls	r3, r2, #29
    2724:	0252      	lsls	r2, r2, #9
    2726:	0b12      	lsrs	r2, r2, #12
    2728:	08c9      	lsrs	r1, r1, #3
    272a:	4319      	orrs	r1, r3
    272c:	2301      	movs	r3, #1
    272e:	4688      	mov	r8, r1
    2730:	9902      	ldr	r1, [sp, #8]
    2732:	2400      	movs	r4, #0
    2734:	4019      	ands	r1, r3
    2736:	468c      	mov	ip, r1
    2738:	e5b8      	b.n	22ac <__aeabi_ddiv+0x19c>
    273a:	4552      	cmp	r2, sl
    273c:	d8be      	bhi.n	26bc <__aeabi_ddiv+0x5ac>
    273e:	468b      	mov	fp, r1
    2740:	2500      	movs	r5, #0
    2742:	e660      	b.n	2406 <__aeabi_ddiv+0x2f6>
    2744:	9d03      	ldr	r5, [sp, #12]
    2746:	429d      	cmp	r5, r3
    2748:	d3c6      	bcc.n	26d8 <__aeabi_ddiv+0x5c8>
    274a:	0011      	movs	r1, r2
    274c:	e762      	b.n	2614 <__aeabi_ddiv+0x504>
    274e:	2500      	movs	r5, #0
    2750:	e7d8      	b.n	2704 <__aeabi_ddiv+0x5f4>
    2752:	2280      	movs	r2, #128	; 0x80
    2754:	465b      	mov	r3, fp
    2756:	0312      	lsls	r2, r2, #12
    2758:	431a      	orrs	r2, r3
    275a:	9b01      	ldr	r3, [sp, #4]
    275c:	0312      	lsls	r2, r2, #12
    275e:	0b12      	lsrs	r2, r2, #12
    2760:	469c      	mov	ip, r3
    2762:	4688      	mov	r8, r1
    2764:	4c03      	ldr	r4, [pc, #12]	; (2774 <__aeabi_ddiv+0x664>)
    2766:	e5a1      	b.n	22ac <__aeabi_ddiv+0x19c>
    2768:	000003ff 	.word	0x000003ff
    276c:	feffffff 	.word	0xfeffffff
    2770:	000007fe 	.word	0x000007fe
    2774:	000007ff 	.word	0x000007ff

00002778 <__aeabi_dmul>:
    2778:	b5f0      	push	{r4, r5, r6, r7, lr}
    277a:	4657      	mov	r7, sl
    277c:	4645      	mov	r5, r8
    277e:	46de      	mov	lr, fp
    2780:	464e      	mov	r6, r9
    2782:	b5e0      	push	{r5, r6, r7, lr}
    2784:	030c      	lsls	r4, r1, #12
    2786:	4698      	mov	r8, r3
    2788:	004e      	lsls	r6, r1, #1
    278a:	0b23      	lsrs	r3, r4, #12
    278c:	b087      	sub	sp, #28
    278e:	0007      	movs	r7, r0
    2790:	4692      	mov	sl, r2
    2792:	469b      	mov	fp, r3
    2794:	0d76      	lsrs	r6, r6, #21
    2796:	0fcd      	lsrs	r5, r1, #31
    2798:	2e00      	cmp	r6, #0
    279a:	d06b      	beq.n	2874 <__aeabi_dmul+0xfc>
    279c:	4b6d      	ldr	r3, [pc, #436]	; (2954 <__aeabi_dmul+0x1dc>)
    279e:	429e      	cmp	r6, r3
    27a0:	d035      	beq.n	280e <__aeabi_dmul+0x96>
    27a2:	2480      	movs	r4, #128	; 0x80
    27a4:	465b      	mov	r3, fp
    27a6:	0f42      	lsrs	r2, r0, #29
    27a8:	0424      	lsls	r4, r4, #16
    27aa:	00db      	lsls	r3, r3, #3
    27ac:	4314      	orrs	r4, r2
    27ae:	431c      	orrs	r4, r3
    27b0:	00c3      	lsls	r3, r0, #3
    27b2:	4699      	mov	r9, r3
    27b4:	4b68      	ldr	r3, [pc, #416]	; (2958 <__aeabi_dmul+0x1e0>)
    27b6:	46a3      	mov	fp, r4
    27b8:	469c      	mov	ip, r3
    27ba:	2300      	movs	r3, #0
    27bc:	2700      	movs	r7, #0
    27be:	4466      	add	r6, ip
    27c0:	9302      	str	r3, [sp, #8]
    27c2:	4643      	mov	r3, r8
    27c4:	031c      	lsls	r4, r3, #12
    27c6:	005a      	lsls	r2, r3, #1
    27c8:	0fdb      	lsrs	r3, r3, #31
    27ca:	4650      	mov	r0, sl
    27cc:	0b24      	lsrs	r4, r4, #12
    27ce:	0d52      	lsrs	r2, r2, #21
    27d0:	4698      	mov	r8, r3
    27d2:	d100      	bne.n	27d6 <__aeabi_dmul+0x5e>
    27d4:	e076      	b.n	28c4 <__aeabi_dmul+0x14c>
    27d6:	4b5f      	ldr	r3, [pc, #380]	; (2954 <__aeabi_dmul+0x1dc>)
    27d8:	429a      	cmp	r2, r3
    27da:	d06d      	beq.n	28b8 <__aeabi_dmul+0x140>
    27dc:	2380      	movs	r3, #128	; 0x80
    27de:	0f41      	lsrs	r1, r0, #29
    27e0:	041b      	lsls	r3, r3, #16
    27e2:	430b      	orrs	r3, r1
    27e4:	495c      	ldr	r1, [pc, #368]	; (2958 <__aeabi_dmul+0x1e0>)
    27e6:	00e4      	lsls	r4, r4, #3
    27e8:	468c      	mov	ip, r1
    27ea:	431c      	orrs	r4, r3
    27ec:	00c3      	lsls	r3, r0, #3
    27ee:	2000      	movs	r0, #0
    27f0:	4462      	add	r2, ip
    27f2:	4641      	mov	r1, r8
    27f4:	18b6      	adds	r6, r6, r2
    27f6:	4069      	eors	r1, r5
    27f8:	1c72      	adds	r2, r6, #1
    27fa:	9101      	str	r1, [sp, #4]
    27fc:	4694      	mov	ip, r2
    27fe:	4307      	orrs	r7, r0
    2800:	2f0f      	cmp	r7, #15
    2802:	d900      	bls.n	2806 <__aeabi_dmul+0x8e>
    2804:	e0b0      	b.n	2968 <__aeabi_dmul+0x1f0>
    2806:	4a55      	ldr	r2, [pc, #340]	; (295c <__aeabi_dmul+0x1e4>)
    2808:	00bf      	lsls	r7, r7, #2
    280a:	59d2      	ldr	r2, [r2, r7]
    280c:	4697      	mov	pc, r2
    280e:	465b      	mov	r3, fp
    2810:	4303      	orrs	r3, r0
    2812:	4699      	mov	r9, r3
    2814:	d000      	beq.n	2818 <__aeabi_dmul+0xa0>
    2816:	e087      	b.n	2928 <__aeabi_dmul+0x1b0>
    2818:	2300      	movs	r3, #0
    281a:	469b      	mov	fp, r3
    281c:	3302      	adds	r3, #2
    281e:	2708      	movs	r7, #8
    2820:	9302      	str	r3, [sp, #8]
    2822:	e7ce      	b.n	27c2 <__aeabi_dmul+0x4a>
    2824:	4642      	mov	r2, r8
    2826:	9201      	str	r2, [sp, #4]
    2828:	2802      	cmp	r0, #2
    282a:	d067      	beq.n	28fc <__aeabi_dmul+0x184>
    282c:	2803      	cmp	r0, #3
    282e:	d100      	bne.n	2832 <__aeabi_dmul+0xba>
    2830:	e20e      	b.n	2c50 <__aeabi_dmul+0x4d8>
    2832:	2801      	cmp	r0, #1
    2834:	d000      	beq.n	2838 <__aeabi_dmul+0xc0>
    2836:	e162      	b.n	2afe <__aeabi_dmul+0x386>
    2838:	2300      	movs	r3, #0
    283a:	2400      	movs	r4, #0
    283c:	2200      	movs	r2, #0
    283e:	4699      	mov	r9, r3
    2840:	9901      	ldr	r1, [sp, #4]
    2842:	4001      	ands	r1, r0
    2844:	b2cd      	uxtb	r5, r1
    2846:	2100      	movs	r1, #0
    2848:	0312      	lsls	r2, r2, #12
    284a:	0d0b      	lsrs	r3, r1, #20
    284c:	0b12      	lsrs	r2, r2, #12
    284e:	051b      	lsls	r3, r3, #20
    2850:	4313      	orrs	r3, r2
    2852:	4a43      	ldr	r2, [pc, #268]	; (2960 <__aeabi_dmul+0x1e8>)
    2854:	0524      	lsls	r4, r4, #20
    2856:	4013      	ands	r3, r2
    2858:	431c      	orrs	r4, r3
    285a:	0064      	lsls	r4, r4, #1
    285c:	07ed      	lsls	r5, r5, #31
    285e:	0864      	lsrs	r4, r4, #1
    2860:	432c      	orrs	r4, r5
    2862:	4648      	mov	r0, r9
    2864:	0021      	movs	r1, r4
    2866:	b007      	add	sp, #28
    2868:	bc3c      	pop	{r2, r3, r4, r5}
    286a:	4690      	mov	r8, r2
    286c:	4699      	mov	r9, r3
    286e:	46a2      	mov	sl, r4
    2870:	46ab      	mov	fp, r5
    2872:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2874:	4303      	orrs	r3, r0
    2876:	4699      	mov	r9, r3
    2878:	d04f      	beq.n	291a <__aeabi_dmul+0x1a2>
    287a:	465b      	mov	r3, fp
    287c:	2b00      	cmp	r3, #0
    287e:	d100      	bne.n	2882 <__aeabi_dmul+0x10a>
    2880:	e189      	b.n	2b96 <__aeabi_dmul+0x41e>
    2882:	4658      	mov	r0, fp
    2884:	f000 fdfa 	bl	347c <__clzsi2>
    2888:	0003      	movs	r3, r0
    288a:	3b0b      	subs	r3, #11
    288c:	2b1c      	cmp	r3, #28
    288e:	dd00      	ble.n	2892 <__aeabi_dmul+0x11a>
    2890:	e17a      	b.n	2b88 <__aeabi_dmul+0x410>
    2892:	221d      	movs	r2, #29
    2894:	1ad3      	subs	r3, r2, r3
    2896:	003a      	movs	r2, r7
    2898:	0001      	movs	r1, r0
    289a:	465c      	mov	r4, fp
    289c:	40da      	lsrs	r2, r3
    289e:	3908      	subs	r1, #8
    28a0:	408c      	lsls	r4, r1
    28a2:	0013      	movs	r3, r2
    28a4:	408f      	lsls	r7, r1
    28a6:	4323      	orrs	r3, r4
    28a8:	469b      	mov	fp, r3
    28aa:	46b9      	mov	r9, r7
    28ac:	2300      	movs	r3, #0
    28ae:	4e2d      	ldr	r6, [pc, #180]	; (2964 <__aeabi_dmul+0x1ec>)
    28b0:	2700      	movs	r7, #0
    28b2:	1a36      	subs	r6, r6, r0
    28b4:	9302      	str	r3, [sp, #8]
    28b6:	e784      	b.n	27c2 <__aeabi_dmul+0x4a>
    28b8:	4653      	mov	r3, sl
    28ba:	4323      	orrs	r3, r4
    28bc:	d12a      	bne.n	2914 <__aeabi_dmul+0x19c>
    28be:	2400      	movs	r4, #0
    28c0:	2002      	movs	r0, #2
    28c2:	e796      	b.n	27f2 <__aeabi_dmul+0x7a>
    28c4:	4653      	mov	r3, sl
    28c6:	4323      	orrs	r3, r4
    28c8:	d020      	beq.n	290c <__aeabi_dmul+0x194>
    28ca:	2c00      	cmp	r4, #0
    28cc:	d100      	bne.n	28d0 <__aeabi_dmul+0x158>
    28ce:	e157      	b.n	2b80 <__aeabi_dmul+0x408>
    28d0:	0020      	movs	r0, r4
    28d2:	f000 fdd3 	bl	347c <__clzsi2>
    28d6:	0003      	movs	r3, r0
    28d8:	3b0b      	subs	r3, #11
    28da:	2b1c      	cmp	r3, #28
    28dc:	dd00      	ble.n	28e0 <__aeabi_dmul+0x168>
    28de:	e149      	b.n	2b74 <__aeabi_dmul+0x3fc>
    28e0:	211d      	movs	r1, #29
    28e2:	1acb      	subs	r3, r1, r3
    28e4:	4651      	mov	r1, sl
    28e6:	0002      	movs	r2, r0
    28e8:	40d9      	lsrs	r1, r3
    28ea:	4653      	mov	r3, sl
    28ec:	3a08      	subs	r2, #8
    28ee:	4094      	lsls	r4, r2
    28f0:	4093      	lsls	r3, r2
    28f2:	430c      	orrs	r4, r1
    28f4:	4a1b      	ldr	r2, [pc, #108]	; (2964 <__aeabi_dmul+0x1ec>)
    28f6:	1a12      	subs	r2, r2, r0
    28f8:	2000      	movs	r0, #0
    28fa:	e77a      	b.n	27f2 <__aeabi_dmul+0x7a>
    28fc:	2501      	movs	r5, #1
    28fe:	9b01      	ldr	r3, [sp, #4]
    2900:	4c14      	ldr	r4, [pc, #80]	; (2954 <__aeabi_dmul+0x1dc>)
    2902:	401d      	ands	r5, r3
    2904:	2300      	movs	r3, #0
    2906:	2200      	movs	r2, #0
    2908:	4699      	mov	r9, r3
    290a:	e79c      	b.n	2846 <__aeabi_dmul+0xce>
    290c:	2400      	movs	r4, #0
    290e:	2200      	movs	r2, #0
    2910:	2001      	movs	r0, #1
    2912:	e76e      	b.n	27f2 <__aeabi_dmul+0x7a>
    2914:	4653      	mov	r3, sl
    2916:	2003      	movs	r0, #3
    2918:	e76b      	b.n	27f2 <__aeabi_dmul+0x7a>
    291a:	2300      	movs	r3, #0
    291c:	469b      	mov	fp, r3
    291e:	3301      	adds	r3, #1
    2920:	2704      	movs	r7, #4
    2922:	2600      	movs	r6, #0
    2924:	9302      	str	r3, [sp, #8]
    2926:	e74c      	b.n	27c2 <__aeabi_dmul+0x4a>
    2928:	2303      	movs	r3, #3
    292a:	4681      	mov	r9, r0
    292c:	270c      	movs	r7, #12
    292e:	9302      	str	r3, [sp, #8]
    2930:	e747      	b.n	27c2 <__aeabi_dmul+0x4a>
    2932:	2280      	movs	r2, #128	; 0x80
    2934:	2300      	movs	r3, #0
    2936:	2500      	movs	r5, #0
    2938:	0312      	lsls	r2, r2, #12
    293a:	4699      	mov	r9, r3
    293c:	4c05      	ldr	r4, [pc, #20]	; (2954 <__aeabi_dmul+0x1dc>)
    293e:	e782      	b.n	2846 <__aeabi_dmul+0xce>
    2940:	465c      	mov	r4, fp
    2942:	464b      	mov	r3, r9
    2944:	9802      	ldr	r0, [sp, #8]
    2946:	e76f      	b.n	2828 <__aeabi_dmul+0xb0>
    2948:	465c      	mov	r4, fp
    294a:	464b      	mov	r3, r9
    294c:	9501      	str	r5, [sp, #4]
    294e:	9802      	ldr	r0, [sp, #8]
    2950:	e76a      	b.n	2828 <__aeabi_dmul+0xb0>
    2952:	46c0      	nop			; (mov r8, r8)
    2954:	000007ff 	.word	0x000007ff
    2958:	fffffc01 	.word	0xfffffc01
    295c:	000051a8 	.word	0x000051a8
    2960:	800fffff 	.word	0x800fffff
    2964:	fffffc0d 	.word	0xfffffc0d
    2968:	464a      	mov	r2, r9
    296a:	4649      	mov	r1, r9
    296c:	0c17      	lsrs	r7, r2, #16
    296e:	0c1a      	lsrs	r2, r3, #16
    2970:	041b      	lsls	r3, r3, #16
    2972:	0c1b      	lsrs	r3, r3, #16
    2974:	0408      	lsls	r0, r1, #16
    2976:	0019      	movs	r1, r3
    2978:	0c00      	lsrs	r0, r0, #16
    297a:	4341      	muls	r1, r0
    297c:	0015      	movs	r5, r2
    297e:	4688      	mov	r8, r1
    2980:	0019      	movs	r1, r3
    2982:	437d      	muls	r5, r7
    2984:	4379      	muls	r1, r7
    2986:	9503      	str	r5, [sp, #12]
    2988:	4689      	mov	r9, r1
    298a:	0029      	movs	r1, r5
    298c:	0015      	movs	r5, r2
    298e:	4345      	muls	r5, r0
    2990:	444d      	add	r5, r9
    2992:	9502      	str	r5, [sp, #8]
    2994:	4645      	mov	r5, r8
    2996:	0c2d      	lsrs	r5, r5, #16
    2998:	46aa      	mov	sl, r5
    299a:	9d02      	ldr	r5, [sp, #8]
    299c:	4455      	add	r5, sl
    299e:	45a9      	cmp	r9, r5
    29a0:	d906      	bls.n	29b0 <__aeabi_dmul+0x238>
    29a2:	468a      	mov	sl, r1
    29a4:	2180      	movs	r1, #128	; 0x80
    29a6:	0249      	lsls	r1, r1, #9
    29a8:	4689      	mov	r9, r1
    29aa:	44ca      	add	sl, r9
    29ac:	4651      	mov	r1, sl
    29ae:	9103      	str	r1, [sp, #12]
    29b0:	0c29      	lsrs	r1, r5, #16
    29b2:	9104      	str	r1, [sp, #16]
    29b4:	4641      	mov	r1, r8
    29b6:	0409      	lsls	r1, r1, #16
    29b8:	042d      	lsls	r5, r5, #16
    29ba:	0c09      	lsrs	r1, r1, #16
    29bc:	4688      	mov	r8, r1
    29be:	0029      	movs	r1, r5
    29c0:	0c25      	lsrs	r5, r4, #16
    29c2:	0424      	lsls	r4, r4, #16
    29c4:	4441      	add	r1, r8
    29c6:	0c24      	lsrs	r4, r4, #16
    29c8:	9105      	str	r1, [sp, #20]
    29ca:	0021      	movs	r1, r4
    29cc:	4341      	muls	r1, r0
    29ce:	4688      	mov	r8, r1
    29d0:	0021      	movs	r1, r4
    29d2:	4379      	muls	r1, r7
    29d4:	468a      	mov	sl, r1
    29d6:	4368      	muls	r0, r5
    29d8:	4641      	mov	r1, r8
    29da:	4450      	add	r0, sl
    29dc:	4681      	mov	r9, r0
    29de:	0c08      	lsrs	r0, r1, #16
    29e0:	4448      	add	r0, r9
    29e2:	436f      	muls	r7, r5
    29e4:	4582      	cmp	sl, r0
    29e6:	d903      	bls.n	29f0 <__aeabi_dmul+0x278>
    29e8:	2180      	movs	r1, #128	; 0x80
    29ea:	0249      	lsls	r1, r1, #9
    29ec:	4689      	mov	r9, r1
    29ee:	444f      	add	r7, r9
    29f0:	0c01      	lsrs	r1, r0, #16
    29f2:	4689      	mov	r9, r1
    29f4:	0039      	movs	r1, r7
    29f6:	4449      	add	r1, r9
    29f8:	9102      	str	r1, [sp, #8]
    29fa:	4641      	mov	r1, r8
    29fc:	040f      	lsls	r7, r1, #16
    29fe:	9904      	ldr	r1, [sp, #16]
    2a00:	0c3f      	lsrs	r7, r7, #16
    2a02:	4688      	mov	r8, r1
    2a04:	0400      	lsls	r0, r0, #16
    2a06:	19c0      	adds	r0, r0, r7
    2a08:	4480      	add	r8, r0
    2a0a:	4641      	mov	r1, r8
    2a0c:	9104      	str	r1, [sp, #16]
    2a0e:	4659      	mov	r1, fp
    2a10:	0c0f      	lsrs	r7, r1, #16
    2a12:	0409      	lsls	r1, r1, #16
    2a14:	0c09      	lsrs	r1, r1, #16
    2a16:	4688      	mov	r8, r1
    2a18:	4359      	muls	r1, r3
    2a1a:	468a      	mov	sl, r1
    2a1c:	0039      	movs	r1, r7
    2a1e:	4351      	muls	r1, r2
    2a20:	4689      	mov	r9, r1
    2a22:	4641      	mov	r1, r8
    2a24:	434a      	muls	r2, r1
    2a26:	4651      	mov	r1, sl
    2a28:	0c09      	lsrs	r1, r1, #16
    2a2a:	468b      	mov	fp, r1
    2a2c:	437b      	muls	r3, r7
    2a2e:	18d2      	adds	r2, r2, r3
    2a30:	445a      	add	r2, fp
    2a32:	4293      	cmp	r3, r2
    2a34:	d903      	bls.n	2a3e <__aeabi_dmul+0x2c6>
    2a36:	2380      	movs	r3, #128	; 0x80
    2a38:	025b      	lsls	r3, r3, #9
    2a3a:	469b      	mov	fp, r3
    2a3c:	44d9      	add	r9, fp
    2a3e:	4651      	mov	r1, sl
    2a40:	0409      	lsls	r1, r1, #16
    2a42:	0c09      	lsrs	r1, r1, #16
    2a44:	468a      	mov	sl, r1
    2a46:	4641      	mov	r1, r8
    2a48:	4361      	muls	r1, r4
    2a4a:	437c      	muls	r4, r7
    2a4c:	0c13      	lsrs	r3, r2, #16
    2a4e:	0412      	lsls	r2, r2, #16
    2a50:	444b      	add	r3, r9
    2a52:	4452      	add	r2, sl
    2a54:	46a1      	mov	r9, r4
    2a56:	468a      	mov	sl, r1
    2a58:	003c      	movs	r4, r7
    2a5a:	4641      	mov	r1, r8
    2a5c:	436c      	muls	r4, r5
    2a5e:	434d      	muls	r5, r1
    2a60:	4651      	mov	r1, sl
    2a62:	444d      	add	r5, r9
    2a64:	0c0f      	lsrs	r7, r1, #16
    2a66:	197d      	adds	r5, r7, r5
    2a68:	45a9      	cmp	r9, r5
    2a6a:	d903      	bls.n	2a74 <__aeabi_dmul+0x2fc>
    2a6c:	2180      	movs	r1, #128	; 0x80
    2a6e:	0249      	lsls	r1, r1, #9
    2a70:	4688      	mov	r8, r1
    2a72:	4444      	add	r4, r8
    2a74:	9f04      	ldr	r7, [sp, #16]
    2a76:	9903      	ldr	r1, [sp, #12]
    2a78:	46b8      	mov	r8, r7
    2a7a:	4441      	add	r1, r8
    2a7c:	468b      	mov	fp, r1
    2a7e:	4583      	cmp	fp, r0
    2a80:	4180      	sbcs	r0, r0
    2a82:	4241      	negs	r1, r0
    2a84:	4688      	mov	r8, r1
    2a86:	4651      	mov	r1, sl
    2a88:	0408      	lsls	r0, r1, #16
    2a8a:	042f      	lsls	r7, r5, #16
    2a8c:	0c00      	lsrs	r0, r0, #16
    2a8e:	183f      	adds	r7, r7, r0
    2a90:	4658      	mov	r0, fp
    2a92:	9902      	ldr	r1, [sp, #8]
    2a94:	1810      	adds	r0, r2, r0
    2a96:	4689      	mov	r9, r1
    2a98:	4290      	cmp	r0, r2
    2a9a:	4192      	sbcs	r2, r2
    2a9c:	444f      	add	r7, r9
    2a9e:	46ba      	mov	sl, r7
    2aa0:	4252      	negs	r2, r2
    2aa2:	4699      	mov	r9, r3
    2aa4:	4693      	mov	fp, r2
    2aa6:	44c2      	add	sl, r8
    2aa8:	44d1      	add	r9, sl
    2aaa:	44cb      	add	fp, r9
    2aac:	428f      	cmp	r7, r1
    2aae:	41bf      	sbcs	r7, r7
    2ab0:	45c2      	cmp	sl, r8
    2ab2:	4189      	sbcs	r1, r1
    2ab4:	4599      	cmp	r9, r3
    2ab6:	419b      	sbcs	r3, r3
    2ab8:	4593      	cmp	fp, r2
    2aba:	4192      	sbcs	r2, r2
    2abc:	427f      	negs	r7, r7
    2abe:	4249      	negs	r1, r1
    2ac0:	0c2d      	lsrs	r5, r5, #16
    2ac2:	4252      	negs	r2, r2
    2ac4:	430f      	orrs	r7, r1
    2ac6:	425b      	negs	r3, r3
    2ac8:	4313      	orrs	r3, r2
    2aca:	197f      	adds	r7, r7, r5
    2acc:	18ff      	adds	r7, r7, r3
    2ace:	465b      	mov	r3, fp
    2ad0:	193c      	adds	r4, r7, r4
    2ad2:	0ddb      	lsrs	r3, r3, #23
    2ad4:	9a05      	ldr	r2, [sp, #20]
    2ad6:	0264      	lsls	r4, r4, #9
    2ad8:	431c      	orrs	r4, r3
    2ada:	0243      	lsls	r3, r0, #9
    2adc:	4313      	orrs	r3, r2
    2ade:	1e5d      	subs	r5, r3, #1
    2ae0:	41ab      	sbcs	r3, r5
    2ae2:	465a      	mov	r2, fp
    2ae4:	0dc0      	lsrs	r0, r0, #23
    2ae6:	4303      	orrs	r3, r0
    2ae8:	0252      	lsls	r2, r2, #9
    2aea:	4313      	orrs	r3, r2
    2aec:	01e2      	lsls	r2, r4, #7
    2aee:	d556      	bpl.n	2b9e <__aeabi_dmul+0x426>
    2af0:	2001      	movs	r0, #1
    2af2:	085a      	lsrs	r2, r3, #1
    2af4:	4003      	ands	r3, r0
    2af6:	4313      	orrs	r3, r2
    2af8:	07e2      	lsls	r2, r4, #31
    2afa:	4313      	orrs	r3, r2
    2afc:	0864      	lsrs	r4, r4, #1
    2afe:	485a      	ldr	r0, [pc, #360]	; (2c68 <__aeabi_dmul+0x4f0>)
    2b00:	4460      	add	r0, ip
    2b02:	2800      	cmp	r0, #0
    2b04:	dd4d      	ble.n	2ba2 <__aeabi_dmul+0x42a>
    2b06:	075a      	lsls	r2, r3, #29
    2b08:	d009      	beq.n	2b1e <__aeabi_dmul+0x3a6>
    2b0a:	220f      	movs	r2, #15
    2b0c:	401a      	ands	r2, r3
    2b0e:	2a04      	cmp	r2, #4
    2b10:	d005      	beq.n	2b1e <__aeabi_dmul+0x3a6>
    2b12:	1d1a      	adds	r2, r3, #4
    2b14:	429a      	cmp	r2, r3
    2b16:	419b      	sbcs	r3, r3
    2b18:	425b      	negs	r3, r3
    2b1a:	18e4      	adds	r4, r4, r3
    2b1c:	0013      	movs	r3, r2
    2b1e:	01e2      	lsls	r2, r4, #7
    2b20:	d504      	bpl.n	2b2c <__aeabi_dmul+0x3b4>
    2b22:	2080      	movs	r0, #128	; 0x80
    2b24:	4a51      	ldr	r2, [pc, #324]	; (2c6c <__aeabi_dmul+0x4f4>)
    2b26:	00c0      	lsls	r0, r0, #3
    2b28:	4014      	ands	r4, r2
    2b2a:	4460      	add	r0, ip
    2b2c:	4a50      	ldr	r2, [pc, #320]	; (2c70 <__aeabi_dmul+0x4f8>)
    2b2e:	4290      	cmp	r0, r2
    2b30:	dd00      	ble.n	2b34 <__aeabi_dmul+0x3bc>
    2b32:	e6e3      	b.n	28fc <__aeabi_dmul+0x184>
    2b34:	2501      	movs	r5, #1
    2b36:	08db      	lsrs	r3, r3, #3
    2b38:	0762      	lsls	r2, r4, #29
    2b3a:	431a      	orrs	r2, r3
    2b3c:	0264      	lsls	r4, r4, #9
    2b3e:	9b01      	ldr	r3, [sp, #4]
    2b40:	4691      	mov	r9, r2
    2b42:	0b22      	lsrs	r2, r4, #12
    2b44:	0544      	lsls	r4, r0, #21
    2b46:	0d64      	lsrs	r4, r4, #21
    2b48:	401d      	ands	r5, r3
    2b4a:	e67c      	b.n	2846 <__aeabi_dmul+0xce>
    2b4c:	2280      	movs	r2, #128	; 0x80
    2b4e:	4659      	mov	r1, fp
    2b50:	0312      	lsls	r2, r2, #12
    2b52:	4211      	tst	r1, r2
    2b54:	d008      	beq.n	2b68 <__aeabi_dmul+0x3f0>
    2b56:	4214      	tst	r4, r2
    2b58:	d106      	bne.n	2b68 <__aeabi_dmul+0x3f0>
    2b5a:	4322      	orrs	r2, r4
    2b5c:	0312      	lsls	r2, r2, #12
    2b5e:	0b12      	lsrs	r2, r2, #12
    2b60:	4645      	mov	r5, r8
    2b62:	4699      	mov	r9, r3
    2b64:	4c43      	ldr	r4, [pc, #268]	; (2c74 <__aeabi_dmul+0x4fc>)
    2b66:	e66e      	b.n	2846 <__aeabi_dmul+0xce>
    2b68:	465b      	mov	r3, fp
    2b6a:	431a      	orrs	r2, r3
    2b6c:	0312      	lsls	r2, r2, #12
    2b6e:	0b12      	lsrs	r2, r2, #12
    2b70:	4c40      	ldr	r4, [pc, #256]	; (2c74 <__aeabi_dmul+0x4fc>)
    2b72:	e668      	b.n	2846 <__aeabi_dmul+0xce>
    2b74:	0003      	movs	r3, r0
    2b76:	4654      	mov	r4, sl
    2b78:	3b28      	subs	r3, #40	; 0x28
    2b7a:	409c      	lsls	r4, r3
    2b7c:	2300      	movs	r3, #0
    2b7e:	e6b9      	b.n	28f4 <__aeabi_dmul+0x17c>
    2b80:	f000 fc7c 	bl	347c <__clzsi2>
    2b84:	3020      	adds	r0, #32
    2b86:	e6a6      	b.n	28d6 <__aeabi_dmul+0x15e>
    2b88:	0003      	movs	r3, r0
    2b8a:	3b28      	subs	r3, #40	; 0x28
    2b8c:	409f      	lsls	r7, r3
    2b8e:	2300      	movs	r3, #0
    2b90:	46bb      	mov	fp, r7
    2b92:	4699      	mov	r9, r3
    2b94:	e68a      	b.n	28ac <__aeabi_dmul+0x134>
    2b96:	f000 fc71 	bl	347c <__clzsi2>
    2b9a:	3020      	adds	r0, #32
    2b9c:	e674      	b.n	2888 <__aeabi_dmul+0x110>
    2b9e:	46b4      	mov	ip, r6
    2ba0:	e7ad      	b.n	2afe <__aeabi_dmul+0x386>
    2ba2:	2501      	movs	r5, #1
    2ba4:	1a2a      	subs	r2, r5, r0
    2ba6:	2a38      	cmp	r2, #56	; 0x38
    2ba8:	dd06      	ble.n	2bb8 <__aeabi_dmul+0x440>
    2baa:	9b01      	ldr	r3, [sp, #4]
    2bac:	2400      	movs	r4, #0
    2bae:	401d      	ands	r5, r3
    2bb0:	2300      	movs	r3, #0
    2bb2:	2200      	movs	r2, #0
    2bb4:	4699      	mov	r9, r3
    2bb6:	e646      	b.n	2846 <__aeabi_dmul+0xce>
    2bb8:	2a1f      	cmp	r2, #31
    2bba:	dc21      	bgt.n	2c00 <__aeabi_dmul+0x488>
    2bbc:	2520      	movs	r5, #32
    2bbe:	0020      	movs	r0, r4
    2bc0:	1aad      	subs	r5, r5, r2
    2bc2:	001e      	movs	r6, r3
    2bc4:	40ab      	lsls	r3, r5
    2bc6:	40a8      	lsls	r0, r5
    2bc8:	40d6      	lsrs	r6, r2
    2bca:	1e5d      	subs	r5, r3, #1
    2bcc:	41ab      	sbcs	r3, r5
    2bce:	4330      	orrs	r0, r6
    2bd0:	4318      	orrs	r0, r3
    2bd2:	40d4      	lsrs	r4, r2
    2bd4:	0743      	lsls	r3, r0, #29
    2bd6:	d009      	beq.n	2bec <__aeabi_dmul+0x474>
    2bd8:	230f      	movs	r3, #15
    2bda:	4003      	ands	r3, r0
    2bdc:	2b04      	cmp	r3, #4
    2bde:	d005      	beq.n	2bec <__aeabi_dmul+0x474>
    2be0:	0003      	movs	r3, r0
    2be2:	1d18      	adds	r0, r3, #4
    2be4:	4298      	cmp	r0, r3
    2be6:	419b      	sbcs	r3, r3
    2be8:	425b      	negs	r3, r3
    2bea:	18e4      	adds	r4, r4, r3
    2bec:	0223      	lsls	r3, r4, #8
    2bee:	d521      	bpl.n	2c34 <__aeabi_dmul+0x4bc>
    2bf0:	2501      	movs	r5, #1
    2bf2:	9b01      	ldr	r3, [sp, #4]
    2bf4:	2401      	movs	r4, #1
    2bf6:	401d      	ands	r5, r3
    2bf8:	2300      	movs	r3, #0
    2bfa:	2200      	movs	r2, #0
    2bfc:	4699      	mov	r9, r3
    2bfe:	e622      	b.n	2846 <__aeabi_dmul+0xce>
    2c00:	251f      	movs	r5, #31
    2c02:	0021      	movs	r1, r4
    2c04:	426d      	negs	r5, r5
    2c06:	1a28      	subs	r0, r5, r0
    2c08:	40c1      	lsrs	r1, r0
    2c0a:	0008      	movs	r0, r1
    2c0c:	2a20      	cmp	r2, #32
    2c0e:	d01d      	beq.n	2c4c <__aeabi_dmul+0x4d4>
    2c10:	355f      	adds	r5, #95	; 0x5f
    2c12:	1aaa      	subs	r2, r5, r2
    2c14:	4094      	lsls	r4, r2
    2c16:	4323      	orrs	r3, r4
    2c18:	1e5c      	subs	r4, r3, #1
    2c1a:	41a3      	sbcs	r3, r4
    2c1c:	2507      	movs	r5, #7
    2c1e:	4303      	orrs	r3, r0
    2c20:	401d      	ands	r5, r3
    2c22:	2200      	movs	r2, #0
    2c24:	2d00      	cmp	r5, #0
    2c26:	d009      	beq.n	2c3c <__aeabi_dmul+0x4c4>
    2c28:	220f      	movs	r2, #15
    2c2a:	2400      	movs	r4, #0
    2c2c:	401a      	ands	r2, r3
    2c2e:	0018      	movs	r0, r3
    2c30:	2a04      	cmp	r2, #4
    2c32:	d1d6      	bne.n	2be2 <__aeabi_dmul+0x46a>
    2c34:	0003      	movs	r3, r0
    2c36:	0765      	lsls	r5, r4, #29
    2c38:	0264      	lsls	r4, r4, #9
    2c3a:	0b22      	lsrs	r2, r4, #12
    2c3c:	08db      	lsrs	r3, r3, #3
    2c3e:	432b      	orrs	r3, r5
    2c40:	2501      	movs	r5, #1
    2c42:	4699      	mov	r9, r3
    2c44:	9b01      	ldr	r3, [sp, #4]
    2c46:	2400      	movs	r4, #0
    2c48:	401d      	ands	r5, r3
    2c4a:	e5fc      	b.n	2846 <__aeabi_dmul+0xce>
    2c4c:	2400      	movs	r4, #0
    2c4e:	e7e2      	b.n	2c16 <__aeabi_dmul+0x49e>
    2c50:	2280      	movs	r2, #128	; 0x80
    2c52:	2501      	movs	r5, #1
    2c54:	0312      	lsls	r2, r2, #12
    2c56:	4322      	orrs	r2, r4
    2c58:	9901      	ldr	r1, [sp, #4]
    2c5a:	0312      	lsls	r2, r2, #12
    2c5c:	0b12      	lsrs	r2, r2, #12
    2c5e:	400d      	ands	r5, r1
    2c60:	4699      	mov	r9, r3
    2c62:	4c04      	ldr	r4, [pc, #16]	; (2c74 <__aeabi_dmul+0x4fc>)
    2c64:	e5ef      	b.n	2846 <__aeabi_dmul+0xce>
    2c66:	46c0      	nop			; (mov r8, r8)
    2c68:	000003ff 	.word	0x000003ff
    2c6c:	feffffff 	.word	0xfeffffff
    2c70:	000007fe 	.word	0x000007fe
    2c74:	000007ff 	.word	0x000007ff

00002c78 <__aeabi_dsub>:
    2c78:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c7a:	4646      	mov	r6, r8
    2c7c:	46d6      	mov	lr, sl
    2c7e:	464f      	mov	r7, r9
    2c80:	030c      	lsls	r4, r1, #12
    2c82:	b5c0      	push	{r6, r7, lr}
    2c84:	0fcd      	lsrs	r5, r1, #31
    2c86:	004e      	lsls	r6, r1, #1
    2c88:	0a61      	lsrs	r1, r4, #9
    2c8a:	0f44      	lsrs	r4, r0, #29
    2c8c:	430c      	orrs	r4, r1
    2c8e:	00c1      	lsls	r1, r0, #3
    2c90:	0058      	lsls	r0, r3, #1
    2c92:	0d40      	lsrs	r0, r0, #21
    2c94:	4684      	mov	ip, r0
    2c96:	468a      	mov	sl, r1
    2c98:	000f      	movs	r7, r1
    2c9a:	0319      	lsls	r1, r3, #12
    2c9c:	0f50      	lsrs	r0, r2, #29
    2c9e:	0a49      	lsrs	r1, r1, #9
    2ca0:	4301      	orrs	r1, r0
    2ca2:	48c6      	ldr	r0, [pc, #792]	; (2fbc <__aeabi_dsub+0x344>)
    2ca4:	0d76      	lsrs	r6, r6, #21
    2ca6:	46a8      	mov	r8, r5
    2ca8:	0fdb      	lsrs	r3, r3, #31
    2caa:	00d2      	lsls	r2, r2, #3
    2cac:	4584      	cmp	ip, r0
    2cae:	d100      	bne.n	2cb2 <__aeabi_dsub+0x3a>
    2cb0:	e0d8      	b.n	2e64 <__aeabi_dsub+0x1ec>
    2cb2:	2001      	movs	r0, #1
    2cb4:	4043      	eors	r3, r0
    2cb6:	42ab      	cmp	r3, r5
    2cb8:	d100      	bne.n	2cbc <__aeabi_dsub+0x44>
    2cba:	e0a6      	b.n	2e0a <__aeabi_dsub+0x192>
    2cbc:	4660      	mov	r0, ip
    2cbe:	1a35      	subs	r5, r6, r0
    2cc0:	2d00      	cmp	r5, #0
    2cc2:	dc00      	bgt.n	2cc6 <__aeabi_dsub+0x4e>
    2cc4:	e105      	b.n	2ed2 <__aeabi_dsub+0x25a>
    2cc6:	2800      	cmp	r0, #0
    2cc8:	d110      	bne.n	2cec <__aeabi_dsub+0x74>
    2cca:	000b      	movs	r3, r1
    2ccc:	4313      	orrs	r3, r2
    2cce:	d100      	bne.n	2cd2 <__aeabi_dsub+0x5a>
    2cd0:	e0d7      	b.n	2e82 <__aeabi_dsub+0x20a>
    2cd2:	1e6b      	subs	r3, r5, #1
    2cd4:	2b00      	cmp	r3, #0
    2cd6:	d000      	beq.n	2cda <__aeabi_dsub+0x62>
    2cd8:	e14b      	b.n	2f72 <__aeabi_dsub+0x2fa>
    2cda:	4653      	mov	r3, sl
    2cdc:	1a9f      	subs	r7, r3, r2
    2cde:	45ba      	cmp	sl, r7
    2ce0:	4180      	sbcs	r0, r0
    2ce2:	1a64      	subs	r4, r4, r1
    2ce4:	4240      	negs	r0, r0
    2ce6:	1a24      	subs	r4, r4, r0
    2ce8:	2601      	movs	r6, #1
    2cea:	e01e      	b.n	2d2a <__aeabi_dsub+0xb2>
    2cec:	4bb3      	ldr	r3, [pc, #716]	; (2fbc <__aeabi_dsub+0x344>)
    2cee:	429e      	cmp	r6, r3
    2cf0:	d048      	beq.n	2d84 <__aeabi_dsub+0x10c>
    2cf2:	2380      	movs	r3, #128	; 0x80
    2cf4:	041b      	lsls	r3, r3, #16
    2cf6:	4319      	orrs	r1, r3
    2cf8:	2d38      	cmp	r5, #56	; 0x38
    2cfa:	dd00      	ble.n	2cfe <__aeabi_dsub+0x86>
    2cfc:	e119      	b.n	2f32 <__aeabi_dsub+0x2ba>
    2cfe:	2d1f      	cmp	r5, #31
    2d00:	dd00      	ble.n	2d04 <__aeabi_dsub+0x8c>
    2d02:	e14c      	b.n	2f9e <__aeabi_dsub+0x326>
    2d04:	2320      	movs	r3, #32
    2d06:	000f      	movs	r7, r1
    2d08:	1b5b      	subs	r3, r3, r5
    2d0a:	0010      	movs	r0, r2
    2d0c:	409a      	lsls	r2, r3
    2d0e:	409f      	lsls	r7, r3
    2d10:	40e8      	lsrs	r0, r5
    2d12:	1e53      	subs	r3, r2, #1
    2d14:	419a      	sbcs	r2, r3
    2d16:	40e9      	lsrs	r1, r5
    2d18:	4307      	orrs	r7, r0
    2d1a:	4317      	orrs	r7, r2
    2d1c:	4653      	mov	r3, sl
    2d1e:	1bdf      	subs	r7, r3, r7
    2d20:	1a61      	subs	r1, r4, r1
    2d22:	45ba      	cmp	sl, r7
    2d24:	41a4      	sbcs	r4, r4
    2d26:	4264      	negs	r4, r4
    2d28:	1b0c      	subs	r4, r1, r4
    2d2a:	0223      	lsls	r3, r4, #8
    2d2c:	d400      	bmi.n	2d30 <__aeabi_dsub+0xb8>
    2d2e:	e0c5      	b.n	2ebc <__aeabi_dsub+0x244>
    2d30:	0264      	lsls	r4, r4, #9
    2d32:	0a65      	lsrs	r5, r4, #9
    2d34:	2d00      	cmp	r5, #0
    2d36:	d100      	bne.n	2d3a <__aeabi_dsub+0xc2>
    2d38:	e0f6      	b.n	2f28 <__aeabi_dsub+0x2b0>
    2d3a:	0028      	movs	r0, r5
    2d3c:	f000 fb9e 	bl	347c <__clzsi2>
    2d40:	0003      	movs	r3, r0
    2d42:	3b08      	subs	r3, #8
    2d44:	2b1f      	cmp	r3, #31
    2d46:	dd00      	ble.n	2d4a <__aeabi_dsub+0xd2>
    2d48:	e0e9      	b.n	2f1e <__aeabi_dsub+0x2a6>
    2d4a:	2220      	movs	r2, #32
    2d4c:	003c      	movs	r4, r7
    2d4e:	1ad2      	subs	r2, r2, r3
    2d50:	409d      	lsls	r5, r3
    2d52:	40d4      	lsrs	r4, r2
    2d54:	409f      	lsls	r7, r3
    2d56:	4325      	orrs	r5, r4
    2d58:	429e      	cmp	r6, r3
    2d5a:	dd00      	ble.n	2d5e <__aeabi_dsub+0xe6>
    2d5c:	e0db      	b.n	2f16 <__aeabi_dsub+0x29e>
    2d5e:	1b9e      	subs	r6, r3, r6
    2d60:	1c73      	adds	r3, r6, #1
    2d62:	2b1f      	cmp	r3, #31
    2d64:	dd00      	ble.n	2d68 <__aeabi_dsub+0xf0>
    2d66:	e10a      	b.n	2f7e <__aeabi_dsub+0x306>
    2d68:	2220      	movs	r2, #32
    2d6a:	0038      	movs	r0, r7
    2d6c:	1ad2      	subs	r2, r2, r3
    2d6e:	0029      	movs	r1, r5
    2d70:	4097      	lsls	r7, r2
    2d72:	002c      	movs	r4, r5
    2d74:	4091      	lsls	r1, r2
    2d76:	40d8      	lsrs	r0, r3
    2d78:	1e7a      	subs	r2, r7, #1
    2d7a:	4197      	sbcs	r7, r2
    2d7c:	40dc      	lsrs	r4, r3
    2d7e:	2600      	movs	r6, #0
    2d80:	4301      	orrs	r1, r0
    2d82:	430f      	orrs	r7, r1
    2d84:	077b      	lsls	r3, r7, #29
    2d86:	d009      	beq.n	2d9c <__aeabi_dsub+0x124>
    2d88:	230f      	movs	r3, #15
    2d8a:	403b      	ands	r3, r7
    2d8c:	2b04      	cmp	r3, #4
    2d8e:	d005      	beq.n	2d9c <__aeabi_dsub+0x124>
    2d90:	1d3b      	adds	r3, r7, #4
    2d92:	42bb      	cmp	r3, r7
    2d94:	41bf      	sbcs	r7, r7
    2d96:	427f      	negs	r7, r7
    2d98:	19e4      	adds	r4, r4, r7
    2d9a:	001f      	movs	r7, r3
    2d9c:	0223      	lsls	r3, r4, #8
    2d9e:	d525      	bpl.n	2dec <__aeabi_dsub+0x174>
    2da0:	4b86      	ldr	r3, [pc, #536]	; (2fbc <__aeabi_dsub+0x344>)
    2da2:	3601      	adds	r6, #1
    2da4:	429e      	cmp	r6, r3
    2da6:	d100      	bne.n	2daa <__aeabi_dsub+0x132>
    2da8:	e0af      	b.n	2f0a <__aeabi_dsub+0x292>
    2daa:	4b85      	ldr	r3, [pc, #532]	; (2fc0 <__aeabi_dsub+0x348>)
    2dac:	2501      	movs	r5, #1
    2dae:	401c      	ands	r4, r3
    2db0:	4643      	mov	r3, r8
    2db2:	0762      	lsls	r2, r4, #29
    2db4:	08ff      	lsrs	r7, r7, #3
    2db6:	0264      	lsls	r4, r4, #9
    2db8:	0576      	lsls	r6, r6, #21
    2dba:	4317      	orrs	r7, r2
    2dbc:	0b24      	lsrs	r4, r4, #12
    2dbe:	0d76      	lsrs	r6, r6, #21
    2dc0:	401d      	ands	r5, r3
    2dc2:	2100      	movs	r1, #0
    2dc4:	0324      	lsls	r4, r4, #12
    2dc6:	0b23      	lsrs	r3, r4, #12
    2dc8:	0d0c      	lsrs	r4, r1, #20
    2dca:	4a7e      	ldr	r2, [pc, #504]	; (2fc4 <__aeabi_dsub+0x34c>)
    2dcc:	0524      	lsls	r4, r4, #20
    2dce:	431c      	orrs	r4, r3
    2dd0:	4014      	ands	r4, r2
    2dd2:	0533      	lsls	r3, r6, #20
    2dd4:	4323      	orrs	r3, r4
    2dd6:	005b      	lsls	r3, r3, #1
    2dd8:	07ed      	lsls	r5, r5, #31
    2dda:	085b      	lsrs	r3, r3, #1
    2ddc:	432b      	orrs	r3, r5
    2dde:	0038      	movs	r0, r7
    2de0:	0019      	movs	r1, r3
    2de2:	bc1c      	pop	{r2, r3, r4}
    2de4:	4690      	mov	r8, r2
    2de6:	4699      	mov	r9, r3
    2de8:	46a2      	mov	sl, r4
    2dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2dec:	2501      	movs	r5, #1
    2dee:	4643      	mov	r3, r8
    2df0:	0762      	lsls	r2, r4, #29
    2df2:	08ff      	lsrs	r7, r7, #3
    2df4:	4317      	orrs	r7, r2
    2df6:	08e4      	lsrs	r4, r4, #3
    2df8:	401d      	ands	r5, r3
    2dfa:	4b70      	ldr	r3, [pc, #448]	; (2fbc <__aeabi_dsub+0x344>)
    2dfc:	429e      	cmp	r6, r3
    2dfe:	d036      	beq.n	2e6e <__aeabi_dsub+0x1f6>
    2e00:	0324      	lsls	r4, r4, #12
    2e02:	0576      	lsls	r6, r6, #21
    2e04:	0b24      	lsrs	r4, r4, #12
    2e06:	0d76      	lsrs	r6, r6, #21
    2e08:	e7db      	b.n	2dc2 <__aeabi_dsub+0x14a>
    2e0a:	4663      	mov	r3, ip
    2e0c:	1af3      	subs	r3, r6, r3
    2e0e:	2b00      	cmp	r3, #0
    2e10:	dc00      	bgt.n	2e14 <__aeabi_dsub+0x19c>
    2e12:	e094      	b.n	2f3e <__aeabi_dsub+0x2c6>
    2e14:	4660      	mov	r0, ip
    2e16:	2800      	cmp	r0, #0
    2e18:	d035      	beq.n	2e86 <__aeabi_dsub+0x20e>
    2e1a:	4868      	ldr	r0, [pc, #416]	; (2fbc <__aeabi_dsub+0x344>)
    2e1c:	4286      	cmp	r6, r0
    2e1e:	d0b1      	beq.n	2d84 <__aeabi_dsub+0x10c>
    2e20:	2780      	movs	r7, #128	; 0x80
    2e22:	043f      	lsls	r7, r7, #16
    2e24:	4339      	orrs	r1, r7
    2e26:	2b38      	cmp	r3, #56	; 0x38
    2e28:	dc00      	bgt.n	2e2c <__aeabi_dsub+0x1b4>
    2e2a:	e0fd      	b.n	3028 <__aeabi_dsub+0x3b0>
    2e2c:	430a      	orrs	r2, r1
    2e2e:	0017      	movs	r7, r2
    2e30:	2100      	movs	r1, #0
    2e32:	1e7a      	subs	r2, r7, #1
    2e34:	4197      	sbcs	r7, r2
    2e36:	4457      	add	r7, sl
    2e38:	4557      	cmp	r7, sl
    2e3a:	4180      	sbcs	r0, r0
    2e3c:	1909      	adds	r1, r1, r4
    2e3e:	4244      	negs	r4, r0
    2e40:	190c      	adds	r4, r1, r4
    2e42:	0223      	lsls	r3, r4, #8
    2e44:	d53a      	bpl.n	2ebc <__aeabi_dsub+0x244>
    2e46:	4b5d      	ldr	r3, [pc, #372]	; (2fbc <__aeabi_dsub+0x344>)
    2e48:	3601      	adds	r6, #1
    2e4a:	429e      	cmp	r6, r3
    2e4c:	d100      	bne.n	2e50 <__aeabi_dsub+0x1d8>
    2e4e:	e14b      	b.n	30e8 <__aeabi_dsub+0x470>
    2e50:	2201      	movs	r2, #1
    2e52:	4b5b      	ldr	r3, [pc, #364]	; (2fc0 <__aeabi_dsub+0x348>)
    2e54:	401c      	ands	r4, r3
    2e56:	087b      	lsrs	r3, r7, #1
    2e58:	4017      	ands	r7, r2
    2e5a:	431f      	orrs	r7, r3
    2e5c:	07e2      	lsls	r2, r4, #31
    2e5e:	4317      	orrs	r7, r2
    2e60:	0864      	lsrs	r4, r4, #1
    2e62:	e78f      	b.n	2d84 <__aeabi_dsub+0x10c>
    2e64:	0008      	movs	r0, r1
    2e66:	4310      	orrs	r0, r2
    2e68:	d000      	beq.n	2e6c <__aeabi_dsub+0x1f4>
    2e6a:	e724      	b.n	2cb6 <__aeabi_dsub+0x3e>
    2e6c:	e721      	b.n	2cb2 <__aeabi_dsub+0x3a>
    2e6e:	0023      	movs	r3, r4
    2e70:	433b      	orrs	r3, r7
    2e72:	d100      	bne.n	2e76 <__aeabi_dsub+0x1fe>
    2e74:	e1b9      	b.n	31ea <__aeabi_dsub+0x572>
    2e76:	2280      	movs	r2, #128	; 0x80
    2e78:	0312      	lsls	r2, r2, #12
    2e7a:	4314      	orrs	r4, r2
    2e7c:	0324      	lsls	r4, r4, #12
    2e7e:	0b24      	lsrs	r4, r4, #12
    2e80:	e79f      	b.n	2dc2 <__aeabi_dsub+0x14a>
    2e82:	002e      	movs	r6, r5
    2e84:	e77e      	b.n	2d84 <__aeabi_dsub+0x10c>
    2e86:	0008      	movs	r0, r1
    2e88:	4310      	orrs	r0, r2
    2e8a:	d100      	bne.n	2e8e <__aeabi_dsub+0x216>
    2e8c:	e0ca      	b.n	3024 <__aeabi_dsub+0x3ac>
    2e8e:	1e58      	subs	r0, r3, #1
    2e90:	4684      	mov	ip, r0
    2e92:	2800      	cmp	r0, #0
    2e94:	d000      	beq.n	2e98 <__aeabi_dsub+0x220>
    2e96:	e0e7      	b.n	3068 <__aeabi_dsub+0x3f0>
    2e98:	4452      	add	r2, sl
    2e9a:	4552      	cmp	r2, sl
    2e9c:	4180      	sbcs	r0, r0
    2e9e:	1864      	adds	r4, r4, r1
    2ea0:	4240      	negs	r0, r0
    2ea2:	1824      	adds	r4, r4, r0
    2ea4:	0017      	movs	r7, r2
    2ea6:	2601      	movs	r6, #1
    2ea8:	0223      	lsls	r3, r4, #8
    2eaa:	d507      	bpl.n	2ebc <__aeabi_dsub+0x244>
    2eac:	2602      	movs	r6, #2
    2eae:	e7cf      	b.n	2e50 <__aeabi_dsub+0x1d8>
    2eb0:	4664      	mov	r4, ip
    2eb2:	432c      	orrs	r4, r5
    2eb4:	d100      	bne.n	2eb8 <__aeabi_dsub+0x240>
    2eb6:	e1b3      	b.n	3220 <__aeabi_dsub+0x5a8>
    2eb8:	002c      	movs	r4, r5
    2eba:	4667      	mov	r7, ip
    2ebc:	077b      	lsls	r3, r7, #29
    2ebe:	d000      	beq.n	2ec2 <__aeabi_dsub+0x24a>
    2ec0:	e762      	b.n	2d88 <__aeabi_dsub+0x110>
    2ec2:	0763      	lsls	r3, r4, #29
    2ec4:	08ff      	lsrs	r7, r7, #3
    2ec6:	431f      	orrs	r7, r3
    2ec8:	2501      	movs	r5, #1
    2eca:	4643      	mov	r3, r8
    2ecc:	08e4      	lsrs	r4, r4, #3
    2ece:	401d      	ands	r5, r3
    2ed0:	e793      	b.n	2dfa <__aeabi_dsub+0x182>
    2ed2:	2d00      	cmp	r5, #0
    2ed4:	d178      	bne.n	2fc8 <__aeabi_dsub+0x350>
    2ed6:	1c75      	adds	r5, r6, #1
    2ed8:	056d      	lsls	r5, r5, #21
    2eda:	0d6d      	lsrs	r5, r5, #21
    2edc:	2d01      	cmp	r5, #1
    2ede:	dc00      	bgt.n	2ee2 <__aeabi_dsub+0x26a>
    2ee0:	e0f2      	b.n	30c8 <__aeabi_dsub+0x450>
    2ee2:	4650      	mov	r0, sl
    2ee4:	1a80      	subs	r0, r0, r2
    2ee6:	4582      	cmp	sl, r0
    2ee8:	41bf      	sbcs	r7, r7
    2eea:	1a65      	subs	r5, r4, r1
    2eec:	427f      	negs	r7, r7
    2eee:	1bed      	subs	r5, r5, r7
    2ef0:	4684      	mov	ip, r0
    2ef2:	0228      	lsls	r0, r5, #8
    2ef4:	d400      	bmi.n	2ef8 <__aeabi_dsub+0x280>
    2ef6:	e08c      	b.n	3012 <__aeabi_dsub+0x39a>
    2ef8:	4650      	mov	r0, sl
    2efa:	1a17      	subs	r7, r2, r0
    2efc:	42ba      	cmp	r2, r7
    2efe:	4192      	sbcs	r2, r2
    2f00:	1b0c      	subs	r4, r1, r4
    2f02:	4255      	negs	r5, r2
    2f04:	1b65      	subs	r5, r4, r5
    2f06:	4698      	mov	r8, r3
    2f08:	e714      	b.n	2d34 <__aeabi_dsub+0xbc>
    2f0a:	2501      	movs	r5, #1
    2f0c:	4643      	mov	r3, r8
    2f0e:	2400      	movs	r4, #0
    2f10:	401d      	ands	r5, r3
    2f12:	2700      	movs	r7, #0
    2f14:	e755      	b.n	2dc2 <__aeabi_dsub+0x14a>
    2f16:	4c2a      	ldr	r4, [pc, #168]	; (2fc0 <__aeabi_dsub+0x348>)
    2f18:	1af6      	subs	r6, r6, r3
    2f1a:	402c      	ands	r4, r5
    2f1c:	e732      	b.n	2d84 <__aeabi_dsub+0x10c>
    2f1e:	003d      	movs	r5, r7
    2f20:	3828      	subs	r0, #40	; 0x28
    2f22:	4085      	lsls	r5, r0
    2f24:	2700      	movs	r7, #0
    2f26:	e717      	b.n	2d58 <__aeabi_dsub+0xe0>
    2f28:	0038      	movs	r0, r7
    2f2a:	f000 faa7 	bl	347c <__clzsi2>
    2f2e:	3020      	adds	r0, #32
    2f30:	e706      	b.n	2d40 <__aeabi_dsub+0xc8>
    2f32:	430a      	orrs	r2, r1
    2f34:	0017      	movs	r7, r2
    2f36:	2100      	movs	r1, #0
    2f38:	1e7a      	subs	r2, r7, #1
    2f3a:	4197      	sbcs	r7, r2
    2f3c:	e6ee      	b.n	2d1c <__aeabi_dsub+0xa4>
    2f3e:	2b00      	cmp	r3, #0
    2f40:	d000      	beq.n	2f44 <__aeabi_dsub+0x2cc>
    2f42:	e0e5      	b.n	3110 <__aeabi_dsub+0x498>
    2f44:	1c73      	adds	r3, r6, #1
    2f46:	469c      	mov	ip, r3
    2f48:	055b      	lsls	r3, r3, #21
    2f4a:	0d5b      	lsrs	r3, r3, #21
    2f4c:	2b01      	cmp	r3, #1
    2f4e:	dc00      	bgt.n	2f52 <__aeabi_dsub+0x2da>
    2f50:	e09f      	b.n	3092 <__aeabi_dsub+0x41a>
    2f52:	4b1a      	ldr	r3, [pc, #104]	; (2fbc <__aeabi_dsub+0x344>)
    2f54:	459c      	cmp	ip, r3
    2f56:	d100      	bne.n	2f5a <__aeabi_dsub+0x2e2>
    2f58:	e0c5      	b.n	30e6 <__aeabi_dsub+0x46e>
    2f5a:	4452      	add	r2, sl
    2f5c:	4552      	cmp	r2, sl
    2f5e:	4180      	sbcs	r0, r0
    2f60:	1864      	adds	r4, r4, r1
    2f62:	4240      	negs	r0, r0
    2f64:	1824      	adds	r4, r4, r0
    2f66:	07e7      	lsls	r7, r4, #31
    2f68:	0852      	lsrs	r2, r2, #1
    2f6a:	4317      	orrs	r7, r2
    2f6c:	0864      	lsrs	r4, r4, #1
    2f6e:	4666      	mov	r6, ip
    2f70:	e708      	b.n	2d84 <__aeabi_dsub+0x10c>
    2f72:	4812      	ldr	r0, [pc, #72]	; (2fbc <__aeabi_dsub+0x344>)
    2f74:	4285      	cmp	r5, r0
    2f76:	d100      	bne.n	2f7a <__aeabi_dsub+0x302>
    2f78:	e085      	b.n	3086 <__aeabi_dsub+0x40e>
    2f7a:	001d      	movs	r5, r3
    2f7c:	e6bc      	b.n	2cf8 <__aeabi_dsub+0x80>
    2f7e:	0029      	movs	r1, r5
    2f80:	3e1f      	subs	r6, #31
    2f82:	40f1      	lsrs	r1, r6
    2f84:	2b20      	cmp	r3, #32
    2f86:	d100      	bne.n	2f8a <__aeabi_dsub+0x312>
    2f88:	e07f      	b.n	308a <__aeabi_dsub+0x412>
    2f8a:	2240      	movs	r2, #64	; 0x40
    2f8c:	1ad3      	subs	r3, r2, r3
    2f8e:	409d      	lsls	r5, r3
    2f90:	432f      	orrs	r7, r5
    2f92:	1e7d      	subs	r5, r7, #1
    2f94:	41af      	sbcs	r7, r5
    2f96:	2400      	movs	r4, #0
    2f98:	430f      	orrs	r7, r1
    2f9a:	2600      	movs	r6, #0
    2f9c:	e78e      	b.n	2ebc <__aeabi_dsub+0x244>
    2f9e:	002b      	movs	r3, r5
    2fa0:	000f      	movs	r7, r1
    2fa2:	3b20      	subs	r3, #32
    2fa4:	40df      	lsrs	r7, r3
    2fa6:	2d20      	cmp	r5, #32
    2fa8:	d071      	beq.n	308e <__aeabi_dsub+0x416>
    2faa:	2340      	movs	r3, #64	; 0x40
    2fac:	1b5d      	subs	r5, r3, r5
    2fae:	40a9      	lsls	r1, r5
    2fb0:	430a      	orrs	r2, r1
    2fb2:	1e51      	subs	r1, r2, #1
    2fb4:	418a      	sbcs	r2, r1
    2fb6:	2100      	movs	r1, #0
    2fb8:	4317      	orrs	r7, r2
    2fba:	e6af      	b.n	2d1c <__aeabi_dsub+0xa4>
    2fbc:	000007ff 	.word	0x000007ff
    2fc0:	ff7fffff 	.word	0xff7fffff
    2fc4:	800fffff 	.word	0x800fffff
    2fc8:	2e00      	cmp	r6, #0
    2fca:	d03e      	beq.n	304a <__aeabi_dsub+0x3d2>
    2fcc:	4eb3      	ldr	r6, [pc, #716]	; (329c <__aeabi_dsub+0x624>)
    2fce:	45b4      	cmp	ip, r6
    2fd0:	d045      	beq.n	305e <__aeabi_dsub+0x3e6>
    2fd2:	2680      	movs	r6, #128	; 0x80
    2fd4:	0436      	lsls	r6, r6, #16
    2fd6:	426d      	negs	r5, r5
    2fd8:	4334      	orrs	r4, r6
    2fda:	2d38      	cmp	r5, #56	; 0x38
    2fdc:	dd00      	ble.n	2fe0 <__aeabi_dsub+0x368>
    2fde:	e0a8      	b.n	3132 <__aeabi_dsub+0x4ba>
    2fe0:	2d1f      	cmp	r5, #31
    2fe2:	dd00      	ble.n	2fe6 <__aeabi_dsub+0x36e>
    2fe4:	e11f      	b.n	3226 <__aeabi_dsub+0x5ae>
    2fe6:	2620      	movs	r6, #32
    2fe8:	0027      	movs	r7, r4
    2fea:	4650      	mov	r0, sl
    2fec:	1b76      	subs	r6, r6, r5
    2fee:	40b7      	lsls	r7, r6
    2ff0:	40e8      	lsrs	r0, r5
    2ff2:	4307      	orrs	r7, r0
    2ff4:	4650      	mov	r0, sl
    2ff6:	40b0      	lsls	r0, r6
    2ff8:	1e46      	subs	r6, r0, #1
    2ffa:	41b0      	sbcs	r0, r6
    2ffc:	40ec      	lsrs	r4, r5
    2ffe:	4338      	orrs	r0, r7
    3000:	1a17      	subs	r7, r2, r0
    3002:	42ba      	cmp	r2, r7
    3004:	4192      	sbcs	r2, r2
    3006:	1b0c      	subs	r4, r1, r4
    3008:	4252      	negs	r2, r2
    300a:	1aa4      	subs	r4, r4, r2
    300c:	4666      	mov	r6, ip
    300e:	4698      	mov	r8, r3
    3010:	e68b      	b.n	2d2a <__aeabi_dsub+0xb2>
    3012:	4664      	mov	r4, ip
    3014:	4667      	mov	r7, ip
    3016:	432c      	orrs	r4, r5
    3018:	d000      	beq.n	301c <__aeabi_dsub+0x3a4>
    301a:	e68b      	b.n	2d34 <__aeabi_dsub+0xbc>
    301c:	2500      	movs	r5, #0
    301e:	2600      	movs	r6, #0
    3020:	2700      	movs	r7, #0
    3022:	e6ea      	b.n	2dfa <__aeabi_dsub+0x182>
    3024:	001e      	movs	r6, r3
    3026:	e6ad      	b.n	2d84 <__aeabi_dsub+0x10c>
    3028:	2b1f      	cmp	r3, #31
    302a:	dc60      	bgt.n	30ee <__aeabi_dsub+0x476>
    302c:	2720      	movs	r7, #32
    302e:	1af8      	subs	r0, r7, r3
    3030:	000f      	movs	r7, r1
    3032:	4684      	mov	ip, r0
    3034:	4087      	lsls	r7, r0
    3036:	0010      	movs	r0, r2
    3038:	40d8      	lsrs	r0, r3
    303a:	4307      	orrs	r7, r0
    303c:	4660      	mov	r0, ip
    303e:	4082      	lsls	r2, r0
    3040:	1e50      	subs	r0, r2, #1
    3042:	4182      	sbcs	r2, r0
    3044:	40d9      	lsrs	r1, r3
    3046:	4317      	orrs	r7, r2
    3048:	e6f5      	b.n	2e36 <__aeabi_dsub+0x1be>
    304a:	0026      	movs	r6, r4
    304c:	4650      	mov	r0, sl
    304e:	4306      	orrs	r6, r0
    3050:	d005      	beq.n	305e <__aeabi_dsub+0x3e6>
    3052:	43ed      	mvns	r5, r5
    3054:	2d00      	cmp	r5, #0
    3056:	d0d3      	beq.n	3000 <__aeabi_dsub+0x388>
    3058:	4e90      	ldr	r6, [pc, #576]	; (329c <__aeabi_dsub+0x624>)
    305a:	45b4      	cmp	ip, r6
    305c:	d1bd      	bne.n	2fda <__aeabi_dsub+0x362>
    305e:	000c      	movs	r4, r1
    3060:	0017      	movs	r7, r2
    3062:	4666      	mov	r6, ip
    3064:	4698      	mov	r8, r3
    3066:	e68d      	b.n	2d84 <__aeabi_dsub+0x10c>
    3068:	488c      	ldr	r0, [pc, #560]	; (329c <__aeabi_dsub+0x624>)
    306a:	4283      	cmp	r3, r0
    306c:	d00b      	beq.n	3086 <__aeabi_dsub+0x40e>
    306e:	4663      	mov	r3, ip
    3070:	e6d9      	b.n	2e26 <__aeabi_dsub+0x1ae>
    3072:	2d00      	cmp	r5, #0
    3074:	d000      	beq.n	3078 <__aeabi_dsub+0x400>
    3076:	e096      	b.n	31a6 <__aeabi_dsub+0x52e>
    3078:	0008      	movs	r0, r1
    307a:	4310      	orrs	r0, r2
    307c:	d100      	bne.n	3080 <__aeabi_dsub+0x408>
    307e:	e0e2      	b.n	3246 <__aeabi_dsub+0x5ce>
    3080:	000c      	movs	r4, r1
    3082:	0017      	movs	r7, r2
    3084:	4698      	mov	r8, r3
    3086:	4e85      	ldr	r6, [pc, #532]	; (329c <__aeabi_dsub+0x624>)
    3088:	e67c      	b.n	2d84 <__aeabi_dsub+0x10c>
    308a:	2500      	movs	r5, #0
    308c:	e780      	b.n	2f90 <__aeabi_dsub+0x318>
    308e:	2100      	movs	r1, #0
    3090:	e78e      	b.n	2fb0 <__aeabi_dsub+0x338>
    3092:	0023      	movs	r3, r4
    3094:	4650      	mov	r0, sl
    3096:	4303      	orrs	r3, r0
    3098:	2e00      	cmp	r6, #0
    309a:	d000      	beq.n	309e <__aeabi_dsub+0x426>
    309c:	e0a8      	b.n	31f0 <__aeabi_dsub+0x578>
    309e:	2b00      	cmp	r3, #0
    30a0:	d100      	bne.n	30a4 <__aeabi_dsub+0x42c>
    30a2:	e0de      	b.n	3262 <__aeabi_dsub+0x5ea>
    30a4:	000b      	movs	r3, r1
    30a6:	4313      	orrs	r3, r2
    30a8:	d100      	bne.n	30ac <__aeabi_dsub+0x434>
    30aa:	e66b      	b.n	2d84 <__aeabi_dsub+0x10c>
    30ac:	4452      	add	r2, sl
    30ae:	4552      	cmp	r2, sl
    30b0:	4180      	sbcs	r0, r0
    30b2:	1864      	adds	r4, r4, r1
    30b4:	4240      	negs	r0, r0
    30b6:	1824      	adds	r4, r4, r0
    30b8:	0017      	movs	r7, r2
    30ba:	0223      	lsls	r3, r4, #8
    30bc:	d400      	bmi.n	30c0 <__aeabi_dsub+0x448>
    30be:	e6fd      	b.n	2ebc <__aeabi_dsub+0x244>
    30c0:	4b77      	ldr	r3, [pc, #476]	; (32a0 <__aeabi_dsub+0x628>)
    30c2:	4666      	mov	r6, ip
    30c4:	401c      	ands	r4, r3
    30c6:	e65d      	b.n	2d84 <__aeabi_dsub+0x10c>
    30c8:	0025      	movs	r5, r4
    30ca:	4650      	mov	r0, sl
    30cc:	4305      	orrs	r5, r0
    30ce:	2e00      	cmp	r6, #0
    30d0:	d1cf      	bne.n	3072 <__aeabi_dsub+0x3fa>
    30d2:	2d00      	cmp	r5, #0
    30d4:	d14f      	bne.n	3176 <__aeabi_dsub+0x4fe>
    30d6:	000c      	movs	r4, r1
    30d8:	4314      	orrs	r4, r2
    30da:	d100      	bne.n	30de <__aeabi_dsub+0x466>
    30dc:	e0a0      	b.n	3220 <__aeabi_dsub+0x5a8>
    30de:	000c      	movs	r4, r1
    30e0:	0017      	movs	r7, r2
    30e2:	4698      	mov	r8, r3
    30e4:	e64e      	b.n	2d84 <__aeabi_dsub+0x10c>
    30e6:	4666      	mov	r6, ip
    30e8:	2400      	movs	r4, #0
    30ea:	2700      	movs	r7, #0
    30ec:	e685      	b.n	2dfa <__aeabi_dsub+0x182>
    30ee:	001f      	movs	r7, r3
    30f0:	0008      	movs	r0, r1
    30f2:	3f20      	subs	r7, #32
    30f4:	40f8      	lsrs	r0, r7
    30f6:	0007      	movs	r7, r0
    30f8:	2b20      	cmp	r3, #32
    30fa:	d100      	bne.n	30fe <__aeabi_dsub+0x486>
    30fc:	e08e      	b.n	321c <__aeabi_dsub+0x5a4>
    30fe:	2040      	movs	r0, #64	; 0x40
    3100:	1ac3      	subs	r3, r0, r3
    3102:	4099      	lsls	r1, r3
    3104:	430a      	orrs	r2, r1
    3106:	1e51      	subs	r1, r2, #1
    3108:	418a      	sbcs	r2, r1
    310a:	2100      	movs	r1, #0
    310c:	4317      	orrs	r7, r2
    310e:	e692      	b.n	2e36 <__aeabi_dsub+0x1be>
    3110:	2e00      	cmp	r6, #0
    3112:	d114      	bne.n	313e <__aeabi_dsub+0x4c6>
    3114:	0026      	movs	r6, r4
    3116:	4650      	mov	r0, sl
    3118:	4306      	orrs	r6, r0
    311a:	d062      	beq.n	31e2 <__aeabi_dsub+0x56a>
    311c:	43db      	mvns	r3, r3
    311e:	2b00      	cmp	r3, #0
    3120:	d15c      	bne.n	31dc <__aeabi_dsub+0x564>
    3122:	1887      	adds	r7, r0, r2
    3124:	4297      	cmp	r7, r2
    3126:	4192      	sbcs	r2, r2
    3128:	1864      	adds	r4, r4, r1
    312a:	4252      	negs	r2, r2
    312c:	18a4      	adds	r4, r4, r2
    312e:	4666      	mov	r6, ip
    3130:	e687      	b.n	2e42 <__aeabi_dsub+0x1ca>
    3132:	4650      	mov	r0, sl
    3134:	4320      	orrs	r0, r4
    3136:	1e44      	subs	r4, r0, #1
    3138:	41a0      	sbcs	r0, r4
    313a:	2400      	movs	r4, #0
    313c:	e760      	b.n	3000 <__aeabi_dsub+0x388>
    313e:	4e57      	ldr	r6, [pc, #348]	; (329c <__aeabi_dsub+0x624>)
    3140:	45b4      	cmp	ip, r6
    3142:	d04e      	beq.n	31e2 <__aeabi_dsub+0x56a>
    3144:	2680      	movs	r6, #128	; 0x80
    3146:	0436      	lsls	r6, r6, #16
    3148:	425b      	negs	r3, r3
    314a:	4334      	orrs	r4, r6
    314c:	2b38      	cmp	r3, #56	; 0x38
    314e:	dd00      	ble.n	3152 <__aeabi_dsub+0x4da>
    3150:	e07f      	b.n	3252 <__aeabi_dsub+0x5da>
    3152:	2b1f      	cmp	r3, #31
    3154:	dd00      	ble.n	3158 <__aeabi_dsub+0x4e0>
    3156:	e08b      	b.n	3270 <__aeabi_dsub+0x5f8>
    3158:	2620      	movs	r6, #32
    315a:	0027      	movs	r7, r4
    315c:	4650      	mov	r0, sl
    315e:	1af6      	subs	r6, r6, r3
    3160:	40b7      	lsls	r7, r6
    3162:	40d8      	lsrs	r0, r3
    3164:	4307      	orrs	r7, r0
    3166:	4650      	mov	r0, sl
    3168:	40b0      	lsls	r0, r6
    316a:	1e46      	subs	r6, r0, #1
    316c:	41b0      	sbcs	r0, r6
    316e:	4307      	orrs	r7, r0
    3170:	40dc      	lsrs	r4, r3
    3172:	18bf      	adds	r7, r7, r2
    3174:	e7d6      	b.n	3124 <__aeabi_dsub+0x4ac>
    3176:	000d      	movs	r5, r1
    3178:	4315      	orrs	r5, r2
    317a:	d100      	bne.n	317e <__aeabi_dsub+0x506>
    317c:	e602      	b.n	2d84 <__aeabi_dsub+0x10c>
    317e:	4650      	mov	r0, sl
    3180:	1a80      	subs	r0, r0, r2
    3182:	4582      	cmp	sl, r0
    3184:	41bf      	sbcs	r7, r7
    3186:	1a65      	subs	r5, r4, r1
    3188:	427f      	negs	r7, r7
    318a:	1bed      	subs	r5, r5, r7
    318c:	4684      	mov	ip, r0
    318e:	0228      	lsls	r0, r5, #8
    3190:	d400      	bmi.n	3194 <__aeabi_dsub+0x51c>
    3192:	e68d      	b.n	2eb0 <__aeabi_dsub+0x238>
    3194:	4650      	mov	r0, sl
    3196:	1a17      	subs	r7, r2, r0
    3198:	42ba      	cmp	r2, r7
    319a:	4192      	sbcs	r2, r2
    319c:	1b0c      	subs	r4, r1, r4
    319e:	4252      	negs	r2, r2
    31a0:	1aa4      	subs	r4, r4, r2
    31a2:	4698      	mov	r8, r3
    31a4:	e5ee      	b.n	2d84 <__aeabi_dsub+0x10c>
    31a6:	000d      	movs	r5, r1
    31a8:	4315      	orrs	r5, r2
    31aa:	d100      	bne.n	31ae <__aeabi_dsub+0x536>
    31ac:	e76b      	b.n	3086 <__aeabi_dsub+0x40e>
    31ae:	4650      	mov	r0, sl
    31b0:	0767      	lsls	r7, r4, #29
    31b2:	08c0      	lsrs	r0, r0, #3
    31b4:	4307      	orrs	r7, r0
    31b6:	2080      	movs	r0, #128	; 0x80
    31b8:	08e4      	lsrs	r4, r4, #3
    31ba:	0300      	lsls	r0, r0, #12
    31bc:	4204      	tst	r4, r0
    31be:	d007      	beq.n	31d0 <__aeabi_dsub+0x558>
    31c0:	08cd      	lsrs	r5, r1, #3
    31c2:	4205      	tst	r5, r0
    31c4:	d104      	bne.n	31d0 <__aeabi_dsub+0x558>
    31c6:	002c      	movs	r4, r5
    31c8:	4698      	mov	r8, r3
    31ca:	08d7      	lsrs	r7, r2, #3
    31cc:	0749      	lsls	r1, r1, #29
    31ce:	430f      	orrs	r7, r1
    31d0:	0f7b      	lsrs	r3, r7, #29
    31d2:	00e4      	lsls	r4, r4, #3
    31d4:	431c      	orrs	r4, r3
    31d6:	00ff      	lsls	r7, r7, #3
    31d8:	4e30      	ldr	r6, [pc, #192]	; (329c <__aeabi_dsub+0x624>)
    31da:	e5d3      	b.n	2d84 <__aeabi_dsub+0x10c>
    31dc:	4e2f      	ldr	r6, [pc, #188]	; (329c <__aeabi_dsub+0x624>)
    31de:	45b4      	cmp	ip, r6
    31e0:	d1b4      	bne.n	314c <__aeabi_dsub+0x4d4>
    31e2:	000c      	movs	r4, r1
    31e4:	0017      	movs	r7, r2
    31e6:	4666      	mov	r6, ip
    31e8:	e5cc      	b.n	2d84 <__aeabi_dsub+0x10c>
    31ea:	2700      	movs	r7, #0
    31ec:	2400      	movs	r4, #0
    31ee:	e5e8      	b.n	2dc2 <__aeabi_dsub+0x14a>
    31f0:	2b00      	cmp	r3, #0
    31f2:	d039      	beq.n	3268 <__aeabi_dsub+0x5f0>
    31f4:	000b      	movs	r3, r1
    31f6:	4313      	orrs	r3, r2
    31f8:	d100      	bne.n	31fc <__aeabi_dsub+0x584>
    31fa:	e744      	b.n	3086 <__aeabi_dsub+0x40e>
    31fc:	08c0      	lsrs	r0, r0, #3
    31fe:	0767      	lsls	r7, r4, #29
    3200:	4307      	orrs	r7, r0
    3202:	2080      	movs	r0, #128	; 0x80
    3204:	08e4      	lsrs	r4, r4, #3
    3206:	0300      	lsls	r0, r0, #12
    3208:	4204      	tst	r4, r0
    320a:	d0e1      	beq.n	31d0 <__aeabi_dsub+0x558>
    320c:	08cb      	lsrs	r3, r1, #3
    320e:	4203      	tst	r3, r0
    3210:	d1de      	bne.n	31d0 <__aeabi_dsub+0x558>
    3212:	08d7      	lsrs	r7, r2, #3
    3214:	0749      	lsls	r1, r1, #29
    3216:	430f      	orrs	r7, r1
    3218:	001c      	movs	r4, r3
    321a:	e7d9      	b.n	31d0 <__aeabi_dsub+0x558>
    321c:	2100      	movs	r1, #0
    321e:	e771      	b.n	3104 <__aeabi_dsub+0x48c>
    3220:	2500      	movs	r5, #0
    3222:	2700      	movs	r7, #0
    3224:	e5e9      	b.n	2dfa <__aeabi_dsub+0x182>
    3226:	002e      	movs	r6, r5
    3228:	0027      	movs	r7, r4
    322a:	3e20      	subs	r6, #32
    322c:	40f7      	lsrs	r7, r6
    322e:	2d20      	cmp	r5, #32
    3230:	d02f      	beq.n	3292 <__aeabi_dsub+0x61a>
    3232:	2640      	movs	r6, #64	; 0x40
    3234:	1b75      	subs	r5, r6, r5
    3236:	40ac      	lsls	r4, r5
    3238:	4650      	mov	r0, sl
    323a:	4320      	orrs	r0, r4
    323c:	1e44      	subs	r4, r0, #1
    323e:	41a0      	sbcs	r0, r4
    3240:	2400      	movs	r4, #0
    3242:	4338      	orrs	r0, r7
    3244:	e6dc      	b.n	3000 <__aeabi_dsub+0x388>
    3246:	2480      	movs	r4, #128	; 0x80
    3248:	2500      	movs	r5, #0
    324a:	0324      	lsls	r4, r4, #12
    324c:	4e13      	ldr	r6, [pc, #76]	; (329c <__aeabi_dsub+0x624>)
    324e:	2700      	movs	r7, #0
    3250:	e5d3      	b.n	2dfa <__aeabi_dsub+0x182>
    3252:	4650      	mov	r0, sl
    3254:	4320      	orrs	r0, r4
    3256:	0007      	movs	r7, r0
    3258:	1e78      	subs	r0, r7, #1
    325a:	4187      	sbcs	r7, r0
    325c:	2400      	movs	r4, #0
    325e:	18bf      	adds	r7, r7, r2
    3260:	e760      	b.n	3124 <__aeabi_dsub+0x4ac>
    3262:	000c      	movs	r4, r1
    3264:	0017      	movs	r7, r2
    3266:	e58d      	b.n	2d84 <__aeabi_dsub+0x10c>
    3268:	000c      	movs	r4, r1
    326a:	0017      	movs	r7, r2
    326c:	4e0b      	ldr	r6, [pc, #44]	; (329c <__aeabi_dsub+0x624>)
    326e:	e589      	b.n	2d84 <__aeabi_dsub+0x10c>
    3270:	001e      	movs	r6, r3
    3272:	0027      	movs	r7, r4
    3274:	3e20      	subs	r6, #32
    3276:	40f7      	lsrs	r7, r6
    3278:	2b20      	cmp	r3, #32
    327a:	d00c      	beq.n	3296 <__aeabi_dsub+0x61e>
    327c:	2640      	movs	r6, #64	; 0x40
    327e:	1af3      	subs	r3, r6, r3
    3280:	409c      	lsls	r4, r3
    3282:	4650      	mov	r0, sl
    3284:	4320      	orrs	r0, r4
    3286:	1e44      	subs	r4, r0, #1
    3288:	41a0      	sbcs	r0, r4
    328a:	4307      	orrs	r7, r0
    328c:	2400      	movs	r4, #0
    328e:	18bf      	adds	r7, r7, r2
    3290:	e748      	b.n	3124 <__aeabi_dsub+0x4ac>
    3292:	2400      	movs	r4, #0
    3294:	e7d0      	b.n	3238 <__aeabi_dsub+0x5c0>
    3296:	2400      	movs	r4, #0
    3298:	e7f3      	b.n	3282 <__aeabi_dsub+0x60a>
    329a:	46c0      	nop			; (mov r8, r8)
    329c:	000007ff 	.word	0x000007ff
    32a0:	ff7fffff 	.word	0xff7fffff

000032a4 <__aeabi_d2iz>:
    32a4:	b530      	push	{r4, r5, lr}
    32a6:	4d13      	ldr	r5, [pc, #76]	; (32f4 <__aeabi_d2iz+0x50>)
    32a8:	030a      	lsls	r2, r1, #12
    32aa:	004b      	lsls	r3, r1, #1
    32ac:	0b12      	lsrs	r2, r2, #12
    32ae:	0d5b      	lsrs	r3, r3, #21
    32b0:	0fc9      	lsrs	r1, r1, #31
    32b2:	2400      	movs	r4, #0
    32b4:	42ab      	cmp	r3, r5
    32b6:	dd10      	ble.n	32da <__aeabi_d2iz+0x36>
    32b8:	4c0f      	ldr	r4, [pc, #60]	; (32f8 <__aeabi_d2iz+0x54>)
    32ba:	42a3      	cmp	r3, r4
    32bc:	dc0f      	bgt.n	32de <__aeabi_d2iz+0x3a>
    32be:	2480      	movs	r4, #128	; 0x80
    32c0:	4d0e      	ldr	r5, [pc, #56]	; (32fc <__aeabi_d2iz+0x58>)
    32c2:	0364      	lsls	r4, r4, #13
    32c4:	4322      	orrs	r2, r4
    32c6:	1aed      	subs	r5, r5, r3
    32c8:	2d1f      	cmp	r5, #31
    32ca:	dd0b      	ble.n	32e4 <__aeabi_d2iz+0x40>
    32cc:	480c      	ldr	r0, [pc, #48]	; (3300 <__aeabi_d2iz+0x5c>)
    32ce:	1ac3      	subs	r3, r0, r3
    32d0:	40da      	lsrs	r2, r3
    32d2:	4254      	negs	r4, r2
    32d4:	2900      	cmp	r1, #0
    32d6:	d100      	bne.n	32da <__aeabi_d2iz+0x36>
    32d8:	0014      	movs	r4, r2
    32da:	0020      	movs	r0, r4
    32dc:	bd30      	pop	{r4, r5, pc}
    32de:	4b09      	ldr	r3, [pc, #36]	; (3304 <__aeabi_d2iz+0x60>)
    32e0:	18cc      	adds	r4, r1, r3
    32e2:	e7fa      	b.n	32da <__aeabi_d2iz+0x36>
    32e4:	4c08      	ldr	r4, [pc, #32]	; (3308 <__aeabi_d2iz+0x64>)
    32e6:	40e8      	lsrs	r0, r5
    32e8:	46a4      	mov	ip, r4
    32ea:	4463      	add	r3, ip
    32ec:	409a      	lsls	r2, r3
    32ee:	4302      	orrs	r2, r0
    32f0:	e7ef      	b.n	32d2 <__aeabi_d2iz+0x2e>
    32f2:	46c0      	nop			; (mov r8, r8)
    32f4:	000003fe 	.word	0x000003fe
    32f8:	0000041d 	.word	0x0000041d
    32fc:	00000433 	.word	0x00000433
    3300:	00000413 	.word	0x00000413
    3304:	7fffffff 	.word	0x7fffffff
    3308:	fffffbed 	.word	0xfffffbed

0000330c <__aeabi_i2d>:
    330c:	b570      	push	{r4, r5, r6, lr}
    330e:	2800      	cmp	r0, #0
    3310:	d030      	beq.n	3374 <__aeabi_i2d+0x68>
    3312:	17c3      	asrs	r3, r0, #31
    3314:	18c4      	adds	r4, r0, r3
    3316:	405c      	eors	r4, r3
    3318:	0fc5      	lsrs	r5, r0, #31
    331a:	0020      	movs	r0, r4
    331c:	f000 f8ae 	bl	347c <__clzsi2>
    3320:	4b17      	ldr	r3, [pc, #92]	; (3380 <__aeabi_i2d+0x74>)
    3322:	4a18      	ldr	r2, [pc, #96]	; (3384 <__aeabi_i2d+0x78>)
    3324:	1a1b      	subs	r3, r3, r0
    3326:	1ad2      	subs	r2, r2, r3
    3328:	2a1f      	cmp	r2, #31
    332a:	dd18      	ble.n	335e <__aeabi_i2d+0x52>
    332c:	4a16      	ldr	r2, [pc, #88]	; (3388 <__aeabi_i2d+0x7c>)
    332e:	1ad2      	subs	r2, r2, r3
    3330:	4094      	lsls	r4, r2
    3332:	2200      	movs	r2, #0
    3334:	0324      	lsls	r4, r4, #12
    3336:	055b      	lsls	r3, r3, #21
    3338:	0b24      	lsrs	r4, r4, #12
    333a:	0d5b      	lsrs	r3, r3, #21
    333c:	2100      	movs	r1, #0
    333e:	0010      	movs	r0, r2
    3340:	0324      	lsls	r4, r4, #12
    3342:	0d0a      	lsrs	r2, r1, #20
    3344:	0b24      	lsrs	r4, r4, #12
    3346:	0512      	lsls	r2, r2, #20
    3348:	4322      	orrs	r2, r4
    334a:	4c10      	ldr	r4, [pc, #64]	; (338c <__aeabi_i2d+0x80>)
    334c:	051b      	lsls	r3, r3, #20
    334e:	4022      	ands	r2, r4
    3350:	4313      	orrs	r3, r2
    3352:	005b      	lsls	r3, r3, #1
    3354:	07ed      	lsls	r5, r5, #31
    3356:	085b      	lsrs	r3, r3, #1
    3358:	432b      	orrs	r3, r5
    335a:	0019      	movs	r1, r3
    335c:	bd70      	pop	{r4, r5, r6, pc}
    335e:	0021      	movs	r1, r4
    3360:	4091      	lsls	r1, r2
    3362:	000a      	movs	r2, r1
    3364:	210b      	movs	r1, #11
    3366:	1a08      	subs	r0, r1, r0
    3368:	40c4      	lsrs	r4, r0
    336a:	055b      	lsls	r3, r3, #21
    336c:	0324      	lsls	r4, r4, #12
    336e:	0b24      	lsrs	r4, r4, #12
    3370:	0d5b      	lsrs	r3, r3, #21
    3372:	e7e3      	b.n	333c <__aeabi_i2d+0x30>
    3374:	2500      	movs	r5, #0
    3376:	2300      	movs	r3, #0
    3378:	2400      	movs	r4, #0
    337a:	2200      	movs	r2, #0
    337c:	e7de      	b.n	333c <__aeabi_i2d+0x30>
    337e:	46c0      	nop			; (mov r8, r8)
    3380:	0000041e 	.word	0x0000041e
    3384:	00000433 	.word	0x00000433
    3388:	00000413 	.word	0x00000413
    338c:	800fffff 	.word	0x800fffff

00003390 <__aeabi_ui2d>:
    3390:	b510      	push	{r4, lr}
    3392:	1e04      	subs	r4, r0, #0
    3394:	d028      	beq.n	33e8 <__aeabi_ui2d+0x58>
    3396:	f000 f871 	bl	347c <__clzsi2>
    339a:	4b15      	ldr	r3, [pc, #84]	; (33f0 <__aeabi_ui2d+0x60>)
    339c:	4a15      	ldr	r2, [pc, #84]	; (33f4 <__aeabi_ui2d+0x64>)
    339e:	1a1b      	subs	r3, r3, r0
    33a0:	1ad2      	subs	r2, r2, r3
    33a2:	2a1f      	cmp	r2, #31
    33a4:	dd15      	ble.n	33d2 <__aeabi_ui2d+0x42>
    33a6:	4a14      	ldr	r2, [pc, #80]	; (33f8 <__aeabi_ui2d+0x68>)
    33a8:	1ad2      	subs	r2, r2, r3
    33aa:	4094      	lsls	r4, r2
    33ac:	2200      	movs	r2, #0
    33ae:	0324      	lsls	r4, r4, #12
    33b0:	055b      	lsls	r3, r3, #21
    33b2:	0b24      	lsrs	r4, r4, #12
    33b4:	0d5b      	lsrs	r3, r3, #21
    33b6:	2100      	movs	r1, #0
    33b8:	0010      	movs	r0, r2
    33ba:	0324      	lsls	r4, r4, #12
    33bc:	0d0a      	lsrs	r2, r1, #20
    33be:	0b24      	lsrs	r4, r4, #12
    33c0:	0512      	lsls	r2, r2, #20
    33c2:	4322      	orrs	r2, r4
    33c4:	4c0d      	ldr	r4, [pc, #52]	; (33fc <__aeabi_ui2d+0x6c>)
    33c6:	051b      	lsls	r3, r3, #20
    33c8:	4022      	ands	r2, r4
    33ca:	4313      	orrs	r3, r2
    33cc:	005b      	lsls	r3, r3, #1
    33ce:	0859      	lsrs	r1, r3, #1
    33d0:	bd10      	pop	{r4, pc}
    33d2:	0021      	movs	r1, r4
    33d4:	4091      	lsls	r1, r2
    33d6:	000a      	movs	r2, r1
    33d8:	210b      	movs	r1, #11
    33da:	1a08      	subs	r0, r1, r0
    33dc:	40c4      	lsrs	r4, r0
    33de:	055b      	lsls	r3, r3, #21
    33e0:	0324      	lsls	r4, r4, #12
    33e2:	0b24      	lsrs	r4, r4, #12
    33e4:	0d5b      	lsrs	r3, r3, #21
    33e6:	e7e6      	b.n	33b6 <__aeabi_ui2d+0x26>
    33e8:	2300      	movs	r3, #0
    33ea:	2400      	movs	r4, #0
    33ec:	2200      	movs	r2, #0
    33ee:	e7e2      	b.n	33b6 <__aeabi_ui2d+0x26>
    33f0:	0000041e 	.word	0x0000041e
    33f4:	00000433 	.word	0x00000433
    33f8:	00000413 	.word	0x00000413
    33fc:	800fffff 	.word	0x800fffff

00003400 <__aeabi_cdrcmple>:
    3400:	4684      	mov	ip, r0
    3402:	1c10      	adds	r0, r2, #0
    3404:	4662      	mov	r2, ip
    3406:	468c      	mov	ip, r1
    3408:	1c19      	adds	r1, r3, #0
    340a:	4663      	mov	r3, ip
    340c:	e000      	b.n	3410 <__aeabi_cdcmpeq>
    340e:	46c0      	nop			; (mov r8, r8)

00003410 <__aeabi_cdcmpeq>:
    3410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3412:	f000 f8ef 	bl	35f4 <__ledf2>
    3416:	2800      	cmp	r0, #0
    3418:	d401      	bmi.n	341e <__aeabi_cdcmpeq+0xe>
    341a:	2100      	movs	r1, #0
    341c:	42c8      	cmn	r0, r1
    341e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003420 <__aeabi_dcmpeq>:
    3420:	b510      	push	{r4, lr}
    3422:	f000 f849 	bl	34b8 <__eqdf2>
    3426:	4240      	negs	r0, r0
    3428:	3001      	adds	r0, #1
    342a:	bd10      	pop	{r4, pc}

0000342c <__aeabi_dcmplt>:
    342c:	b510      	push	{r4, lr}
    342e:	f000 f8e1 	bl	35f4 <__ledf2>
    3432:	2800      	cmp	r0, #0
    3434:	db01      	blt.n	343a <__aeabi_dcmplt+0xe>
    3436:	2000      	movs	r0, #0
    3438:	bd10      	pop	{r4, pc}
    343a:	2001      	movs	r0, #1
    343c:	bd10      	pop	{r4, pc}
    343e:	46c0      	nop			; (mov r8, r8)

00003440 <__aeabi_dcmple>:
    3440:	b510      	push	{r4, lr}
    3442:	f000 f8d7 	bl	35f4 <__ledf2>
    3446:	2800      	cmp	r0, #0
    3448:	dd01      	ble.n	344e <__aeabi_dcmple+0xe>
    344a:	2000      	movs	r0, #0
    344c:	bd10      	pop	{r4, pc}
    344e:	2001      	movs	r0, #1
    3450:	bd10      	pop	{r4, pc}
    3452:	46c0      	nop			; (mov r8, r8)

00003454 <__aeabi_dcmpgt>:
    3454:	b510      	push	{r4, lr}
    3456:	f000 f869 	bl	352c <__gedf2>
    345a:	2800      	cmp	r0, #0
    345c:	dc01      	bgt.n	3462 <__aeabi_dcmpgt+0xe>
    345e:	2000      	movs	r0, #0
    3460:	bd10      	pop	{r4, pc}
    3462:	2001      	movs	r0, #1
    3464:	bd10      	pop	{r4, pc}
    3466:	46c0      	nop			; (mov r8, r8)

00003468 <__aeabi_dcmpge>:
    3468:	b510      	push	{r4, lr}
    346a:	f000 f85f 	bl	352c <__gedf2>
    346e:	2800      	cmp	r0, #0
    3470:	da01      	bge.n	3476 <__aeabi_dcmpge+0xe>
    3472:	2000      	movs	r0, #0
    3474:	bd10      	pop	{r4, pc}
    3476:	2001      	movs	r0, #1
    3478:	bd10      	pop	{r4, pc}
    347a:	46c0      	nop			; (mov r8, r8)

0000347c <__clzsi2>:
    347c:	211c      	movs	r1, #28
    347e:	2301      	movs	r3, #1
    3480:	041b      	lsls	r3, r3, #16
    3482:	4298      	cmp	r0, r3
    3484:	d301      	bcc.n	348a <__clzsi2+0xe>
    3486:	0c00      	lsrs	r0, r0, #16
    3488:	3910      	subs	r1, #16
    348a:	0a1b      	lsrs	r3, r3, #8
    348c:	4298      	cmp	r0, r3
    348e:	d301      	bcc.n	3494 <__clzsi2+0x18>
    3490:	0a00      	lsrs	r0, r0, #8
    3492:	3908      	subs	r1, #8
    3494:	091b      	lsrs	r3, r3, #4
    3496:	4298      	cmp	r0, r3
    3498:	d301      	bcc.n	349e <__clzsi2+0x22>
    349a:	0900      	lsrs	r0, r0, #4
    349c:	3904      	subs	r1, #4
    349e:	a202      	add	r2, pc, #8	; (adr r2, 34a8 <__clzsi2+0x2c>)
    34a0:	5c10      	ldrb	r0, [r2, r0]
    34a2:	1840      	adds	r0, r0, r1
    34a4:	4770      	bx	lr
    34a6:	46c0      	nop			; (mov r8, r8)
    34a8:	02020304 	.word	0x02020304
    34ac:	01010101 	.word	0x01010101
	...

000034b8 <__eqdf2>:
    34b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    34ba:	464f      	mov	r7, r9
    34bc:	4646      	mov	r6, r8
    34be:	46d6      	mov	lr, sl
    34c0:	005c      	lsls	r4, r3, #1
    34c2:	b5c0      	push	{r6, r7, lr}
    34c4:	031f      	lsls	r7, r3, #12
    34c6:	0fdb      	lsrs	r3, r3, #31
    34c8:	469a      	mov	sl, r3
    34ca:	4b17      	ldr	r3, [pc, #92]	; (3528 <__eqdf2+0x70>)
    34cc:	030e      	lsls	r6, r1, #12
    34ce:	004d      	lsls	r5, r1, #1
    34d0:	4684      	mov	ip, r0
    34d2:	4680      	mov	r8, r0
    34d4:	0b36      	lsrs	r6, r6, #12
    34d6:	0d6d      	lsrs	r5, r5, #21
    34d8:	0fc9      	lsrs	r1, r1, #31
    34da:	4691      	mov	r9, r2
    34dc:	0b3f      	lsrs	r7, r7, #12
    34de:	0d64      	lsrs	r4, r4, #21
    34e0:	2001      	movs	r0, #1
    34e2:	429d      	cmp	r5, r3
    34e4:	d008      	beq.n	34f8 <__eqdf2+0x40>
    34e6:	429c      	cmp	r4, r3
    34e8:	d001      	beq.n	34ee <__eqdf2+0x36>
    34ea:	42a5      	cmp	r5, r4
    34ec:	d00b      	beq.n	3506 <__eqdf2+0x4e>
    34ee:	bc1c      	pop	{r2, r3, r4}
    34f0:	4690      	mov	r8, r2
    34f2:	4699      	mov	r9, r3
    34f4:	46a2      	mov	sl, r4
    34f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34f8:	4663      	mov	r3, ip
    34fa:	4333      	orrs	r3, r6
    34fc:	d1f7      	bne.n	34ee <__eqdf2+0x36>
    34fe:	42ac      	cmp	r4, r5
    3500:	d1f5      	bne.n	34ee <__eqdf2+0x36>
    3502:	433a      	orrs	r2, r7
    3504:	d1f3      	bne.n	34ee <__eqdf2+0x36>
    3506:	2001      	movs	r0, #1
    3508:	42be      	cmp	r6, r7
    350a:	d1f0      	bne.n	34ee <__eqdf2+0x36>
    350c:	45c8      	cmp	r8, r9
    350e:	d1ee      	bne.n	34ee <__eqdf2+0x36>
    3510:	4551      	cmp	r1, sl
    3512:	d007      	beq.n	3524 <__eqdf2+0x6c>
    3514:	2d00      	cmp	r5, #0
    3516:	d1ea      	bne.n	34ee <__eqdf2+0x36>
    3518:	4663      	mov	r3, ip
    351a:	431e      	orrs	r6, r3
    351c:	0030      	movs	r0, r6
    351e:	1e46      	subs	r6, r0, #1
    3520:	41b0      	sbcs	r0, r6
    3522:	e7e4      	b.n	34ee <__eqdf2+0x36>
    3524:	2000      	movs	r0, #0
    3526:	e7e2      	b.n	34ee <__eqdf2+0x36>
    3528:	000007ff 	.word	0x000007ff

0000352c <__gedf2>:
    352c:	b5f0      	push	{r4, r5, r6, r7, lr}
    352e:	4645      	mov	r5, r8
    3530:	46de      	mov	lr, fp
    3532:	4657      	mov	r7, sl
    3534:	464e      	mov	r6, r9
    3536:	b5e0      	push	{r5, r6, r7, lr}
    3538:	031f      	lsls	r7, r3, #12
    353a:	0b3d      	lsrs	r5, r7, #12
    353c:	4f2c      	ldr	r7, [pc, #176]	; (35f0 <__gedf2+0xc4>)
    353e:	030e      	lsls	r6, r1, #12
    3540:	004c      	lsls	r4, r1, #1
    3542:	46ab      	mov	fp, r5
    3544:	005d      	lsls	r5, r3, #1
    3546:	4684      	mov	ip, r0
    3548:	0b36      	lsrs	r6, r6, #12
    354a:	0d64      	lsrs	r4, r4, #21
    354c:	0fc9      	lsrs	r1, r1, #31
    354e:	4690      	mov	r8, r2
    3550:	0d6d      	lsrs	r5, r5, #21
    3552:	0fdb      	lsrs	r3, r3, #31
    3554:	42bc      	cmp	r4, r7
    3556:	d02a      	beq.n	35ae <__gedf2+0x82>
    3558:	4f25      	ldr	r7, [pc, #148]	; (35f0 <__gedf2+0xc4>)
    355a:	42bd      	cmp	r5, r7
    355c:	d02d      	beq.n	35ba <__gedf2+0x8e>
    355e:	2c00      	cmp	r4, #0
    3560:	d10f      	bne.n	3582 <__gedf2+0x56>
    3562:	4330      	orrs	r0, r6
    3564:	0007      	movs	r7, r0
    3566:	4681      	mov	r9, r0
    3568:	4278      	negs	r0, r7
    356a:	4178      	adcs	r0, r7
    356c:	b2c0      	uxtb	r0, r0
    356e:	2d00      	cmp	r5, #0
    3570:	d117      	bne.n	35a2 <__gedf2+0x76>
    3572:	465f      	mov	r7, fp
    3574:	433a      	orrs	r2, r7
    3576:	d114      	bne.n	35a2 <__gedf2+0x76>
    3578:	464b      	mov	r3, r9
    357a:	2000      	movs	r0, #0
    357c:	2b00      	cmp	r3, #0
    357e:	d00a      	beq.n	3596 <__gedf2+0x6a>
    3580:	e006      	b.n	3590 <__gedf2+0x64>
    3582:	2d00      	cmp	r5, #0
    3584:	d102      	bne.n	358c <__gedf2+0x60>
    3586:	4658      	mov	r0, fp
    3588:	4302      	orrs	r2, r0
    358a:	d001      	beq.n	3590 <__gedf2+0x64>
    358c:	4299      	cmp	r1, r3
    358e:	d018      	beq.n	35c2 <__gedf2+0x96>
    3590:	4248      	negs	r0, r1
    3592:	2101      	movs	r1, #1
    3594:	4308      	orrs	r0, r1
    3596:	bc3c      	pop	{r2, r3, r4, r5}
    3598:	4690      	mov	r8, r2
    359a:	4699      	mov	r9, r3
    359c:	46a2      	mov	sl, r4
    359e:	46ab      	mov	fp, r5
    35a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35a2:	2800      	cmp	r0, #0
    35a4:	d0f2      	beq.n	358c <__gedf2+0x60>
    35a6:	2001      	movs	r0, #1
    35a8:	3b01      	subs	r3, #1
    35aa:	4318      	orrs	r0, r3
    35ac:	e7f3      	b.n	3596 <__gedf2+0x6a>
    35ae:	0037      	movs	r7, r6
    35b0:	4307      	orrs	r7, r0
    35b2:	d0d1      	beq.n	3558 <__gedf2+0x2c>
    35b4:	2002      	movs	r0, #2
    35b6:	4240      	negs	r0, r0
    35b8:	e7ed      	b.n	3596 <__gedf2+0x6a>
    35ba:	465f      	mov	r7, fp
    35bc:	4317      	orrs	r7, r2
    35be:	d0ce      	beq.n	355e <__gedf2+0x32>
    35c0:	e7f8      	b.n	35b4 <__gedf2+0x88>
    35c2:	42ac      	cmp	r4, r5
    35c4:	dce4      	bgt.n	3590 <__gedf2+0x64>
    35c6:	da03      	bge.n	35d0 <__gedf2+0xa4>
    35c8:	1e48      	subs	r0, r1, #1
    35ca:	2101      	movs	r1, #1
    35cc:	4308      	orrs	r0, r1
    35ce:	e7e2      	b.n	3596 <__gedf2+0x6a>
    35d0:	455e      	cmp	r6, fp
    35d2:	d8dd      	bhi.n	3590 <__gedf2+0x64>
    35d4:	d006      	beq.n	35e4 <__gedf2+0xb8>
    35d6:	2000      	movs	r0, #0
    35d8:	455e      	cmp	r6, fp
    35da:	d2dc      	bcs.n	3596 <__gedf2+0x6a>
    35dc:	2301      	movs	r3, #1
    35de:	1e48      	subs	r0, r1, #1
    35e0:	4318      	orrs	r0, r3
    35e2:	e7d8      	b.n	3596 <__gedf2+0x6a>
    35e4:	45c4      	cmp	ip, r8
    35e6:	d8d3      	bhi.n	3590 <__gedf2+0x64>
    35e8:	2000      	movs	r0, #0
    35ea:	45c4      	cmp	ip, r8
    35ec:	d3f6      	bcc.n	35dc <__gedf2+0xb0>
    35ee:	e7d2      	b.n	3596 <__gedf2+0x6a>
    35f0:	000007ff 	.word	0x000007ff

000035f4 <__ledf2>:
    35f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    35f6:	464e      	mov	r6, r9
    35f8:	4645      	mov	r5, r8
    35fa:	46de      	mov	lr, fp
    35fc:	4657      	mov	r7, sl
    35fe:	005c      	lsls	r4, r3, #1
    3600:	b5e0      	push	{r5, r6, r7, lr}
    3602:	031f      	lsls	r7, r3, #12
    3604:	0fdb      	lsrs	r3, r3, #31
    3606:	4699      	mov	r9, r3
    3608:	4b2a      	ldr	r3, [pc, #168]	; (36b4 <__ledf2+0xc0>)
    360a:	030e      	lsls	r6, r1, #12
    360c:	004d      	lsls	r5, r1, #1
    360e:	0fc9      	lsrs	r1, r1, #31
    3610:	4684      	mov	ip, r0
    3612:	0b36      	lsrs	r6, r6, #12
    3614:	0d6d      	lsrs	r5, r5, #21
    3616:	468b      	mov	fp, r1
    3618:	4690      	mov	r8, r2
    361a:	0b3f      	lsrs	r7, r7, #12
    361c:	0d64      	lsrs	r4, r4, #21
    361e:	429d      	cmp	r5, r3
    3620:	d020      	beq.n	3664 <__ledf2+0x70>
    3622:	4b24      	ldr	r3, [pc, #144]	; (36b4 <__ledf2+0xc0>)
    3624:	429c      	cmp	r4, r3
    3626:	d022      	beq.n	366e <__ledf2+0x7a>
    3628:	2d00      	cmp	r5, #0
    362a:	d112      	bne.n	3652 <__ledf2+0x5e>
    362c:	4330      	orrs	r0, r6
    362e:	4243      	negs	r3, r0
    3630:	4143      	adcs	r3, r0
    3632:	b2db      	uxtb	r3, r3
    3634:	2c00      	cmp	r4, #0
    3636:	d01f      	beq.n	3678 <__ledf2+0x84>
    3638:	2b00      	cmp	r3, #0
    363a:	d00c      	beq.n	3656 <__ledf2+0x62>
    363c:	464b      	mov	r3, r9
    363e:	2001      	movs	r0, #1
    3640:	3b01      	subs	r3, #1
    3642:	4303      	orrs	r3, r0
    3644:	0018      	movs	r0, r3
    3646:	bc3c      	pop	{r2, r3, r4, r5}
    3648:	4690      	mov	r8, r2
    364a:	4699      	mov	r9, r3
    364c:	46a2      	mov	sl, r4
    364e:	46ab      	mov	fp, r5
    3650:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3652:	2c00      	cmp	r4, #0
    3654:	d016      	beq.n	3684 <__ledf2+0x90>
    3656:	45cb      	cmp	fp, r9
    3658:	d017      	beq.n	368a <__ledf2+0x96>
    365a:	465b      	mov	r3, fp
    365c:	4259      	negs	r1, r3
    365e:	2301      	movs	r3, #1
    3660:	430b      	orrs	r3, r1
    3662:	e7ef      	b.n	3644 <__ledf2+0x50>
    3664:	0031      	movs	r1, r6
    3666:	2302      	movs	r3, #2
    3668:	4301      	orrs	r1, r0
    366a:	d1eb      	bne.n	3644 <__ledf2+0x50>
    366c:	e7d9      	b.n	3622 <__ledf2+0x2e>
    366e:	0039      	movs	r1, r7
    3670:	2302      	movs	r3, #2
    3672:	4311      	orrs	r1, r2
    3674:	d1e6      	bne.n	3644 <__ledf2+0x50>
    3676:	e7d7      	b.n	3628 <__ledf2+0x34>
    3678:	433a      	orrs	r2, r7
    367a:	d1dd      	bne.n	3638 <__ledf2+0x44>
    367c:	2300      	movs	r3, #0
    367e:	2800      	cmp	r0, #0
    3680:	d0e0      	beq.n	3644 <__ledf2+0x50>
    3682:	e7ea      	b.n	365a <__ledf2+0x66>
    3684:	433a      	orrs	r2, r7
    3686:	d1e6      	bne.n	3656 <__ledf2+0x62>
    3688:	e7e7      	b.n	365a <__ledf2+0x66>
    368a:	42a5      	cmp	r5, r4
    368c:	dce5      	bgt.n	365a <__ledf2+0x66>
    368e:	db05      	blt.n	369c <__ledf2+0xa8>
    3690:	42be      	cmp	r6, r7
    3692:	d8e2      	bhi.n	365a <__ledf2+0x66>
    3694:	d007      	beq.n	36a6 <__ledf2+0xb2>
    3696:	2300      	movs	r3, #0
    3698:	42be      	cmp	r6, r7
    369a:	d2d3      	bcs.n	3644 <__ledf2+0x50>
    369c:	4659      	mov	r1, fp
    369e:	2301      	movs	r3, #1
    36a0:	3901      	subs	r1, #1
    36a2:	430b      	orrs	r3, r1
    36a4:	e7ce      	b.n	3644 <__ledf2+0x50>
    36a6:	45c4      	cmp	ip, r8
    36a8:	d8d7      	bhi.n	365a <__ledf2+0x66>
    36aa:	2300      	movs	r3, #0
    36ac:	45c4      	cmp	ip, r8
    36ae:	d3f5      	bcc.n	369c <__ledf2+0xa8>
    36b0:	e7c8      	b.n	3644 <__ledf2+0x50>
    36b2:	46c0      	nop			; (mov r8, r8)
    36b4:	000007ff 	.word	0x000007ff

000036b8 <__libc_init_array>:
    36b8:	b570      	push	{r4, r5, r6, lr}
    36ba:	2600      	movs	r6, #0
    36bc:	4d0c      	ldr	r5, [pc, #48]	; (36f0 <__libc_init_array+0x38>)
    36be:	4c0d      	ldr	r4, [pc, #52]	; (36f4 <__libc_init_array+0x3c>)
    36c0:	1b64      	subs	r4, r4, r5
    36c2:	10a4      	asrs	r4, r4, #2
    36c4:	42a6      	cmp	r6, r4
    36c6:	d109      	bne.n	36dc <__libc_init_array+0x24>
    36c8:	2600      	movs	r6, #0
    36ca:	f001 fdd9 	bl	5280 <_init>
    36ce:	4d0a      	ldr	r5, [pc, #40]	; (36f8 <__libc_init_array+0x40>)
    36d0:	4c0a      	ldr	r4, [pc, #40]	; (36fc <__libc_init_array+0x44>)
    36d2:	1b64      	subs	r4, r4, r5
    36d4:	10a4      	asrs	r4, r4, #2
    36d6:	42a6      	cmp	r6, r4
    36d8:	d105      	bne.n	36e6 <__libc_init_array+0x2e>
    36da:	bd70      	pop	{r4, r5, r6, pc}
    36dc:	00b3      	lsls	r3, r6, #2
    36de:	58eb      	ldr	r3, [r5, r3]
    36e0:	4798      	blx	r3
    36e2:	3601      	adds	r6, #1
    36e4:	e7ee      	b.n	36c4 <__libc_init_array+0xc>
    36e6:	00b3      	lsls	r3, r6, #2
    36e8:	58eb      	ldr	r3, [r5, r3]
    36ea:	4798      	blx	r3
    36ec:	3601      	adds	r6, #1
    36ee:	e7f2      	b.n	36d6 <__libc_init_array+0x1e>
    36f0:	0000528c 	.word	0x0000528c
    36f4:	0000528c 	.word	0x0000528c
    36f8:	0000528c 	.word	0x0000528c
    36fc:	00005290 	.word	0x00005290

00003700 <memset>:
    3700:	0003      	movs	r3, r0
    3702:	1882      	adds	r2, r0, r2
    3704:	4293      	cmp	r3, r2
    3706:	d100      	bne.n	370a <memset+0xa>
    3708:	4770      	bx	lr
    370a:	7019      	strb	r1, [r3, #0]
    370c:	3301      	adds	r3, #1
    370e:	e7f9      	b.n	3704 <memset+0x4>

00003710 <iprintf>:
    3710:	b40f      	push	{r0, r1, r2, r3}
    3712:	4b0b      	ldr	r3, [pc, #44]	; (3740 <iprintf+0x30>)
    3714:	b513      	push	{r0, r1, r4, lr}
    3716:	681c      	ldr	r4, [r3, #0]
    3718:	2c00      	cmp	r4, #0
    371a:	d005      	beq.n	3728 <iprintf+0x18>
    371c:	69a3      	ldr	r3, [r4, #24]
    371e:	2b00      	cmp	r3, #0
    3720:	d102      	bne.n	3728 <iprintf+0x18>
    3722:	0020      	movs	r0, r4
    3724:	f000 faf2 	bl	3d0c <__sinit>
    3728:	ab05      	add	r3, sp, #20
    372a:	9a04      	ldr	r2, [sp, #16]
    372c:	68a1      	ldr	r1, [r4, #8]
    372e:	0020      	movs	r0, r4
    3730:	9301      	str	r3, [sp, #4]
    3732:	f000 fcc7 	bl	40c4 <_vfiprintf_r>
    3736:	bc16      	pop	{r1, r2, r4}
    3738:	bc08      	pop	{r3}
    373a:	b004      	add	sp, #16
    373c:	4718      	bx	r3
    373e:	46c0      	nop			; (mov r8, r8)
    3740:	200000a4 	.word	0x200000a4

00003744 <_puts_r>:
    3744:	b570      	push	{r4, r5, r6, lr}
    3746:	0005      	movs	r5, r0
    3748:	000e      	movs	r6, r1
    374a:	2800      	cmp	r0, #0
    374c:	d004      	beq.n	3758 <_puts_r+0x14>
    374e:	6983      	ldr	r3, [r0, #24]
    3750:	2b00      	cmp	r3, #0
    3752:	d101      	bne.n	3758 <_puts_r+0x14>
    3754:	f000 fada 	bl	3d0c <__sinit>
    3758:	69ab      	ldr	r3, [r5, #24]
    375a:	68ac      	ldr	r4, [r5, #8]
    375c:	2b00      	cmp	r3, #0
    375e:	d102      	bne.n	3766 <_puts_r+0x22>
    3760:	0028      	movs	r0, r5
    3762:	f000 fad3 	bl	3d0c <__sinit>
    3766:	4b24      	ldr	r3, [pc, #144]	; (37f8 <_puts_r+0xb4>)
    3768:	429c      	cmp	r4, r3
    376a:	d10f      	bne.n	378c <_puts_r+0x48>
    376c:	686c      	ldr	r4, [r5, #4]
    376e:	89a3      	ldrh	r3, [r4, #12]
    3770:	071b      	lsls	r3, r3, #28
    3772:	d502      	bpl.n	377a <_puts_r+0x36>
    3774:	6923      	ldr	r3, [r4, #16]
    3776:	2b00      	cmp	r3, #0
    3778:	d120      	bne.n	37bc <_puts_r+0x78>
    377a:	0021      	movs	r1, r4
    377c:	0028      	movs	r0, r5
    377e:	f000 f957 	bl	3a30 <__swsetup_r>
    3782:	2800      	cmp	r0, #0
    3784:	d01a      	beq.n	37bc <_puts_r+0x78>
    3786:	2001      	movs	r0, #1
    3788:	4240      	negs	r0, r0
    378a:	bd70      	pop	{r4, r5, r6, pc}
    378c:	4b1b      	ldr	r3, [pc, #108]	; (37fc <_puts_r+0xb8>)
    378e:	429c      	cmp	r4, r3
    3790:	d101      	bne.n	3796 <_puts_r+0x52>
    3792:	68ac      	ldr	r4, [r5, #8]
    3794:	e7eb      	b.n	376e <_puts_r+0x2a>
    3796:	4b1a      	ldr	r3, [pc, #104]	; (3800 <_puts_r+0xbc>)
    3798:	429c      	cmp	r4, r3
    379a:	d1e8      	bne.n	376e <_puts_r+0x2a>
    379c:	68ec      	ldr	r4, [r5, #12]
    379e:	e7e6      	b.n	376e <_puts_r+0x2a>
    37a0:	3b01      	subs	r3, #1
    37a2:	3601      	adds	r6, #1
    37a4:	60a3      	str	r3, [r4, #8]
    37a6:	2b00      	cmp	r3, #0
    37a8:	da04      	bge.n	37b4 <_puts_r+0x70>
    37aa:	69a2      	ldr	r2, [r4, #24]
    37ac:	4293      	cmp	r3, r2
    37ae:	db16      	blt.n	37de <_puts_r+0x9a>
    37b0:	290a      	cmp	r1, #10
    37b2:	d014      	beq.n	37de <_puts_r+0x9a>
    37b4:	6823      	ldr	r3, [r4, #0]
    37b6:	1c5a      	adds	r2, r3, #1
    37b8:	6022      	str	r2, [r4, #0]
    37ba:	7019      	strb	r1, [r3, #0]
    37bc:	7831      	ldrb	r1, [r6, #0]
    37be:	68a3      	ldr	r3, [r4, #8]
    37c0:	2900      	cmp	r1, #0
    37c2:	d1ed      	bne.n	37a0 <_puts_r+0x5c>
    37c4:	3b01      	subs	r3, #1
    37c6:	60a3      	str	r3, [r4, #8]
    37c8:	2b00      	cmp	r3, #0
    37ca:	da0f      	bge.n	37ec <_puts_r+0xa8>
    37cc:	0022      	movs	r2, r4
    37ce:	310a      	adds	r1, #10
    37d0:	0028      	movs	r0, r5
    37d2:	f000 f8d7 	bl	3984 <__swbuf_r>
    37d6:	1c43      	adds	r3, r0, #1
    37d8:	d0d5      	beq.n	3786 <_puts_r+0x42>
    37da:	200a      	movs	r0, #10
    37dc:	e7d5      	b.n	378a <_puts_r+0x46>
    37de:	0022      	movs	r2, r4
    37e0:	0028      	movs	r0, r5
    37e2:	f000 f8cf 	bl	3984 <__swbuf_r>
    37e6:	1c43      	adds	r3, r0, #1
    37e8:	d1e8      	bne.n	37bc <_puts_r+0x78>
    37ea:	e7cc      	b.n	3786 <_puts_r+0x42>
    37ec:	200a      	movs	r0, #10
    37ee:	6823      	ldr	r3, [r4, #0]
    37f0:	1c5a      	adds	r2, r3, #1
    37f2:	6022      	str	r2, [r4, #0]
    37f4:	7018      	strb	r0, [r3, #0]
    37f6:	e7c8      	b.n	378a <_puts_r+0x46>
    37f8:	0000520c 	.word	0x0000520c
    37fc:	0000522c 	.word	0x0000522c
    3800:	000051ec 	.word	0x000051ec

00003804 <puts>:
    3804:	b510      	push	{r4, lr}
    3806:	4b03      	ldr	r3, [pc, #12]	; (3814 <puts+0x10>)
    3808:	0001      	movs	r1, r0
    380a:	6818      	ldr	r0, [r3, #0]
    380c:	f7ff ff9a 	bl	3744 <_puts_r>
    3810:	bd10      	pop	{r4, pc}
    3812:	46c0      	nop			; (mov r8, r8)
    3814:	200000a4 	.word	0x200000a4

00003818 <setbuf>:
    3818:	424a      	negs	r2, r1
    381a:	414a      	adcs	r2, r1
    381c:	2380      	movs	r3, #128	; 0x80
    381e:	b510      	push	{r4, lr}
    3820:	0052      	lsls	r2, r2, #1
    3822:	00db      	lsls	r3, r3, #3
    3824:	f000 f802 	bl	382c <setvbuf>
    3828:	bd10      	pop	{r4, pc}
	...

0000382c <setvbuf>:
    382c:	b5f0      	push	{r4, r5, r6, r7, lr}
    382e:	001d      	movs	r5, r3
    3830:	4b4f      	ldr	r3, [pc, #316]	; (3970 <setvbuf+0x144>)
    3832:	b085      	sub	sp, #20
    3834:	681e      	ldr	r6, [r3, #0]
    3836:	0004      	movs	r4, r0
    3838:	000f      	movs	r7, r1
    383a:	9200      	str	r2, [sp, #0]
    383c:	2e00      	cmp	r6, #0
    383e:	d005      	beq.n	384c <setvbuf+0x20>
    3840:	69b3      	ldr	r3, [r6, #24]
    3842:	2b00      	cmp	r3, #0
    3844:	d102      	bne.n	384c <setvbuf+0x20>
    3846:	0030      	movs	r0, r6
    3848:	f000 fa60 	bl	3d0c <__sinit>
    384c:	4b49      	ldr	r3, [pc, #292]	; (3974 <setvbuf+0x148>)
    384e:	429c      	cmp	r4, r3
    3850:	d150      	bne.n	38f4 <setvbuf+0xc8>
    3852:	6874      	ldr	r4, [r6, #4]
    3854:	9b00      	ldr	r3, [sp, #0]
    3856:	2b02      	cmp	r3, #2
    3858:	d005      	beq.n	3866 <setvbuf+0x3a>
    385a:	2b01      	cmp	r3, #1
    385c:	d900      	bls.n	3860 <setvbuf+0x34>
    385e:	e084      	b.n	396a <setvbuf+0x13e>
    3860:	2d00      	cmp	r5, #0
    3862:	da00      	bge.n	3866 <setvbuf+0x3a>
    3864:	e081      	b.n	396a <setvbuf+0x13e>
    3866:	0021      	movs	r1, r4
    3868:	0030      	movs	r0, r6
    386a:	f000 f9e1 	bl	3c30 <_fflush_r>
    386e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3870:	2900      	cmp	r1, #0
    3872:	d008      	beq.n	3886 <setvbuf+0x5a>
    3874:	0023      	movs	r3, r4
    3876:	3344      	adds	r3, #68	; 0x44
    3878:	4299      	cmp	r1, r3
    387a:	d002      	beq.n	3882 <setvbuf+0x56>
    387c:	0030      	movs	r0, r6
    387e:	f000 fb51 	bl	3f24 <_free_r>
    3882:	2300      	movs	r3, #0
    3884:	6363      	str	r3, [r4, #52]	; 0x34
    3886:	2300      	movs	r3, #0
    3888:	61a3      	str	r3, [r4, #24]
    388a:	6063      	str	r3, [r4, #4]
    388c:	89a3      	ldrh	r3, [r4, #12]
    388e:	061b      	lsls	r3, r3, #24
    3890:	d503      	bpl.n	389a <setvbuf+0x6e>
    3892:	6921      	ldr	r1, [r4, #16]
    3894:	0030      	movs	r0, r6
    3896:	f000 fb45 	bl	3f24 <_free_r>
    389a:	89a3      	ldrh	r3, [r4, #12]
    389c:	4a36      	ldr	r2, [pc, #216]	; (3978 <setvbuf+0x14c>)
    389e:	4013      	ands	r3, r2
    38a0:	81a3      	strh	r3, [r4, #12]
    38a2:	9b00      	ldr	r3, [sp, #0]
    38a4:	2b02      	cmp	r3, #2
    38a6:	d05a      	beq.n	395e <setvbuf+0x132>
    38a8:	ab03      	add	r3, sp, #12
    38aa:	aa02      	add	r2, sp, #8
    38ac:	0021      	movs	r1, r4
    38ae:	0030      	movs	r0, r6
    38b0:	f000 fac2 	bl	3e38 <__swhatbuf_r>
    38b4:	89a3      	ldrh	r3, [r4, #12]
    38b6:	4318      	orrs	r0, r3
    38b8:	81a0      	strh	r0, [r4, #12]
    38ba:	2d00      	cmp	r5, #0
    38bc:	d124      	bne.n	3908 <setvbuf+0xdc>
    38be:	9d02      	ldr	r5, [sp, #8]
    38c0:	0028      	movs	r0, r5
    38c2:	f000 fb25 	bl	3f10 <malloc>
    38c6:	9501      	str	r5, [sp, #4]
    38c8:	1e07      	subs	r7, r0, #0
    38ca:	d142      	bne.n	3952 <setvbuf+0x126>
    38cc:	9b02      	ldr	r3, [sp, #8]
    38ce:	9301      	str	r3, [sp, #4]
    38d0:	42ab      	cmp	r3, r5
    38d2:	d139      	bne.n	3948 <setvbuf+0x11c>
    38d4:	2001      	movs	r0, #1
    38d6:	4240      	negs	r0, r0
    38d8:	2302      	movs	r3, #2
    38da:	89a2      	ldrh	r2, [r4, #12]
    38dc:	4313      	orrs	r3, r2
    38de:	81a3      	strh	r3, [r4, #12]
    38e0:	2300      	movs	r3, #0
    38e2:	60a3      	str	r3, [r4, #8]
    38e4:	0023      	movs	r3, r4
    38e6:	3347      	adds	r3, #71	; 0x47
    38e8:	6023      	str	r3, [r4, #0]
    38ea:	6123      	str	r3, [r4, #16]
    38ec:	2301      	movs	r3, #1
    38ee:	6163      	str	r3, [r4, #20]
    38f0:	b005      	add	sp, #20
    38f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38f4:	4b21      	ldr	r3, [pc, #132]	; (397c <setvbuf+0x150>)
    38f6:	429c      	cmp	r4, r3
    38f8:	d101      	bne.n	38fe <setvbuf+0xd2>
    38fa:	68b4      	ldr	r4, [r6, #8]
    38fc:	e7aa      	b.n	3854 <setvbuf+0x28>
    38fe:	4b20      	ldr	r3, [pc, #128]	; (3980 <setvbuf+0x154>)
    3900:	429c      	cmp	r4, r3
    3902:	d1a7      	bne.n	3854 <setvbuf+0x28>
    3904:	68f4      	ldr	r4, [r6, #12]
    3906:	e7a5      	b.n	3854 <setvbuf+0x28>
    3908:	2f00      	cmp	r7, #0
    390a:	d0d9      	beq.n	38c0 <setvbuf+0x94>
    390c:	69b3      	ldr	r3, [r6, #24]
    390e:	2b00      	cmp	r3, #0
    3910:	d102      	bne.n	3918 <setvbuf+0xec>
    3912:	0030      	movs	r0, r6
    3914:	f000 f9fa 	bl	3d0c <__sinit>
    3918:	9b00      	ldr	r3, [sp, #0]
    391a:	2b01      	cmp	r3, #1
    391c:	d103      	bne.n	3926 <setvbuf+0xfa>
    391e:	89a3      	ldrh	r3, [r4, #12]
    3920:	9a00      	ldr	r2, [sp, #0]
    3922:	431a      	orrs	r2, r3
    3924:	81a2      	strh	r2, [r4, #12]
    3926:	2008      	movs	r0, #8
    3928:	89a3      	ldrh	r3, [r4, #12]
    392a:	6027      	str	r7, [r4, #0]
    392c:	6127      	str	r7, [r4, #16]
    392e:	6165      	str	r5, [r4, #20]
    3930:	4018      	ands	r0, r3
    3932:	d018      	beq.n	3966 <setvbuf+0x13a>
    3934:	2001      	movs	r0, #1
    3936:	4018      	ands	r0, r3
    3938:	2300      	movs	r3, #0
    393a:	4298      	cmp	r0, r3
    393c:	d011      	beq.n	3962 <setvbuf+0x136>
    393e:	426d      	negs	r5, r5
    3940:	60a3      	str	r3, [r4, #8]
    3942:	61a5      	str	r5, [r4, #24]
    3944:	0018      	movs	r0, r3
    3946:	e7d3      	b.n	38f0 <setvbuf+0xc4>
    3948:	9801      	ldr	r0, [sp, #4]
    394a:	f000 fae1 	bl	3f10 <malloc>
    394e:	1e07      	subs	r7, r0, #0
    3950:	d0c0      	beq.n	38d4 <setvbuf+0xa8>
    3952:	2380      	movs	r3, #128	; 0x80
    3954:	89a2      	ldrh	r2, [r4, #12]
    3956:	9d01      	ldr	r5, [sp, #4]
    3958:	4313      	orrs	r3, r2
    395a:	81a3      	strh	r3, [r4, #12]
    395c:	e7d6      	b.n	390c <setvbuf+0xe0>
    395e:	2000      	movs	r0, #0
    3960:	e7ba      	b.n	38d8 <setvbuf+0xac>
    3962:	60a5      	str	r5, [r4, #8]
    3964:	e7c4      	b.n	38f0 <setvbuf+0xc4>
    3966:	60a0      	str	r0, [r4, #8]
    3968:	e7c2      	b.n	38f0 <setvbuf+0xc4>
    396a:	2001      	movs	r0, #1
    396c:	4240      	negs	r0, r0
    396e:	e7bf      	b.n	38f0 <setvbuf+0xc4>
    3970:	200000a4 	.word	0x200000a4
    3974:	0000520c 	.word	0x0000520c
    3978:	fffff35c 	.word	0xfffff35c
    397c:	0000522c 	.word	0x0000522c
    3980:	000051ec 	.word	0x000051ec

00003984 <__swbuf_r>:
    3984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3986:	0005      	movs	r5, r0
    3988:	000e      	movs	r6, r1
    398a:	0014      	movs	r4, r2
    398c:	2800      	cmp	r0, #0
    398e:	d004      	beq.n	399a <__swbuf_r+0x16>
    3990:	6983      	ldr	r3, [r0, #24]
    3992:	2b00      	cmp	r3, #0
    3994:	d101      	bne.n	399a <__swbuf_r+0x16>
    3996:	f000 f9b9 	bl	3d0c <__sinit>
    399a:	4b22      	ldr	r3, [pc, #136]	; (3a24 <__swbuf_r+0xa0>)
    399c:	429c      	cmp	r4, r3
    399e:	d12d      	bne.n	39fc <__swbuf_r+0x78>
    39a0:	686c      	ldr	r4, [r5, #4]
    39a2:	69a3      	ldr	r3, [r4, #24]
    39a4:	60a3      	str	r3, [r4, #8]
    39a6:	89a3      	ldrh	r3, [r4, #12]
    39a8:	071b      	lsls	r3, r3, #28
    39aa:	d531      	bpl.n	3a10 <__swbuf_r+0x8c>
    39ac:	6923      	ldr	r3, [r4, #16]
    39ae:	2b00      	cmp	r3, #0
    39b0:	d02e      	beq.n	3a10 <__swbuf_r+0x8c>
    39b2:	6823      	ldr	r3, [r4, #0]
    39b4:	6922      	ldr	r2, [r4, #16]
    39b6:	b2f7      	uxtb	r7, r6
    39b8:	1a98      	subs	r0, r3, r2
    39ba:	6963      	ldr	r3, [r4, #20]
    39bc:	b2f6      	uxtb	r6, r6
    39be:	4298      	cmp	r0, r3
    39c0:	db05      	blt.n	39ce <__swbuf_r+0x4a>
    39c2:	0021      	movs	r1, r4
    39c4:	0028      	movs	r0, r5
    39c6:	f000 f933 	bl	3c30 <_fflush_r>
    39ca:	2800      	cmp	r0, #0
    39cc:	d126      	bne.n	3a1c <__swbuf_r+0x98>
    39ce:	68a3      	ldr	r3, [r4, #8]
    39d0:	3001      	adds	r0, #1
    39d2:	3b01      	subs	r3, #1
    39d4:	60a3      	str	r3, [r4, #8]
    39d6:	6823      	ldr	r3, [r4, #0]
    39d8:	1c5a      	adds	r2, r3, #1
    39da:	6022      	str	r2, [r4, #0]
    39dc:	701f      	strb	r7, [r3, #0]
    39de:	6963      	ldr	r3, [r4, #20]
    39e0:	4298      	cmp	r0, r3
    39e2:	d004      	beq.n	39ee <__swbuf_r+0x6a>
    39e4:	89a3      	ldrh	r3, [r4, #12]
    39e6:	07db      	lsls	r3, r3, #31
    39e8:	d51a      	bpl.n	3a20 <__swbuf_r+0x9c>
    39ea:	2e0a      	cmp	r6, #10
    39ec:	d118      	bne.n	3a20 <__swbuf_r+0x9c>
    39ee:	0021      	movs	r1, r4
    39f0:	0028      	movs	r0, r5
    39f2:	f000 f91d 	bl	3c30 <_fflush_r>
    39f6:	2800      	cmp	r0, #0
    39f8:	d012      	beq.n	3a20 <__swbuf_r+0x9c>
    39fa:	e00f      	b.n	3a1c <__swbuf_r+0x98>
    39fc:	4b0a      	ldr	r3, [pc, #40]	; (3a28 <__swbuf_r+0xa4>)
    39fe:	429c      	cmp	r4, r3
    3a00:	d101      	bne.n	3a06 <__swbuf_r+0x82>
    3a02:	68ac      	ldr	r4, [r5, #8]
    3a04:	e7cd      	b.n	39a2 <__swbuf_r+0x1e>
    3a06:	4b09      	ldr	r3, [pc, #36]	; (3a2c <__swbuf_r+0xa8>)
    3a08:	429c      	cmp	r4, r3
    3a0a:	d1ca      	bne.n	39a2 <__swbuf_r+0x1e>
    3a0c:	68ec      	ldr	r4, [r5, #12]
    3a0e:	e7c8      	b.n	39a2 <__swbuf_r+0x1e>
    3a10:	0021      	movs	r1, r4
    3a12:	0028      	movs	r0, r5
    3a14:	f000 f80c 	bl	3a30 <__swsetup_r>
    3a18:	2800      	cmp	r0, #0
    3a1a:	d0ca      	beq.n	39b2 <__swbuf_r+0x2e>
    3a1c:	2601      	movs	r6, #1
    3a1e:	4276      	negs	r6, r6
    3a20:	0030      	movs	r0, r6
    3a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a24:	0000520c 	.word	0x0000520c
    3a28:	0000522c 	.word	0x0000522c
    3a2c:	000051ec 	.word	0x000051ec

00003a30 <__swsetup_r>:
    3a30:	4b36      	ldr	r3, [pc, #216]	; (3b0c <__swsetup_r+0xdc>)
    3a32:	b570      	push	{r4, r5, r6, lr}
    3a34:	681d      	ldr	r5, [r3, #0]
    3a36:	0006      	movs	r6, r0
    3a38:	000c      	movs	r4, r1
    3a3a:	2d00      	cmp	r5, #0
    3a3c:	d005      	beq.n	3a4a <__swsetup_r+0x1a>
    3a3e:	69ab      	ldr	r3, [r5, #24]
    3a40:	2b00      	cmp	r3, #0
    3a42:	d102      	bne.n	3a4a <__swsetup_r+0x1a>
    3a44:	0028      	movs	r0, r5
    3a46:	f000 f961 	bl	3d0c <__sinit>
    3a4a:	4b31      	ldr	r3, [pc, #196]	; (3b10 <__swsetup_r+0xe0>)
    3a4c:	429c      	cmp	r4, r3
    3a4e:	d10f      	bne.n	3a70 <__swsetup_r+0x40>
    3a50:	686c      	ldr	r4, [r5, #4]
    3a52:	230c      	movs	r3, #12
    3a54:	5ee2      	ldrsh	r2, [r4, r3]
    3a56:	b293      	uxth	r3, r2
    3a58:	0719      	lsls	r1, r3, #28
    3a5a:	d42d      	bmi.n	3ab8 <__swsetup_r+0x88>
    3a5c:	06d9      	lsls	r1, r3, #27
    3a5e:	d411      	bmi.n	3a84 <__swsetup_r+0x54>
    3a60:	2309      	movs	r3, #9
    3a62:	2001      	movs	r0, #1
    3a64:	6033      	str	r3, [r6, #0]
    3a66:	3337      	adds	r3, #55	; 0x37
    3a68:	4313      	orrs	r3, r2
    3a6a:	81a3      	strh	r3, [r4, #12]
    3a6c:	4240      	negs	r0, r0
    3a6e:	bd70      	pop	{r4, r5, r6, pc}
    3a70:	4b28      	ldr	r3, [pc, #160]	; (3b14 <__swsetup_r+0xe4>)
    3a72:	429c      	cmp	r4, r3
    3a74:	d101      	bne.n	3a7a <__swsetup_r+0x4a>
    3a76:	68ac      	ldr	r4, [r5, #8]
    3a78:	e7eb      	b.n	3a52 <__swsetup_r+0x22>
    3a7a:	4b27      	ldr	r3, [pc, #156]	; (3b18 <__swsetup_r+0xe8>)
    3a7c:	429c      	cmp	r4, r3
    3a7e:	d1e8      	bne.n	3a52 <__swsetup_r+0x22>
    3a80:	68ec      	ldr	r4, [r5, #12]
    3a82:	e7e6      	b.n	3a52 <__swsetup_r+0x22>
    3a84:	075b      	lsls	r3, r3, #29
    3a86:	d513      	bpl.n	3ab0 <__swsetup_r+0x80>
    3a88:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3a8a:	2900      	cmp	r1, #0
    3a8c:	d008      	beq.n	3aa0 <__swsetup_r+0x70>
    3a8e:	0023      	movs	r3, r4
    3a90:	3344      	adds	r3, #68	; 0x44
    3a92:	4299      	cmp	r1, r3
    3a94:	d002      	beq.n	3a9c <__swsetup_r+0x6c>
    3a96:	0030      	movs	r0, r6
    3a98:	f000 fa44 	bl	3f24 <_free_r>
    3a9c:	2300      	movs	r3, #0
    3a9e:	6363      	str	r3, [r4, #52]	; 0x34
    3aa0:	2224      	movs	r2, #36	; 0x24
    3aa2:	89a3      	ldrh	r3, [r4, #12]
    3aa4:	4393      	bics	r3, r2
    3aa6:	81a3      	strh	r3, [r4, #12]
    3aa8:	2300      	movs	r3, #0
    3aaa:	6063      	str	r3, [r4, #4]
    3aac:	6923      	ldr	r3, [r4, #16]
    3aae:	6023      	str	r3, [r4, #0]
    3ab0:	2308      	movs	r3, #8
    3ab2:	89a2      	ldrh	r2, [r4, #12]
    3ab4:	4313      	orrs	r3, r2
    3ab6:	81a3      	strh	r3, [r4, #12]
    3ab8:	6923      	ldr	r3, [r4, #16]
    3aba:	2b00      	cmp	r3, #0
    3abc:	d10b      	bne.n	3ad6 <__swsetup_r+0xa6>
    3abe:	21a0      	movs	r1, #160	; 0xa0
    3ac0:	2280      	movs	r2, #128	; 0x80
    3ac2:	89a3      	ldrh	r3, [r4, #12]
    3ac4:	0089      	lsls	r1, r1, #2
    3ac6:	0092      	lsls	r2, r2, #2
    3ac8:	400b      	ands	r3, r1
    3aca:	4293      	cmp	r3, r2
    3acc:	d003      	beq.n	3ad6 <__swsetup_r+0xa6>
    3ace:	0021      	movs	r1, r4
    3ad0:	0030      	movs	r0, r6
    3ad2:	f000 f9d9 	bl	3e88 <__smakebuf_r>
    3ad6:	2301      	movs	r3, #1
    3ad8:	89a2      	ldrh	r2, [r4, #12]
    3ada:	4013      	ands	r3, r2
    3adc:	d011      	beq.n	3b02 <__swsetup_r+0xd2>
    3ade:	2300      	movs	r3, #0
    3ae0:	60a3      	str	r3, [r4, #8]
    3ae2:	6963      	ldr	r3, [r4, #20]
    3ae4:	425b      	negs	r3, r3
    3ae6:	61a3      	str	r3, [r4, #24]
    3ae8:	2000      	movs	r0, #0
    3aea:	6923      	ldr	r3, [r4, #16]
    3aec:	4283      	cmp	r3, r0
    3aee:	d1be      	bne.n	3a6e <__swsetup_r+0x3e>
    3af0:	230c      	movs	r3, #12
    3af2:	5ee2      	ldrsh	r2, [r4, r3]
    3af4:	0613      	lsls	r3, r2, #24
    3af6:	d5ba      	bpl.n	3a6e <__swsetup_r+0x3e>
    3af8:	2340      	movs	r3, #64	; 0x40
    3afa:	4313      	orrs	r3, r2
    3afc:	81a3      	strh	r3, [r4, #12]
    3afe:	3801      	subs	r0, #1
    3b00:	e7b5      	b.n	3a6e <__swsetup_r+0x3e>
    3b02:	0792      	lsls	r2, r2, #30
    3b04:	d400      	bmi.n	3b08 <__swsetup_r+0xd8>
    3b06:	6963      	ldr	r3, [r4, #20]
    3b08:	60a3      	str	r3, [r4, #8]
    3b0a:	e7ed      	b.n	3ae8 <__swsetup_r+0xb8>
    3b0c:	200000a4 	.word	0x200000a4
    3b10:	0000520c 	.word	0x0000520c
    3b14:	0000522c 	.word	0x0000522c
    3b18:	000051ec 	.word	0x000051ec

00003b1c <__sflush_r>:
    3b1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3b1e:	898a      	ldrh	r2, [r1, #12]
    3b20:	0005      	movs	r5, r0
    3b22:	000c      	movs	r4, r1
    3b24:	0713      	lsls	r3, r2, #28
    3b26:	d460      	bmi.n	3bea <__sflush_r+0xce>
    3b28:	684b      	ldr	r3, [r1, #4]
    3b2a:	2b00      	cmp	r3, #0
    3b2c:	dc04      	bgt.n	3b38 <__sflush_r+0x1c>
    3b2e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3b30:	2b00      	cmp	r3, #0
    3b32:	dc01      	bgt.n	3b38 <__sflush_r+0x1c>
    3b34:	2000      	movs	r0, #0
    3b36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3b38:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3b3a:	2f00      	cmp	r7, #0
    3b3c:	d0fa      	beq.n	3b34 <__sflush_r+0x18>
    3b3e:	2300      	movs	r3, #0
    3b40:	682e      	ldr	r6, [r5, #0]
    3b42:	602b      	str	r3, [r5, #0]
    3b44:	2380      	movs	r3, #128	; 0x80
    3b46:	015b      	lsls	r3, r3, #5
    3b48:	401a      	ands	r2, r3
    3b4a:	d034      	beq.n	3bb6 <__sflush_r+0x9a>
    3b4c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    3b4e:	89a3      	ldrh	r3, [r4, #12]
    3b50:	075b      	lsls	r3, r3, #29
    3b52:	d506      	bpl.n	3b62 <__sflush_r+0x46>
    3b54:	6863      	ldr	r3, [r4, #4]
    3b56:	1ac0      	subs	r0, r0, r3
    3b58:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3b5a:	2b00      	cmp	r3, #0
    3b5c:	d001      	beq.n	3b62 <__sflush_r+0x46>
    3b5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3b60:	1ac0      	subs	r0, r0, r3
    3b62:	0002      	movs	r2, r0
    3b64:	6a21      	ldr	r1, [r4, #32]
    3b66:	2300      	movs	r3, #0
    3b68:	0028      	movs	r0, r5
    3b6a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3b6c:	47b8      	blx	r7
    3b6e:	89a1      	ldrh	r1, [r4, #12]
    3b70:	1c43      	adds	r3, r0, #1
    3b72:	d106      	bne.n	3b82 <__sflush_r+0x66>
    3b74:	682b      	ldr	r3, [r5, #0]
    3b76:	2b1d      	cmp	r3, #29
    3b78:	d831      	bhi.n	3bde <__sflush_r+0xc2>
    3b7a:	4a2c      	ldr	r2, [pc, #176]	; (3c2c <__sflush_r+0x110>)
    3b7c:	40da      	lsrs	r2, r3
    3b7e:	07d3      	lsls	r3, r2, #31
    3b80:	d52d      	bpl.n	3bde <__sflush_r+0xc2>
    3b82:	2300      	movs	r3, #0
    3b84:	6063      	str	r3, [r4, #4]
    3b86:	6923      	ldr	r3, [r4, #16]
    3b88:	6023      	str	r3, [r4, #0]
    3b8a:	04cb      	lsls	r3, r1, #19
    3b8c:	d505      	bpl.n	3b9a <__sflush_r+0x7e>
    3b8e:	1c43      	adds	r3, r0, #1
    3b90:	d102      	bne.n	3b98 <__sflush_r+0x7c>
    3b92:	682b      	ldr	r3, [r5, #0]
    3b94:	2b00      	cmp	r3, #0
    3b96:	d100      	bne.n	3b9a <__sflush_r+0x7e>
    3b98:	6560      	str	r0, [r4, #84]	; 0x54
    3b9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3b9c:	602e      	str	r6, [r5, #0]
    3b9e:	2900      	cmp	r1, #0
    3ba0:	d0c8      	beq.n	3b34 <__sflush_r+0x18>
    3ba2:	0023      	movs	r3, r4
    3ba4:	3344      	adds	r3, #68	; 0x44
    3ba6:	4299      	cmp	r1, r3
    3ba8:	d002      	beq.n	3bb0 <__sflush_r+0x94>
    3baa:	0028      	movs	r0, r5
    3bac:	f000 f9ba 	bl	3f24 <_free_r>
    3bb0:	2000      	movs	r0, #0
    3bb2:	6360      	str	r0, [r4, #52]	; 0x34
    3bb4:	e7bf      	b.n	3b36 <__sflush_r+0x1a>
    3bb6:	2301      	movs	r3, #1
    3bb8:	6a21      	ldr	r1, [r4, #32]
    3bba:	0028      	movs	r0, r5
    3bbc:	47b8      	blx	r7
    3bbe:	1c43      	adds	r3, r0, #1
    3bc0:	d1c5      	bne.n	3b4e <__sflush_r+0x32>
    3bc2:	682b      	ldr	r3, [r5, #0]
    3bc4:	2b00      	cmp	r3, #0
    3bc6:	d0c2      	beq.n	3b4e <__sflush_r+0x32>
    3bc8:	2b1d      	cmp	r3, #29
    3bca:	d001      	beq.n	3bd0 <__sflush_r+0xb4>
    3bcc:	2b16      	cmp	r3, #22
    3bce:	d101      	bne.n	3bd4 <__sflush_r+0xb8>
    3bd0:	602e      	str	r6, [r5, #0]
    3bd2:	e7af      	b.n	3b34 <__sflush_r+0x18>
    3bd4:	2340      	movs	r3, #64	; 0x40
    3bd6:	89a2      	ldrh	r2, [r4, #12]
    3bd8:	4313      	orrs	r3, r2
    3bda:	81a3      	strh	r3, [r4, #12]
    3bdc:	e7ab      	b.n	3b36 <__sflush_r+0x1a>
    3bde:	2340      	movs	r3, #64	; 0x40
    3be0:	430b      	orrs	r3, r1
    3be2:	2001      	movs	r0, #1
    3be4:	81a3      	strh	r3, [r4, #12]
    3be6:	4240      	negs	r0, r0
    3be8:	e7a5      	b.n	3b36 <__sflush_r+0x1a>
    3bea:	690f      	ldr	r7, [r1, #16]
    3bec:	2f00      	cmp	r7, #0
    3bee:	d0a1      	beq.n	3b34 <__sflush_r+0x18>
    3bf0:	680b      	ldr	r3, [r1, #0]
    3bf2:	600f      	str	r7, [r1, #0]
    3bf4:	1bdb      	subs	r3, r3, r7
    3bf6:	9301      	str	r3, [sp, #4]
    3bf8:	2300      	movs	r3, #0
    3bfa:	0792      	lsls	r2, r2, #30
    3bfc:	d100      	bne.n	3c00 <__sflush_r+0xe4>
    3bfe:	694b      	ldr	r3, [r1, #20]
    3c00:	60a3      	str	r3, [r4, #8]
    3c02:	9b01      	ldr	r3, [sp, #4]
    3c04:	2b00      	cmp	r3, #0
    3c06:	dc00      	bgt.n	3c0a <__sflush_r+0xee>
    3c08:	e794      	b.n	3b34 <__sflush_r+0x18>
    3c0a:	9b01      	ldr	r3, [sp, #4]
    3c0c:	003a      	movs	r2, r7
    3c0e:	6a21      	ldr	r1, [r4, #32]
    3c10:	0028      	movs	r0, r5
    3c12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3c14:	47b0      	blx	r6
    3c16:	2800      	cmp	r0, #0
    3c18:	dc03      	bgt.n	3c22 <__sflush_r+0x106>
    3c1a:	2340      	movs	r3, #64	; 0x40
    3c1c:	89a2      	ldrh	r2, [r4, #12]
    3c1e:	4313      	orrs	r3, r2
    3c20:	e7df      	b.n	3be2 <__sflush_r+0xc6>
    3c22:	9b01      	ldr	r3, [sp, #4]
    3c24:	183f      	adds	r7, r7, r0
    3c26:	1a1b      	subs	r3, r3, r0
    3c28:	9301      	str	r3, [sp, #4]
    3c2a:	e7ea      	b.n	3c02 <__sflush_r+0xe6>
    3c2c:	20400001 	.word	0x20400001

00003c30 <_fflush_r>:
    3c30:	690b      	ldr	r3, [r1, #16]
    3c32:	b570      	push	{r4, r5, r6, lr}
    3c34:	0005      	movs	r5, r0
    3c36:	000c      	movs	r4, r1
    3c38:	2b00      	cmp	r3, #0
    3c3a:	d101      	bne.n	3c40 <_fflush_r+0x10>
    3c3c:	2000      	movs	r0, #0
    3c3e:	bd70      	pop	{r4, r5, r6, pc}
    3c40:	2800      	cmp	r0, #0
    3c42:	d004      	beq.n	3c4e <_fflush_r+0x1e>
    3c44:	6983      	ldr	r3, [r0, #24]
    3c46:	2b00      	cmp	r3, #0
    3c48:	d101      	bne.n	3c4e <_fflush_r+0x1e>
    3c4a:	f000 f85f 	bl	3d0c <__sinit>
    3c4e:	4b0b      	ldr	r3, [pc, #44]	; (3c7c <_fflush_r+0x4c>)
    3c50:	429c      	cmp	r4, r3
    3c52:	d109      	bne.n	3c68 <_fflush_r+0x38>
    3c54:	686c      	ldr	r4, [r5, #4]
    3c56:	220c      	movs	r2, #12
    3c58:	5ea3      	ldrsh	r3, [r4, r2]
    3c5a:	2b00      	cmp	r3, #0
    3c5c:	d0ee      	beq.n	3c3c <_fflush_r+0xc>
    3c5e:	0021      	movs	r1, r4
    3c60:	0028      	movs	r0, r5
    3c62:	f7ff ff5b 	bl	3b1c <__sflush_r>
    3c66:	e7ea      	b.n	3c3e <_fflush_r+0xe>
    3c68:	4b05      	ldr	r3, [pc, #20]	; (3c80 <_fflush_r+0x50>)
    3c6a:	429c      	cmp	r4, r3
    3c6c:	d101      	bne.n	3c72 <_fflush_r+0x42>
    3c6e:	68ac      	ldr	r4, [r5, #8]
    3c70:	e7f1      	b.n	3c56 <_fflush_r+0x26>
    3c72:	4b04      	ldr	r3, [pc, #16]	; (3c84 <_fflush_r+0x54>)
    3c74:	429c      	cmp	r4, r3
    3c76:	d1ee      	bne.n	3c56 <_fflush_r+0x26>
    3c78:	68ec      	ldr	r4, [r5, #12]
    3c7a:	e7ec      	b.n	3c56 <_fflush_r+0x26>
    3c7c:	0000520c 	.word	0x0000520c
    3c80:	0000522c 	.word	0x0000522c
    3c84:	000051ec 	.word	0x000051ec

00003c88 <_cleanup_r>:
    3c88:	b510      	push	{r4, lr}
    3c8a:	4902      	ldr	r1, [pc, #8]	; (3c94 <_cleanup_r+0xc>)
    3c8c:	f000 f8b2 	bl	3df4 <_fwalk_reent>
    3c90:	bd10      	pop	{r4, pc}
    3c92:	46c0      	nop			; (mov r8, r8)
    3c94:	00003c31 	.word	0x00003c31

00003c98 <std.isra.0>:
    3c98:	2300      	movs	r3, #0
    3c9a:	b510      	push	{r4, lr}
    3c9c:	0004      	movs	r4, r0
    3c9e:	6003      	str	r3, [r0, #0]
    3ca0:	6043      	str	r3, [r0, #4]
    3ca2:	6083      	str	r3, [r0, #8]
    3ca4:	8181      	strh	r1, [r0, #12]
    3ca6:	6643      	str	r3, [r0, #100]	; 0x64
    3ca8:	81c2      	strh	r2, [r0, #14]
    3caa:	6103      	str	r3, [r0, #16]
    3cac:	6143      	str	r3, [r0, #20]
    3cae:	6183      	str	r3, [r0, #24]
    3cb0:	0019      	movs	r1, r3
    3cb2:	2208      	movs	r2, #8
    3cb4:	305c      	adds	r0, #92	; 0x5c
    3cb6:	f7ff fd23 	bl	3700 <memset>
    3cba:	4b05      	ldr	r3, [pc, #20]	; (3cd0 <std.isra.0+0x38>)
    3cbc:	6224      	str	r4, [r4, #32]
    3cbe:	6263      	str	r3, [r4, #36]	; 0x24
    3cc0:	4b04      	ldr	r3, [pc, #16]	; (3cd4 <std.isra.0+0x3c>)
    3cc2:	62a3      	str	r3, [r4, #40]	; 0x28
    3cc4:	4b04      	ldr	r3, [pc, #16]	; (3cd8 <std.isra.0+0x40>)
    3cc6:	62e3      	str	r3, [r4, #44]	; 0x2c
    3cc8:	4b04      	ldr	r3, [pc, #16]	; (3cdc <std.isra.0+0x44>)
    3cca:	6323      	str	r3, [r4, #48]	; 0x30
    3ccc:	bd10      	pop	{r4, pc}
    3cce:	46c0      	nop			; (mov r8, r8)
    3cd0:	00004631 	.word	0x00004631
    3cd4:	00004659 	.word	0x00004659
    3cd8:	00004691 	.word	0x00004691
    3cdc:	000046bd 	.word	0x000046bd

00003ce0 <__sfmoreglue>:
    3ce0:	b570      	push	{r4, r5, r6, lr}
    3ce2:	2568      	movs	r5, #104	; 0x68
    3ce4:	1e4a      	subs	r2, r1, #1
    3ce6:	4355      	muls	r5, r2
    3ce8:	000e      	movs	r6, r1
    3cea:	0029      	movs	r1, r5
    3cec:	3174      	adds	r1, #116	; 0x74
    3cee:	f000 f963 	bl	3fb8 <_malloc_r>
    3cf2:	1e04      	subs	r4, r0, #0
    3cf4:	d008      	beq.n	3d08 <__sfmoreglue+0x28>
    3cf6:	2100      	movs	r1, #0
    3cf8:	002a      	movs	r2, r5
    3cfa:	6001      	str	r1, [r0, #0]
    3cfc:	6046      	str	r6, [r0, #4]
    3cfe:	300c      	adds	r0, #12
    3d00:	60a0      	str	r0, [r4, #8]
    3d02:	3268      	adds	r2, #104	; 0x68
    3d04:	f7ff fcfc 	bl	3700 <memset>
    3d08:	0020      	movs	r0, r4
    3d0a:	bd70      	pop	{r4, r5, r6, pc}

00003d0c <__sinit>:
    3d0c:	6983      	ldr	r3, [r0, #24]
    3d0e:	b513      	push	{r0, r1, r4, lr}
    3d10:	0004      	movs	r4, r0
    3d12:	2b00      	cmp	r3, #0
    3d14:	d128      	bne.n	3d68 <__sinit+0x5c>
    3d16:	6483      	str	r3, [r0, #72]	; 0x48
    3d18:	64c3      	str	r3, [r0, #76]	; 0x4c
    3d1a:	6503      	str	r3, [r0, #80]	; 0x50
    3d1c:	4b13      	ldr	r3, [pc, #76]	; (3d6c <__sinit+0x60>)
    3d1e:	4a14      	ldr	r2, [pc, #80]	; (3d70 <__sinit+0x64>)
    3d20:	681b      	ldr	r3, [r3, #0]
    3d22:	6282      	str	r2, [r0, #40]	; 0x28
    3d24:	9301      	str	r3, [sp, #4]
    3d26:	4298      	cmp	r0, r3
    3d28:	d101      	bne.n	3d2e <__sinit+0x22>
    3d2a:	2301      	movs	r3, #1
    3d2c:	6183      	str	r3, [r0, #24]
    3d2e:	0020      	movs	r0, r4
    3d30:	f000 f820 	bl	3d74 <__sfp>
    3d34:	6060      	str	r0, [r4, #4]
    3d36:	0020      	movs	r0, r4
    3d38:	f000 f81c 	bl	3d74 <__sfp>
    3d3c:	60a0      	str	r0, [r4, #8]
    3d3e:	0020      	movs	r0, r4
    3d40:	f000 f818 	bl	3d74 <__sfp>
    3d44:	2200      	movs	r2, #0
    3d46:	60e0      	str	r0, [r4, #12]
    3d48:	2104      	movs	r1, #4
    3d4a:	6860      	ldr	r0, [r4, #4]
    3d4c:	f7ff ffa4 	bl	3c98 <std.isra.0>
    3d50:	2201      	movs	r2, #1
    3d52:	2109      	movs	r1, #9
    3d54:	68a0      	ldr	r0, [r4, #8]
    3d56:	f7ff ff9f 	bl	3c98 <std.isra.0>
    3d5a:	2202      	movs	r2, #2
    3d5c:	2112      	movs	r1, #18
    3d5e:	68e0      	ldr	r0, [r4, #12]
    3d60:	f7ff ff9a 	bl	3c98 <std.isra.0>
    3d64:	2301      	movs	r3, #1
    3d66:	61a3      	str	r3, [r4, #24]
    3d68:	bd13      	pop	{r0, r1, r4, pc}
    3d6a:	46c0      	nop			; (mov r8, r8)
    3d6c:	000051e8 	.word	0x000051e8
    3d70:	00003c89 	.word	0x00003c89

00003d74 <__sfp>:
    3d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d76:	4b1e      	ldr	r3, [pc, #120]	; (3df0 <__sfp+0x7c>)
    3d78:	0007      	movs	r7, r0
    3d7a:	681e      	ldr	r6, [r3, #0]
    3d7c:	69b3      	ldr	r3, [r6, #24]
    3d7e:	2b00      	cmp	r3, #0
    3d80:	d102      	bne.n	3d88 <__sfp+0x14>
    3d82:	0030      	movs	r0, r6
    3d84:	f7ff ffc2 	bl	3d0c <__sinit>
    3d88:	3648      	adds	r6, #72	; 0x48
    3d8a:	68b4      	ldr	r4, [r6, #8]
    3d8c:	6873      	ldr	r3, [r6, #4]
    3d8e:	3b01      	subs	r3, #1
    3d90:	d504      	bpl.n	3d9c <__sfp+0x28>
    3d92:	6833      	ldr	r3, [r6, #0]
    3d94:	2b00      	cmp	r3, #0
    3d96:	d007      	beq.n	3da8 <__sfp+0x34>
    3d98:	6836      	ldr	r6, [r6, #0]
    3d9a:	e7f6      	b.n	3d8a <__sfp+0x16>
    3d9c:	220c      	movs	r2, #12
    3d9e:	5ea5      	ldrsh	r5, [r4, r2]
    3da0:	2d00      	cmp	r5, #0
    3da2:	d00d      	beq.n	3dc0 <__sfp+0x4c>
    3da4:	3468      	adds	r4, #104	; 0x68
    3da6:	e7f2      	b.n	3d8e <__sfp+0x1a>
    3da8:	2104      	movs	r1, #4
    3daa:	0038      	movs	r0, r7
    3dac:	f7ff ff98 	bl	3ce0 <__sfmoreglue>
    3db0:	6030      	str	r0, [r6, #0]
    3db2:	2800      	cmp	r0, #0
    3db4:	d1f0      	bne.n	3d98 <__sfp+0x24>
    3db6:	230c      	movs	r3, #12
    3db8:	0004      	movs	r4, r0
    3dba:	603b      	str	r3, [r7, #0]
    3dbc:	0020      	movs	r0, r4
    3dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3dc0:	2301      	movs	r3, #1
    3dc2:	0020      	movs	r0, r4
    3dc4:	425b      	negs	r3, r3
    3dc6:	81e3      	strh	r3, [r4, #14]
    3dc8:	3302      	adds	r3, #2
    3dca:	81a3      	strh	r3, [r4, #12]
    3dcc:	6665      	str	r5, [r4, #100]	; 0x64
    3dce:	6025      	str	r5, [r4, #0]
    3dd0:	60a5      	str	r5, [r4, #8]
    3dd2:	6065      	str	r5, [r4, #4]
    3dd4:	6125      	str	r5, [r4, #16]
    3dd6:	6165      	str	r5, [r4, #20]
    3dd8:	61a5      	str	r5, [r4, #24]
    3dda:	2208      	movs	r2, #8
    3ddc:	0029      	movs	r1, r5
    3dde:	305c      	adds	r0, #92	; 0x5c
    3de0:	f7ff fc8e 	bl	3700 <memset>
    3de4:	6365      	str	r5, [r4, #52]	; 0x34
    3de6:	63a5      	str	r5, [r4, #56]	; 0x38
    3de8:	64a5      	str	r5, [r4, #72]	; 0x48
    3dea:	64e5      	str	r5, [r4, #76]	; 0x4c
    3dec:	e7e6      	b.n	3dbc <__sfp+0x48>
    3dee:	46c0      	nop			; (mov r8, r8)
    3df0:	000051e8 	.word	0x000051e8

00003df4 <_fwalk_reent>:
    3df4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3df6:	0004      	movs	r4, r0
    3df8:	0007      	movs	r7, r0
    3dfa:	2600      	movs	r6, #0
    3dfc:	9101      	str	r1, [sp, #4]
    3dfe:	3448      	adds	r4, #72	; 0x48
    3e00:	2c00      	cmp	r4, #0
    3e02:	d101      	bne.n	3e08 <_fwalk_reent+0x14>
    3e04:	0030      	movs	r0, r6
    3e06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3e08:	6863      	ldr	r3, [r4, #4]
    3e0a:	68a5      	ldr	r5, [r4, #8]
    3e0c:	9300      	str	r3, [sp, #0]
    3e0e:	9b00      	ldr	r3, [sp, #0]
    3e10:	3b01      	subs	r3, #1
    3e12:	9300      	str	r3, [sp, #0]
    3e14:	d501      	bpl.n	3e1a <_fwalk_reent+0x26>
    3e16:	6824      	ldr	r4, [r4, #0]
    3e18:	e7f2      	b.n	3e00 <_fwalk_reent+0xc>
    3e1a:	89ab      	ldrh	r3, [r5, #12]
    3e1c:	2b01      	cmp	r3, #1
    3e1e:	d908      	bls.n	3e32 <_fwalk_reent+0x3e>
    3e20:	220e      	movs	r2, #14
    3e22:	5eab      	ldrsh	r3, [r5, r2]
    3e24:	3301      	adds	r3, #1
    3e26:	d004      	beq.n	3e32 <_fwalk_reent+0x3e>
    3e28:	0029      	movs	r1, r5
    3e2a:	0038      	movs	r0, r7
    3e2c:	9b01      	ldr	r3, [sp, #4]
    3e2e:	4798      	blx	r3
    3e30:	4306      	orrs	r6, r0
    3e32:	3568      	adds	r5, #104	; 0x68
    3e34:	e7eb      	b.n	3e0e <_fwalk_reent+0x1a>
	...

00003e38 <__swhatbuf_r>:
    3e38:	b570      	push	{r4, r5, r6, lr}
    3e3a:	000e      	movs	r6, r1
    3e3c:	001d      	movs	r5, r3
    3e3e:	230e      	movs	r3, #14
    3e40:	5ec9      	ldrsh	r1, [r1, r3]
    3e42:	b090      	sub	sp, #64	; 0x40
    3e44:	0014      	movs	r4, r2
    3e46:	2900      	cmp	r1, #0
    3e48:	da07      	bge.n	3e5a <__swhatbuf_r+0x22>
    3e4a:	2300      	movs	r3, #0
    3e4c:	602b      	str	r3, [r5, #0]
    3e4e:	89b3      	ldrh	r3, [r6, #12]
    3e50:	061b      	lsls	r3, r3, #24
    3e52:	d411      	bmi.n	3e78 <__swhatbuf_r+0x40>
    3e54:	2380      	movs	r3, #128	; 0x80
    3e56:	00db      	lsls	r3, r3, #3
    3e58:	e00f      	b.n	3e7a <__swhatbuf_r+0x42>
    3e5a:	aa01      	add	r2, sp, #4
    3e5c:	f000 fc5a 	bl	4714 <_fstat_r>
    3e60:	2800      	cmp	r0, #0
    3e62:	dbf2      	blt.n	3e4a <__swhatbuf_r+0x12>
    3e64:	22f0      	movs	r2, #240	; 0xf0
    3e66:	9b02      	ldr	r3, [sp, #8]
    3e68:	0212      	lsls	r2, r2, #8
    3e6a:	4013      	ands	r3, r2
    3e6c:	4a05      	ldr	r2, [pc, #20]	; (3e84 <__swhatbuf_r+0x4c>)
    3e6e:	189b      	adds	r3, r3, r2
    3e70:	425a      	negs	r2, r3
    3e72:	4153      	adcs	r3, r2
    3e74:	602b      	str	r3, [r5, #0]
    3e76:	e7ed      	b.n	3e54 <__swhatbuf_r+0x1c>
    3e78:	2340      	movs	r3, #64	; 0x40
    3e7a:	2000      	movs	r0, #0
    3e7c:	6023      	str	r3, [r4, #0]
    3e7e:	b010      	add	sp, #64	; 0x40
    3e80:	bd70      	pop	{r4, r5, r6, pc}
    3e82:	46c0      	nop			; (mov r8, r8)
    3e84:	ffffe000 	.word	0xffffe000

00003e88 <__smakebuf_r>:
    3e88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3e8a:	2602      	movs	r6, #2
    3e8c:	898b      	ldrh	r3, [r1, #12]
    3e8e:	0005      	movs	r5, r0
    3e90:	000c      	movs	r4, r1
    3e92:	4233      	tst	r3, r6
    3e94:	d006      	beq.n	3ea4 <__smakebuf_r+0x1c>
    3e96:	0023      	movs	r3, r4
    3e98:	3347      	adds	r3, #71	; 0x47
    3e9a:	6023      	str	r3, [r4, #0]
    3e9c:	6123      	str	r3, [r4, #16]
    3e9e:	2301      	movs	r3, #1
    3ea0:	6163      	str	r3, [r4, #20]
    3ea2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3ea4:	ab01      	add	r3, sp, #4
    3ea6:	466a      	mov	r2, sp
    3ea8:	f7ff ffc6 	bl	3e38 <__swhatbuf_r>
    3eac:	9900      	ldr	r1, [sp, #0]
    3eae:	0007      	movs	r7, r0
    3eb0:	0028      	movs	r0, r5
    3eb2:	f000 f881 	bl	3fb8 <_malloc_r>
    3eb6:	2800      	cmp	r0, #0
    3eb8:	d108      	bne.n	3ecc <__smakebuf_r+0x44>
    3eba:	220c      	movs	r2, #12
    3ebc:	5ea3      	ldrsh	r3, [r4, r2]
    3ebe:	059a      	lsls	r2, r3, #22
    3ec0:	d4ef      	bmi.n	3ea2 <__smakebuf_r+0x1a>
    3ec2:	2203      	movs	r2, #3
    3ec4:	4393      	bics	r3, r2
    3ec6:	431e      	orrs	r6, r3
    3ec8:	81a6      	strh	r6, [r4, #12]
    3eca:	e7e4      	b.n	3e96 <__smakebuf_r+0xe>
    3ecc:	4b0f      	ldr	r3, [pc, #60]	; (3f0c <__smakebuf_r+0x84>)
    3ece:	62ab      	str	r3, [r5, #40]	; 0x28
    3ed0:	2380      	movs	r3, #128	; 0x80
    3ed2:	89a2      	ldrh	r2, [r4, #12]
    3ed4:	6020      	str	r0, [r4, #0]
    3ed6:	4313      	orrs	r3, r2
    3ed8:	81a3      	strh	r3, [r4, #12]
    3eda:	9b00      	ldr	r3, [sp, #0]
    3edc:	6120      	str	r0, [r4, #16]
    3ede:	6163      	str	r3, [r4, #20]
    3ee0:	9b01      	ldr	r3, [sp, #4]
    3ee2:	2b00      	cmp	r3, #0
    3ee4:	d00d      	beq.n	3f02 <__smakebuf_r+0x7a>
    3ee6:	230e      	movs	r3, #14
    3ee8:	5ee1      	ldrsh	r1, [r4, r3]
    3eea:	0028      	movs	r0, r5
    3eec:	f000 fc24 	bl	4738 <_isatty_r>
    3ef0:	2800      	cmp	r0, #0
    3ef2:	d006      	beq.n	3f02 <__smakebuf_r+0x7a>
    3ef4:	2203      	movs	r2, #3
    3ef6:	89a3      	ldrh	r3, [r4, #12]
    3ef8:	4393      	bics	r3, r2
    3efa:	001a      	movs	r2, r3
    3efc:	2301      	movs	r3, #1
    3efe:	4313      	orrs	r3, r2
    3f00:	81a3      	strh	r3, [r4, #12]
    3f02:	89a0      	ldrh	r0, [r4, #12]
    3f04:	4338      	orrs	r0, r7
    3f06:	81a0      	strh	r0, [r4, #12]
    3f08:	e7cb      	b.n	3ea2 <__smakebuf_r+0x1a>
    3f0a:	46c0      	nop			; (mov r8, r8)
    3f0c:	00003c89 	.word	0x00003c89

00003f10 <malloc>:
    3f10:	b510      	push	{r4, lr}
    3f12:	4b03      	ldr	r3, [pc, #12]	; (3f20 <malloc+0x10>)
    3f14:	0001      	movs	r1, r0
    3f16:	6818      	ldr	r0, [r3, #0]
    3f18:	f000 f84e 	bl	3fb8 <_malloc_r>
    3f1c:	bd10      	pop	{r4, pc}
    3f1e:	46c0      	nop			; (mov r8, r8)
    3f20:	200000a4 	.word	0x200000a4

00003f24 <_free_r>:
    3f24:	b570      	push	{r4, r5, r6, lr}
    3f26:	0005      	movs	r5, r0
    3f28:	2900      	cmp	r1, #0
    3f2a:	d010      	beq.n	3f4e <_free_r+0x2a>
    3f2c:	1f0c      	subs	r4, r1, #4
    3f2e:	6823      	ldr	r3, [r4, #0]
    3f30:	2b00      	cmp	r3, #0
    3f32:	da00      	bge.n	3f36 <_free_r+0x12>
    3f34:	18e4      	adds	r4, r4, r3
    3f36:	0028      	movs	r0, r5
    3f38:	f000 fc2f 	bl	479a <__malloc_lock>
    3f3c:	4a1d      	ldr	r2, [pc, #116]	; (3fb4 <_free_r+0x90>)
    3f3e:	6813      	ldr	r3, [r2, #0]
    3f40:	2b00      	cmp	r3, #0
    3f42:	d105      	bne.n	3f50 <_free_r+0x2c>
    3f44:	6063      	str	r3, [r4, #4]
    3f46:	6014      	str	r4, [r2, #0]
    3f48:	0028      	movs	r0, r5
    3f4a:	f000 fc27 	bl	479c <__malloc_unlock>
    3f4e:	bd70      	pop	{r4, r5, r6, pc}
    3f50:	42a3      	cmp	r3, r4
    3f52:	d909      	bls.n	3f68 <_free_r+0x44>
    3f54:	6821      	ldr	r1, [r4, #0]
    3f56:	1860      	adds	r0, r4, r1
    3f58:	4283      	cmp	r3, r0
    3f5a:	d1f3      	bne.n	3f44 <_free_r+0x20>
    3f5c:	6818      	ldr	r0, [r3, #0]
    3f5e:	685b      	ldr	r3, [r3, #4]
    3f60:	1841      	adds	r1, r0, r1
    3f62:	6021      	str	r1, [r4, #0]
    3f64:	e7ee      	b.n	3f44 <_free_r+0x20>
    3f66:	0013      	movs	r3, r2
    3f68:	685a      	ldr	r2, [r3, #4]
    3f6a:	2a00      	cmp	r2, #0
    3f6c:	d001      	beq.n	3f72 <_free_r+0x4e>
    3f6e:	42a2      	cmp	r2, r4
    3f70:	d9f9      	bls.n	3f66 <_free_r+0x42>
    3f72:	6819      	ldr	r1, [r3, #0]
    3f74:	1858      	adds	r0, r3, r1
    3f76:	42a0      	cmp	r0, r4
    3f78:	d10b      	bne.n	3f92 <_free_r+0x6e>
    3f7a:	6820      	ldr	r0, [r4, #0]
    3f7c:	1809      	adds	r1, r1, r0
    3f7e:	1858      	adds	r0, r3, r1
    3f80:	6019      	str	r1, [r3, #0]
    3f82:	4282      	cmp	r2, r0
    3f84:	d1e0      	bne.n	3f48 <_free_r+0x24>
    3f86:	6810      	ldr	r0, [r2, #0]
    3f88:	6852      	ldr	r2, [r2, #4]
    3f8a:	1841      	adds	r1, r0, r1
    3f8c:	6019      	str	r1, [r3, #0]
    3f8e:	605a      	str	r2, [r3, #4]
    3f90:	e7da      	b.n	3f48 <_free_r+0x24>
    3f92:	42a0      	cmp	r0, r4
    3f94:	d902      	bls.n	3f9c <_free_r+0x78>
    3f96:	230c      	movs	r3, #12
    3f98:	602b      	str	r3, [r5, #0]
    3f9a:	e7d5      	b.n	3f48 <_free_r+0x24>
    3f9c:	6821      	ldr	r1, [r4, #0]
    3f9e:	1860      	adds	r0, r4, r1
    3fa0:	4282      	cmp	r2, r0
    3fa2:	d103      	bne.n	3fac <_free_r+0x88>
    3fa4:	6810      	ldr	r0, [r2, #0]
    3fa6:	6852      	ldr	r2, [r2, #4]
    3fa8:	1841      	adds	r1, r0, r1
    3faa:	6021      	str	r1, [r4, #0]
    3fac:	6062      	str	r2, [r4, #4]
    3fae:	605c      	str	r4, [r3, #4]
    3fb0:	e7ca      	b.n	3f48 <_free_r+0x24>
    3fb2:	46c0      	nop			; (mov r8, r8)
    3fb4:	2000013c 	.word	0x2000013c

00003fb8 <_malloc_r>:
    3fb8:	2303      	movs	r3, #3
    3fba:	b570      	push	{r4, r5, r6, lr}
    3fbc:	1ccd      	adds	r5, r1, #3
    3fbe:	439d      	bics	r5, r3
    3fc0:	3508      	adds	r5, #8
    3fc2:	0006      	movs	r6, r0
    3fc4:	2d0c      	cmp	r5, #12
    3fc6:	d21e      	bcs.n	4006 <_malloc_r+0x4e>
    3fc8:	250c      	movs	r5, #12
    3fca:	42a9      	cmp	r1, r5
    3fcc:	d81d      	bhi.n	400a <_malloc_r+0x52>
    3fce:	0030      	movs	r0, r6
    3fd0:	f000 fbe3 	bl	479a <__malloc_lock>
    3fd4:	4a25      	ldr	r2, [pc, #148]	; (406c <_malloc_r+0xb4>)
    3fd6:	6814      	ldr	r4, [r2, #0]
    3fd8:	0021      	movs	r1, r4
    3fda:	2900      	cmp	r1, #0
    3fdc:	d119      	bne.n	4012 <_malloc_r+0x5a>
    3fde:	4c24      	ldr	r4, [pc, #144]	; (4070 <_malloc_r+0xb8>)
    3fe0:	6823      	ldr	r3, [r4, #0]
    3fe2:	2b00      	cmp	r3, #0
    3fe4:	d103      	bne.n	3fee <_malloc_r+0x36>
    3fe6:	0030      	movs	r0, r6
    3fe8:	f000 fb10 	bl	460c <_sbrk_r>
    3fec:	6020      	str	r0, [r4, #0]
    3fee:	0029      	movs	r1, r5
    3ff0:	0030      	movs	r0, r6
    3ff2:	f000 fb0b 	bl	460c <_sbrk_r>
    3ff6:	1c43      	adds	r3, r0, #1
    3ff8:	d12c      	bne.n	4054 <_malloc_r+0x9c>
    3ffa:	230c      	movs	r3, #12
    3ffc:	0030      	movs	r0, r6
    3ffe:	6033      	str	r3, [r6, #0]
    4000:	f000 fbcc 	bl	479c <__malloc_unlock>
    4004:	e003      	b.n	400e <_malloc_r+0x56>
    4006:	2d00      	cmp	r5, #0
    4008:	dadf      	bge.n	3fca <_malloc_r+0x12>
    400a:	230c      	movs	r3, #12
    400c:	6033      	str	r3, [r6, #0]
    400e:	2000      	movs	r0, #0
    4010:	bd70      	pop	{r4, r5, r6, pc}
    4012:	680b      	ldr	r3, [r1, #0]
    4014:	1b5b      	subs	r3, r3, r5
    4016:	d41a      	bmi.n	404e <_malloc_r+0x96>
    4018:	2b0b      	cmp	r3, #11
    401a:	d903      	bls.n	4024 <_malloc_r+0x6c>
    401c:	600b      	str	r3, [r1, #0]
    401e:	18cc      	adds	r4, r1, r3
    4020:	6025      	str	r5, [r4, #0]
    4022:	e003      	b.n	402c <_malloc_r+0x74>
    4024:	428c      	cmp	r4, r1
    4026:	d10e      	bne.n	4046 <_malloc_r+0x8e>
    4028:	6863      	ldr	r3, [r4, #4]
    402a:	6013      	str	r3, [r2, #0]
    402c:	0030      	movs	r0, r6
    402e:	f000 fbb5 	bl	479c <__malloc_unlock>
    4032:	0020      	movs	r0, r4
    4034:	2207      	movs	r2, #7
    4036:	300b      	adds	r0, #11
    4038:	1d23      	adds	r3, r4, #4
    403a:	4390      	bics	r0, r2
    403c:	1ac3      	subs	r3, r0, r3
    403e:	d0e7      	beq.n	4010 <_malloc_r+0x58>
    4040:	425a      	negs	r2, r3
    4042:	50e2      	str	r2, [r4, r3]
    4044:	e7e4      	b.n	4010 <_malloc_r+0x58>
    4046:	684b      	ldr	r3, [r1, #4]
    4048:	6063      	str	r3, [r4, #4]
    404a:	000c      	movs	r4, r1
    404c:	e7ee      	b.n	402c <_malloc_r+0x74>
    404e:	000c      	movs	r4, r1
    4050:	6849      	ldr	r1, [r1, #4]
    4052:	e7c2      	b.n	3fda <_malloc_r+0x22>
    4054:	2303      	movs	r3, #3
    4056:	1cc4      	adds	r4, r0, #3
    4058:	439c      	bics	r4, r3
    405a:	42a0      	cmp	r0, r4
    405c:	d0e0      	beq.n	4020 <_malloc_r+0x68>
    405e:	1a21      	subs	r1, r4, r0
    4060:	0030      	movs	r0, r6
    4062:	f000 fad3 	bl	460c <_sbrk_r>
    4066:	1c43      	adds	r3, r0, #1
    4068:	d1da      	bne.n	4020 <_malloc_r+0x68>
    406a:	e7c6      	b.n	3ffa <_malloc_r+0x42>
    406c:	2000013c 	.word	0x2000013c
    4070:	20000140 	.word	0x20000140

00004074 <__sfputc_r>:
    4074:	6893      	ldr	r3, [r2, #8]
    4076:	b510      	push	{r4, lr}
    4078:	3b01      	subs	r3, #1
    407a:	6093      	str	r3, [r2, #8]
    407c:	2b00      	cmp	r3, #0
    407e:	da05      	bge.n	408c <__sfputc_r+0x18>
    4080:	6994      	ldr	r4, [r2, #24]
    4082:	42a3      	cmp	r3, r4
    4084:	db08      	blt.n	4098 <__sfputc_r+0x24>
    4086:	b2cb      	uxtb	r3, r1
    4088:	2b0a      	cmp	r3, #10
    408a:	d005      	beq.n	4098 <__sfputc_r+0x24>
    408c:	6813      	ldr	r3, [r2, #0]
    408e:	1c58      	adds	r0, r3, #1
    4090:	6010      	str	r0, [r2, #0]
    4092:	7019      	strb	r1, [r3, #0]
    4094:	b2c8      	uxtb	r0, r1
    4096:	bd10      	pop	{r4, pc}
    4098:	f7ff fc74 	bl	3984 <__swbuf_r>
    409c:	e7fb      	b.n	4096 <__sfputc_r+0x22>

0000409e <__sfputs_r>:
    409e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40a0:	0006      	movs	r6, r0
    40a2:	000f      	movs	r7, r1
    40a4:	0014      	movs	r4, r2
    40a6:	18d5      	adds	r5, r2, r3
    40a8:	42ac      	cmp	r4, r5
    40aa:	d101      	bne.n	40b0 <__sfputs_r+0x12>
    40ac:	2000      	movs	r0, #0
    40ae:	e007      	b.n	40c0 <__sfputs_r+0x22>
    40b0:	7821      	ldrb	r1, [r4, #0]
    40b2:	003a      	movs	r2, r7
    40b4:	0030      	movs	r0, r6
    40b6:	f7ff ffdd 	bl	4074 <__sfputc_r>
    40ba:	3401      	adds	r4, #1
    40bc:	1c43      	adds	r3, r0, #1
    40be:	d1f3      	bne.n	40a8 <__sfputs_r+0xa>
    40c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000040c4 <_vfiprintf_r>:
    40c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    40c6:	b09f      	sub	sp, #124	; 0x7c
    40c8:	0006      	movs	r6, r0
    40ca:	000f      	movs	r7, r1
    40cc:	0014      	movs	r4, r2
    40ce:	9305      	str	r3, [sp, #20]
    40d0:	2800      	cmp	r0, #0
    40d2:	d004      	beq.n	40de <_vfiprintf_r+0x1a>
    40d4:	6983      	ldr	r3, [r0, #24]
    40d6:	2b00      	cmp	r3, #0
    40d8:	d101      	bne.n	40de <_vfiprintf_r+0x1a>
    40da:	f7ff fe17 	bl	3d0c <__sinit>
    40de:	4b7f      	ldr	r3, [pc, #508]	; (42dc <_vfiprintf_r+0x218>)
    40e0:	429f      	cmp	r7, r3
    40e2:	d15c      	bne.n	419e <_vfiprintf_r+0xda>
    40e4:	6877      	ldr	r7, [r6, #4]
    40e6:	89bb      	ldrh	r3, [r7, #12]
    40e8:	071b      	lsls	r3, r3, #28
    40ea:	d562      	bpl.n	41b2 <_vfiprintf_r+0xee>
    40ec:	693b      	ldr	r3, [r7, #16]
    40ee:	2b00      	cmp	r3, #0
    40f0:	d05f      	beq.n	41b2 <_vfiprintf_r+0xee>
    40f2:	2300      	movs	r3, #0
    40f4:	ad06      	add	r5, sp, #24
    40f6:	616b      	str	r3, [r5, #20]
    40f8:	3320      	adds	r3, #32
    40fa:	766b      	strb	r3, [r5, #25]
    40fc:	3310      	adds	r3, #16
    40fe:	76ab      	strb	r3, [r5, #26]
    4100:	9402      	str	r4, [sp, #8]
    4102:	9c02      	ldr	r4, [sp, #8]
    4104:	7823      	ldrb	r3, [r4, #0]
    4106:	2b00      	cmp	r3, #0
    4108:	d15d      	bne.n	41c6 <_vfiprintf_r+0x102>
    410a:	9b02      	ldr	r3, [sp, #8]
    410c:	1ae3      	subs	r3, r4, r3
    410e:	9304      	str	r3, [sp, #16]
    4110:	d00d      	beq.n	412e <_vfiprintf_r+0x6a>
    4112:	9b04      	ldr	r3, [sp, #16]
    4114:	9a02      	ldr	r2, [sp, #8]
    4116:	0039      	movs	r1, r7
    4118:	0030      	movs	r0, r6
    411a:	f7ff ffc0 	bl	409e <__sfputs_r>
    411e:	1c43      	adds	r3, r0, #1
    4120:	d100      	bne.n	4124 <_vfiprintf_r+0x60>
    4122:	e0cc      	b.n	42be <_vfiprintf_r+0x1fa>
    4124:	696a      	ldr	r2, [r5, #20]
    4126:	9b04      	ldr	r3, [sp, #16]
    4128:	4694      	mov	ip, r2
    412a:	4463      	add	r3, ip
    412c:	616b      	str	r3, [r5, #20]
    412e:	7823      	ldrb	r3, [r4, #0]
    4130:	2b00      	cmp	r3, #0
    4132:	d100      	bne.n	4136 <_vfiprintf_r+0x72>
    4134:	e0c3      	b.n	42be <_vfiprintf_r+0x1fa>
    4136:	2201      	movs	r2, #1
    4138:	2300      	movs	r3, #0
    413a:	4252      	negs	r2, r2
    413c:	606a      	str	r2, [r5, #4]
    413e:	a902      	add	r1, sp, #8
    4140:	3254      	adds	r2, #84	; 0x54
    4142:	1852      	adds	r2, r2, r1
    4144:	3401      	adds	r4, #1
    4146:	602b      	str	r3, [r5, #0]
    4148:	60eb      	str	r3, [r5, #12]
    414a:	60ab      	str	r3, [r5, #8]
    414c:	7013      	strb	r3, [r2, #0]
    414e:	65ab      	str	r3, [r5, #88]	; 0x58
    4150:	7821      	ldrb	r1, [r4, #0]
    4152:	2205      	movs	r2, #5
    4154:	4862      	ldr	r0, [pc, #392]	; (42e0 <_vfiprintf_r+0x21c>)
    4156:	f000 fb15 	bl	4784 <memchr>
    415a:	1c63      	adds	r3, r4, #1
    415c:	469c      	mov	ip, r3
    415e:	2800      	cmp	r0, #0
    4160:	d135      	bne.n	41ce <_vfiprintf_r+0x10a>
    4162:	6829      	ldr	r1, [r5, #0]
    4164:	06cb      	lsls	r3, r1, #27
    4166:	d504      	bpl.n	4172 <_vfiprintf_r+0xae>
    4168:	2353      	movs	r3, #83	; 0x53
    416a:	aa02      	add	r2, sp, #8
    416c:	3020      	adds	r0, #32
    416e:	189b      	adds	r3, r3, r2
    4170:	7018      	strb	r0, [r3, #0]
    4172:	070b      	lsls	r3, r1, #28
    4174:	d504      	bpl.n	4180 <_vfiprintf_r+0xbc>
    4176:	2353      	movs	r3, #83	; 0x53
    4178:	202b      	movs	r0, #43	; 0x2b
    417a:	aa02      	add	r2, sp, #8
    417c:	189b      	adds	r3, r3, r2
    417e:	7018      	strb	r0, [r3, #0]
    4180:	7823      	ldrb	r3, [r4, #0]
    4182:	2b2a      	cmp	r3, #42	; 0x2a
    4184:	d02c      	beq.n	41e0 <_vfiprintf_r+0x11c>
    4186:	2000      	movs	r0, #0
    4188:	210a      	movs	r1, #10
    418a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    418c:	7822      	ldrb	r2, [r4, #0]
    418e:	3a30      	subs	r2, #48	; 0x30
    4190:	2a09      	cmp	r2, #9
    4192:	d800      	bhi.n	4196 <_vfiprintf_r+0xd2>
    4194:	e06b      	b.n	426e <_vfiprintf_r+0x1aa>
    4196:	2800      	cmp	r0, #0
    4198:	d02a      	beq.n	41f0 <_vfiprintf_r+0x12c>
    419a:	9309      	str	r3, [sp, #36]	; 0x24
    419c:	e028      	b.n	41f0 <_vfiprintf_r+0x12c>
    419e:	4b51      	ldr	r3, [pc, #324]	; (42e4 <_vfiprintf_r+0x220>)
    41a0:	429f      	cmp	r7, r3
    41a2:	d101      	bne.n	41a8 <_vfiprintf_r+0xe4>
    41a4:	68b7      	ldr	r7, [r6, #8]
    41a6:	e79e      	b.n	40e6 <_vfiprintf_r+0x22>
    41a8:	4b4f      	ldr	r3, [pc, #316]	; (42e8 <_vfiprintf_r+0x224>)
    41aa:	429f      	cmp	r7, r3
    41ac:	d19b      	bne.n	40e6 <_vfiprintf_r+0x22>
    41ae:	68f7      	ldr	r7, [r6, #12]
    41b0:	e799      	b.n	40e6 <_vfiprintf_r+0x22>
    41b2:	0039      	movs	r1, r7
    41b4:	0030      	movs	r0, r6
    41b6:	f7ff fc3b 	bl	3a30 <__swsetup_r>
    41ba:	2800      	cmp	r0, #0
    41bc:	d099      	beq.n	40f2 <_vfiprintf_r+0x2e>
    41be:	2001      	movs	r0, #1
    41c0:	4240      	negs	r0, r0
    41c2:	b01f      	add	sp, #124	; 0x7c
    41c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    41c6:	2b25      	cmp	r3, #37	; 0x25
    41c8:	d09f      	beq.n	410a <_vfiprintf_r+0x46>
    41ca:	3401      	adds	r4, #1
    41cc:	e79a      	b.n	4104 <_vfiprintf_r+0x40>
    41ce:	4b44      	ldr	r3, [pc, #272]	; (42e0 <_vfiprintf_r+0x21c>)
    41d0:	6829      	ldr	r1, [r5, #0]
    41d2:	1ac0      	subs	r0, r0, r3
    41d4:	2301      	movs	r3, #1
    41d6:	4083      	lsls	r3, r0
    41d8:	430b      	orrs	r3, r1
    41da:	602b      	str	r3, [r5, #0]
    41dc:	4664      	mov	r4, ip
    41de:	e7b7      	b.n	4150 <_vfiprintf_r+0x8c>
    41e0:	9b05      	ldr	r3, [sp, #20]
    41e2:	1d18      	adds	r0, r3, #4
    41e4:	681b      	ldr	r3, [r3, #0]
    41e6:	9005      	str	r0, [sp, #20]
    41e8:	2b00      	cmp	r3, #0
    41ea:	db3a      	blt.n	4262 <_vfiprintf_r+0x19e>
    41ec:	9309      	str	r3, [sp, #36]	; 0x24
    41ee:	4664      	mov	r4, ip
    41f0:	7823      	ldrb	r3, [r4, #0]
    41f2:	2b2e      	cmp	r3, #46	; 0x2e
    41f4:	d10b      	bne.n	420e <_vfiprintf_r+0x14a>
    41f6:	7863      	ldrb	r3, [r4, #1]
    41f8:	1c62      	adds	r2, r4, #1
    41fa:	2b2a      	cmp	r3, #42	; 0x2a
    41fc:	d13f      	bne.n	427e <_vfiprintf_r+0x1ba>
    41fe:	9b05      	ldr	r3, [sp, #20]
    4200:	3402      	adds	r4, #2
    4202:	1d1a      	adds	r2, r3, #4
    4204:	681b      	ldr	r3, [r3, #0]
    4206:	9205      	str	r2, [sp, #20]
    4208:	2b00      	cmp	r3, #0
    420a:	db35      	blt.n	4278 <_vfiprintf_r+0x1b4>
    420c:	9307      	str	r3, [sp, #28]
    420e:	7821      	ldrb	r1, [r4, #0]
    4210:	2203      	movs	r2, #3
    4212:	4836      	ldr	r0, [pc, #216]	; (42ec <_vfiprintf_r+0x228>)
    4214:	f000 fab6 	bl	4784 <memchr>
    4218:	2800      	cmp	r0, #0
    421a:	d007      	beq.n	422c <_vfiprintf_r+0x168>
    421c:	4b33      	ldr	r3, [pc, #204]	; (42ec <_vfiprintf_r+0x228>)
    421e:	682a      	ldr	r2, [r5, #0]
    4220:	1ac0      	subs	r0, r0, r3
    4222:	2340      	movs	r3, #64	; 0x40
    4224:	4083      	lsls	r3, r0
    4226:	4313      	orrs	r3, r2
    4228:	602b      	str	r3, [r5, #0]
    422a:	3401      	adds	r4, #1
    422c:	7821      	ldrb	r1, [r4, #0]
    422e:	1c63      	adds	r3, r4, #1
    4230:	2206      	movs	r2, #6
    4232:	482f      	ldr	r0, [pc, #188]	; (42f0 <_vfiprintf_r+0x22c>)
    4234:	9302      	str	r3, [sp, #8]
    4236:	7629      	strb	r1, [r5, #24]
    4238:	f000 faa4 	bl	4784 <memchr>
    423c:	2800      	cmp	r0, #0
    423e:	d044      	beq.n	42ca <_vfiprintf_r+0x206>
    4240:	4b2c      	ldr	r3, [pc, #176]	; (42f4 <_vfiprintf_r+0x230>)
    4242:	2b00      	cmp	r3, #0
    4244:	d12f      	bne.n	42a6 <_vfiprintf_r+0x1e2>
    4246:	6829      	ldr	r1, [r5, #0]
    4248:	9b05      	ldr	r3, [sp, #20]
    424a:	2207      	movs	r2, #7
    424c:	05c9      	lsls	r1, r1, #23
    424e:	d528      	bpl.n	42a2 <_vfiprintf_r+0x1de>
    4250:	189b      	adds	r3, r3, r2
    4252:	4393      	bics	r3, r2
    4254:	3308      	adds	r3, #8
    4256:	9305      	str	r3, [sp, #20]
    4258:	696b      	ldr	r3, [r5, #20]
    425a:	9a03      	ldr	r2, [sp, #12]
    425c:	189b      	adds	r3, r3, r2
    425e:	616b      	str	r3, [r5, #20]
    4260:	e74f      	b.n	4102 <_vfiprintf_r+0x3e>
    4262:	425b      	negs	r3, r3
    4264:	60eb      	str	r3, [r5, #12]
    4266:	2302      	movs	r3, #2
    4268:	430b      	orrs	r3, r1
    426a:	602b      	str	r3, [r5, #0]
    426c:	e7bf      	b.n	41ee <_vfiprintf_r+0x12a>
    426e:	434b      	muls	r3, r1
    4270:	3401      	adds	r4, #1
    4272:	189b      	adds	r3, r3, r2
    4274:	2001      	movs	r0, #1
    4276:	e789      	b.n	418c <_vfiprintf_r+0xc8>
    4278:	2301      	movs	r3, #1
    427a:	425b      	negs	r3, r3
    427c:	e7c6      	b.n	420c <_vfiprintf_r+0x148>
    427e:	2300      	movs	r3, #0
    4280:	0014      	movs	r4, r2
    4282:	200a      	movs	r0, #10
    4284:	001a      	movs	r2, r3
    4286:	606b      	str	r3, [r5, #4]
    4288:	7821      	ldrb	r1, [r4, #0]
    428a:	3930      	subs	r1, #48	; 0x30
    428c:	2909      	cmp	r1, #9
    428e:	d903      	bls.n	4298 <_vfiprintf_r+0x1d4>
    4290:	2b00      	cmp	r3, #0
    4292:	d0bc      	beq.n	420e <_vfiprintf_r+0x14a>
    4294:	9207      	str	r2, [sp, #28]
    4296:	e7ba      	b.n	420e <_vfiprintf_r+0x14a>
    4298:	4342      	muls	r2, r0
    429a:	3401      	adds	r4, #1
    429c:	1852      	adds	r2, r2, r1
    429e:	2301      	movs	r3, #1
    42a0:	e7f2      	b.n	4288 <_vfiprintf_r+0x1c4>
    42a2:	3307      	adds	r3, #7
    42a4:	e7d5      	b.n	4252 <_vfiprintf_r+0x18e>
    42a6:	ab05      	add	r3, sp, #20
    42a8:	9300      	str	r3, [sp, #0]
    42aa:	003a      	movs	r2, r7
    42ac:	4b12      	ldr	r3, [pc, #72]	; (42f8 <_vfiprintf_r+0x234>)
    42ae:	0029      	movs	r1, r5
    42b0:	0030      	movs	r0, r6
    42b2:	e000      	b.n	42b6 <_vfiprintf_r+0x1f2>
    42b4:	bf00      	nop
    42b6:	9003      	str	r0, [sp, #12]
    42b8:	9b03      	ldr	r3, [sp, #12]
    42ba:	3301      	adds	r3, #1
    42bc:	d1cc      	bne.n	4258 <_vfiprintf_r+0x194>
    42be:	89bb      	ldrh	r3, [r7, #12]
    42c0:	065b      	lsls	r3, r3, #25
    42c2:	d500      	bpl.n	42c6 <_vfiprintf_r+0x202>
    42c4:	e77b      	b.n	41be <_vfiprintf_r+0xfa>
    42c6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    42c8:	e77b      	b.n	41c2 <_vfiprintf_r+0xfe>
    42ca:	ab05      	add	r3, sp, #20
    42cc:	9300      	str	r3, [sp, #0]
    42ce:	003a      	movs	r2, r7
    42d0:	4b09      	ldr	r3, [pc, #36]	; (42f8 <_vfiprintf_r+0x234>)
    42d2:	0029      	movs	r1, r5
    42d4:	0030      	movs	r0, r6
    42d6:	f000 f87f 	bl	43d8 <_printf_i>
    42da:	e7ec      	b.n	42b6 <_vfiprintf_r+0x1f2>
    42dc:	0000520c 	.word	0x0000520c
    42e0:	0000524c 	.word	0x0000524c
    42e4:	0000522c 	.word	0x0000522c
    42e8:	000051ec 	.word	0x000051ec
    42ec:	00005252 	.word	0x00005252
    42f0:	00005256 	.word	0x00005256
    42f4:	00000000 	.word	0x00000000
    42f8:	0000409f 	.word	0x0000409f

000042fc <_printf_common>:
    42fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    42fe:	0015      	movs	r5, r2
    4300:	9301      	str	r3, [sp, #4]
    4302:	688a      	ldr	r2, [r1, #8]
    4304:	690b      	ldr	r3, [r1, #16]
    4306:	9000      	str	r0, [sp, #0]
    4308:	000c      	movs	r4, r1
    430a:	4293      	cmp	r3, r2
    430c:	da00      	bge.n	4310 <_printf_common+0x14>
    430e:	0013      	movs	r3, r2
    4310:	0022      	movs	r2, r4
    4312:	602b      	str	r3, [r5, #0]
    4314:	3243      	adds	r2, #67	; 0x43
    4316:	7812      	ldrb	r2, [r2, #0]
    4318:	2a00      	cmp	r2, #0
    431a:	d001      	beq.n	4320 <_printf_common+0x24>
    431c:	3301      	adds	r3, #1
    431e:	602b      	str	r3, [r5, #0]
    4320:	6823      	ldr	r3, [r4, #0]
    4322:	069b      	lsls	r3, r3, #26
    4324:	d502      	bpl.n	432c <_printf_common+0x30>
    4326:	682b      	ldr	r3, [r5, #0]
    4328:	3302      	adds	r3, #2
    432a:	602b      	str	r3, [r5, #0]
    432c:	2706      	movs	r7, #6
    432e:	6823      	ldr	r3, [r4, #0]
    4330:	401f      	ands	r7, r3
    4332:	d027      	beq.n	4384 <_printf_common+0x88>
    4334:	0023      	movs	r3, r4
    4336:	3343      	adds	r3, #67	; 0x43
    4338:	781b      	ldrb	r3, [r3, #0]
    433a:	1e5a      	subs	r2, r3, #1
    433c:	4193      	sbcs	r3, r2
    433e:	6822      	ldr	r2, [r4, #0]
    4340:	0692      	lsls	r2, r2, #26
    4342:	d430      	bmi.n	43a6 <_printf_common+0xaa>
    4344:	0022      	movs	r2, r4
    4346:	9901      	ldr	r1, [sp, #4]
    4348:	3243      	adds	r2, #67	; 0x43
    434a:	9800      	ldr	r0, [sp, #0]
    434c:	9e08      	ldr	r6, [sp, #32]
    434e:	47b0      	blx	r6
    4350:	1c43      	adds	r3, r0, #1
    4352:	d025      	beq.n	43a0 <_printf_common+0xa4>
    4354:	2306      	movs	r3, #6
    4356:	6820      	ldr	r0, [r4, #0]
    4358:	682a      	ldr	r2, [r5, #0]
    435a:	68e1      	ldr	r1, [r4, #12]
    435c:	4003      	ands	r3, r0
    435e:	2500      	movs	r5, #0
    4360:	2b04      	cmp	r3, #4
    4362:	d103      	bne.n	436c <_printf_common+0x70>
    4364:	1a8d      	subs	r5, r1, r2
    4366:	43eb      	mvns	r3, r5
    4368:	17db      	asrs	r3, r3, #31
    436a:	401d      	ands	r5, r3
    436c:	68a3      	ldr	r3, [r4, #8]
    436e:	6922      	ldr	r2, [r4, #16]
    4370:	4293      	cmp	r3, r2
    4372:	dd01      	ble.n	4378 <_printf_common+0x7c>
    4374:	1a9b      	subs	r3, r3, r2
    4376:	18ed      	adds	r5, r5, r3
    4378:	2700      	movs	r7, #0
    437a:	42bd      	cmp	r5, r7
    437c:	d120      	bne.n	43c0 <_printf_common+0xc4>
    437e:	2000      	movs	r0, #0
    4380:	e010      	b.n	43a4 <_printf_common+0xa8>
    4382:	3701      	adds	r7, #1
    4384:	68e3      	ldr	r3, [r4, #12]
    4386:	682a      	ldr	r2, [r5, #0]
    4388:	1a9b      	subs	r3, r3, r2
    438a:	429f      	cmp	r7, r3
    438c:	dad2      	bge.n	4334 <_printf_common+0x38>
    438e:	0022      	movs	r2, r4
    4390:	2301      	movs	r3, #1
    4392:	3219      	adds	r2, #25
    4394:	9901      	ldr	r1, [sp, #4]
    4396:	9800      	ldr	r0, [sp, #0]
    4398:	9e08      	ldr	r6, [sp, #32]
    439a:	47b0      	blx	r6
    439c:	1c43      	adds	r3, r0, #1
    439e:	d1f0      	bne.n	4382 <_printf_common+0x86>
    43a0:	2001      	movs	r0, #1
    43a2:	4240      	negs	r0, r0
    43a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    43a6:	2030      	movs	r0, #48	; 0x30
    43a8:	18e1      	adds	r1, r4, r3
    43aa:	3143      	adds	r1, #67	; 0x43
    43ac:	7008      	strb	r0, [r1, #0]
    43ae:	0021      	movs	r1, r4
    43b0:	1c5a      	adds	r2, r3, #1
    43b2:	3145      	adds	r1, #69	; 0x45
    43b4:	7809      	ldrb	r1, [r1, #0]
    43b6:	18a2      	adds	r2, r4, r2
    43b8:	3243      	adds	r2, #67	; 0x43
    43ba:	3302      	adds	r3, #2
    43bc:	7011      	strb	r1, [r2, #0]
    43be:	e7c1      	b.n	4344 <_printf_common+0x48>
    43c0:	0022      	movs	r2, r4
    43c2:	2301      	movs	r3, #1
    43c4:	321a      	adds	r2, #26
    43c6:	9901      	ldr	r1, [sp, #4]
    43c8:	9800      	ldr	r0, [sp, #0]
    43ca:	9e08      	ldr	r6, [sp, #32]
    43cc:	47b0      	blx	r6
    43ce:	1c43      	adds	r3, r0, #1
    43d0:	d0e6      	beq.n	43a0 <_printf_common+0xa4>
    43d2:	3701      	adds	r7, #1
    43d4:	e7d1      	b.n	437a <_printf_common+0x7e>
	...

000043d8 <_printf_i>:
    43d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    43da:	b08b      	sub	sp, #44	; 0x2c
    43dc:	9206      	str	r2, [sp, #24]
    43de:	000a      	movs	r2, r1
    43e0:	3243      	adds	r2, #67	; 0x43
    43e2:	9307      	str	r3, [sp, #28]
    43e4:	9005      	str	r0, [sp, #20]
    43e6:	9204      	str	r2, [sp, #16]
    43e8:	7e0a      	ldrb	r2, [r1, #24]
    43ea:	000c      	movs	r4, r1
    43ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
    43ee:	2a6e      	cmp	r2, #110	; 0x6e
    43f0:	d100      	bne.n	43f4 <_printf_i+0x1c>
    43f2:	e08f      	b.n	4514 <_printf_i+0x13c>
    43f4:	d817      	bhi.n	4426 <_printf_i+0x4e>
    43f6:	2a63      	cmp	r2, #99	; 0x63
    43f8:	d02c      	beq.n	4454 <_printf_i+0x7c>
    43fa:	d808      	bhi.n	440e <_printf_i+0x36>
    43fc:	2a00      	cmp	r2, #0
    43fe:	d100      	bne.n	4402 <_printf_i+0x2a>
    4400:	e099      	b.n	4536 <_printf_i+0x15e>
    4402:	2a58      	cmp	r2, #88	; 0x58
    4404:	d054      	beq.n	44b0 <_printf_i+0xd8>
    4406:	0026      	movs	r6, r4
    4408:	3642      	adds	r6, #66	; 0x42
    440a:	7032      	strb	r2, [r6, #0]
    440c:	e029      	b.n	4462 <_printf_i+0x8a>
    440e:	2a64      	cmp	r2, #100	; 0x64
    4410:	d001      	beq.n	4416 <_printf_i+0x3e>
    4412:	2a69      	cmp	r2, #105	; 0x69
    4414:	d1f7      	bne.n	4406 <_printf_i+0x2e>
    4416:	6821      	ldr	r1, [r4, #0]
    4418:	681a      	ldr	r2, [r3, #0]
    441a:	0608      	lsls	r0, r1, #24
    441c:	d523      	bpl.n	4466 <_printf_i+0x8e>
    441e:	1d11      	adds	r1, r2, #4
    4420:	6019      	str	r1, [r3, #0]
    4422:	6815      	ldr	r5, [r2, #0]
    4424:	e025      	b.n	4472 <_printf_i+0x9a>
    4426:	2a73      	cmp	r2, #115	; 0x73
    4428:	d100      	bne.n	442c <_printf_i+0x54>
    442a:	e088      	b.n	453e <_printf_i+0x166>
    442c:	d808      	bhi.n	4440 <_printf_i+0x68>
    442e:	2a6f      	cmp	r2, #111	; 0x6f
    4430:	d029      	beq.n	4486 <_printf_i+0xae>
    4432:	2a70      	cmp	r2, #112	; 0x70
    4434:	d1e7      	bne.n	4406 <_printf_i+0x2e>
    4436:	2220      	movs	r2, #32
    4438:	6809      	ldr	r1, [r1, #0]
    443a:	430a      	orrs	r2, r1
    443c:	6022      	str	r2, [r4, #0]
    443e:	e003      	b.n	4448 <_printf_i+0x70>
    4440:	2a75      	cmp	r2, #117	; 0x75
    4442:	d020      	beq.n	4486 <_printf_i+0xae>
    4444:	2a78      	cmp	r2, #120	; 0x78
    4446:	d1de      	bne.n	4406 <_printf_i+0x2e>
    4448:	0022      	movs	r2, r4
    444a:	2178      	movs	r1, #120	; 0x78
    444c:	3245      	adds	r2, #69	; 0x45
    444e:	7011      	strb	r1, [r2, #0]
    4450:	4a6c      	ldr	r2, [pc, #432]	; (4604 <_printf_i+0x22c>)
    4452:	e030      	b.n	44b6 <_printf_i+0xde>
    4454:	000e      	movs	r6, r1
    4456:	681a      	ldr	r2, [r3, #0]
    4458:	3642      	adds	r6, #66	; 0x42
    445a:	1d11      	adds	r1, r2, #4
    445c:	6019      	str	r1, [r3, #0]
    445e:	6813      	ldr	r3, [r2, #0]
    4460:	7033      	strb	r3, [r6, #0]
    4462:	2301      	movs	r3, #1
    4464:	e079      	b.n	455a <_printf_i+0x182>
    4466:	0649      	lsls	r1, r1, #25
    4468:	d5d9      	bpl.n	441e <_printf_i+0x46>
    446a:	1d11      	adds	r1, r2, #4
    446c:	6019      	str	r1, [r3, #0]
    446e:	2300      	movs	r3, #0
    4470:	5ed5      	ldrsh	r5, [r2, r3]
    4472:	2d00      	cmp	r5, #0
    4474:	da03      	bge.n	447e <_printf_i+0xa6>
    4476:	232d      	movs	r3, #45	; 0x2d
    4478:	9a04      	ldr	r2, [sp, #16]
    447a:	426d      	negs	r5, r5
    447c:	7013      	strb	r3, [r2, #0]
    447e:	4b62      	ldr	r3, [pc, #392]	; (4608 <_printf_i+0x230>)
    4480:	270a      	movs	r7, #10
    4482:	9303      	str	r3, [sp, #12]
    4484:	e02f      	b.n	44e6 <_printf_i+0x10e>
    4486:	6820      	ldr	r0, [r4, #0]
    4488:	6819      	ldr	r1, [r3, #0]
    448a:	0605      	lsls	r5, r0, #24
    448c:	d503      	bpl.n	4496 <_printf_i+0xbe>
    448e:	1d08      	adds	r0, r1, #4
    4490:	6018      	str	r0, [r3, #0]
    4492:	680d      	ldr	r5, [r1, #0]
    4494:	e005      	b.n	44a2 <_printf_i+0xca>
    4496:	0640      	lsls	r0, r0, #25
    4498:	d5f9      	bpl.n	448e <_printf_i+0xb6>
    449a:	680d      	ldr	r5, [r1, #0]
    449c:	1d08      	adds	r0, r1, #4
    449e:	6018      	str	r0, [r3, #0]
    44a0:	b2ad      	uxth	r5, r5
    44a2:	4b59      	ldr	r3, [pc, #356]	; (4608 <_printf_i+0x230>)
    44a4:	2708      	movs	r7, #8
    44a6:	9303      	str	r3, [sp, #12]
    44a8:	2a6f      	cmp	r2, #111	; 0x6f
    44aa:	d018      	beq.n	44de <_printf_i+0x106>
    44ac:	270a      	movs	r7, #10
    44ae:	e016      	b.n	44de <_printf_i+0x106>
    44b0:	3145      	adds	r1, #69	; 0x45
    44b2:	700a      	strb	r2, [r1, #0]
    44b4:	4a54      	ldr	r2, [pc, #336]	; (4608 <_printf_i+0x230>)
    44b6:	9203      	str	r2, [sp, #12]
    44b8:	681a      	ldr	r2, [r3, #0]
    44ba:	6821      	ldr	r1, [r4, #0]
    44bc:	1d10      	adds	r0, r2, #4
    44be:	6018      	str	r0, [r3, #0]
    44c0:	6815      	ldr	r5, [r2, #0]
    44c2:	0608      	lsls	r0, r1, #24
    44c4:	d522      	bpl.n	450c <_printf_i+0x134>
    44c6:	07cb      	lsls	r3, r1, #31
    44c8:	d502      	bpl.n	44d0 <_printf_i+0xf8>
    44ca:	2320      	movs	r3, #32
    44cc:	4319      	orrs	r1, r3
    44ce:	6021      	str	r1, [r4, #0]
    44d0:	2710      	movs	r7, #16
    44d2:	2d00      	cmp	r5, #0
    44d4:	d103      	bne.n	44de <_printf_i+0x106>
    44d6:	2320      	movs	r3, #32
    44d8:	6822      	ldr	r2, [r4, #0]
    44da:	439a      	bics	r2, r3
    44dc:	6022      	str	r2, [r4, #0]
    44de:	0023      	movs	r3, r4
    44e0:	2200      	movs	r2, #0
    44e2:	3343      	adds	r3, #67	; 0x43
    44e4:	701a      	strb	r2, [r3, #0]
    44e6:	6863      	ldr	r3, [r4, #4]
    44e8:	60a3      	str	r3, [r4, #8]
    44ea:	2b00      	cmp	r3, #0
    44ec:	db5c      	blt.n	45a8 <_printf_i+0x1d0>
    44ee:	2204      	movs	r2, #4
    44f0:	6821      	ldr	r1, [r4, #0]
    44f2:	4391      	bics	r1, r2
    44f4:	6021      	str	r1, [r4, #0]
    44f6:	2d00      	cmp	r5, #0
    44f8:	d158      	bne.n	45ac <_printf_i+0x1d4>
    44fa:	9e04      	ldr	r6, [sp, #16]
    44fc:	2b00      	cmp	r3, #0
    44fe:	d064      	beq.n	45ca <_printf_i+0x1f2>
    4500:	0026      	movs	r6, r4
    4502:	9b03      	ldr	r3, [sp, #12]
    4504:	3642      	adds	r6, #66	; 0x42
    4506:	781b      	ldrb	r3, [r3, #0]
    4508:	7033      	strb	r3, [r6, #0]
    450a:	e05e      	b.n	45ca <_printf_i+0x1f2>
    450c:	0648      	lsls	r0, r1, #25
    450e:	d5da      	bpl.n	44c6 <_printf_i+0xee>
    4510:	b2ad      	uxth	r5, r5
    4512:	e7d8      	b.n	44c6 <_printf_i+0xee>
    4514:	6809      	ldr	r1, [r1, #0]
    4516:	681a      	ldr	r2, [r3, #0]
    4518:	0608      	lsls	r0, r1, #24
    451a:	d505      	bpl.n	4528 <_printf_i+0x150>
    451c:	1d11      	adds	r1, r2, #4
    451e:	6019      	str	r1, [r3, #0]
    4520:	6813      	ldr	r3, [r2, #0]
    4522:	6962      	ldr	r2, [r4, #20]
    4524:	601a      	str	r2, [r3, #0]
    4526:	e006      	b.n	4536 <_printf_i+0x15e>
    4528:	0649      	lsls	r1, r1, #25
    452a:	d5f7      	bpl.n	451c <_printf_i+0x144>
    452c:	1d11      	adds	r1, r2, #4
    452e:	6019      	str	r1, [r3, #0]
    4530:	6813      	ldr	r3, [r2, #0]
    4532:	8aa2      	ldrh	r2, [r4, #20]
    4534:	801a      	strh	r2, [r3, #0]
    4536:	2300      	movs	r3, #0
    4538:	9e04      	ldr	r6, [sp, #16]
    453a:	6123      	str	r3, [r4, #16]
    453c:	e054      	b.n	45e8 <_printf_i+0x210>
    453e:	681a      	ldr	r2, [r3, #0]
    4540:	1d11      	adds	r1, r2, #4
    4542:	6019      	str	r1, [r3, #0]
    4544:	6816      	ldr	r6, [r2, #0]
    4546:	2100      	movs	r1, #0
    4548:	6862      	ldr	r2, [r4, #4]
    454a:	0030      	movs	r0, r6
    454c:	f000 f91a 	bl	4784 <memchr>
    4550:	2800      	cmp	r0, #0
    4552:	d001      	beq.n	4558 <_printf_i+0x180>
    4554:	1b80      	subs	r0, r0, r6
    4556:	6060      	str	r0, [r4, #4]
    4558:	6863      	ldr	r3, [r4, #4]
    455a:	6123      	str	r3, [r4, #16]
    455c:	2300      	movs	r3, #0
    455e:	9a04      	ldr	r2, [sp, #16]
    4560:	7013      	strb	r3, [r2, #0]
    4562:	e041      	b.n	45e8 <_printf_i+0x210>
    4564:	6923      	ldr	r3, [r4, #16]
    4566:	0032      	movs	r2, r6
    4568:	9906      	ldr	r1, [sp, #24]
    456a:	9805      	ldr	r0, [sp, #20]
    456c:	9d07      	ldr	r5, [sp, #28]
    456e:	47a8      	blx	r5
    4570:	1c43      	adds	r3, r0, #1
    4572:	d043      	beq.n	45fc <_printf_i+0x224>
    4574:	6823      	ldr	r3, [r4, #0]
    4576:	2500      	movs	r5, #0
    4578:	079b      	lsls	r3, r3, #30
    457a:	d40f      	bmi.n	459c <_printf_i+0x1c4>
    457c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    457e:	68e0      	ldr	r0, [r4, #12]
    4580:	4298      	cmp	r0, r3
    4582:	da3d      	bge.n	4600 <_printf_i+0x228>
    4584:	0018      	movs	r0, r3
    4586:	e03b      	b.n	4600 <_printf_i+0x228>
    4588:	0022      	movs	r2, r4
    458a:	2301      	movs	r3, #1
    458c:	3219      	adds	r2, #25
    458e:	9906      	ldr	r1, [sp, #24]
    4590:	9805      	ldr	r0, [sp, #20]
    4592:	9e07      	ldr	r6, [sp, #28]
    4594:	47b0      	blx	r6
    4596:	1c43      	adds	r3, r0, #1
    4598:	d030      	beq.n	45fc <_printf_i+0x224>
    459a:	3501      	adds	r5, #1
    459c:	68e3      	ldr	r3, [r4, #12]
    459e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    45a0:	1a9b      	subs	r3, r3, r2
    45a2:	429d      	cmp	r5, r3
    45a4:	dbf0      	blt.n	4588 <_printf_i+0x1b0>
    45a6:	e7e9      	b.n	457c <_printf_i+0x1a4>
    45a8:	2d00      	cmp	r5, #0
    45aa:	d0a9      	beq.n	4500 <_printf_i+0x128>
    45ac:	9e04      	ldr	r6, [sp, #16]
    45ae:	0028      	movs	r0, r5
    45b0:	0039      	movs	r1, r7
    45b2:	f7fd fd89 	bl	20c8 <__aeabi_uidivmod>
    45b6:	9b03      	ldr	r3, [sp, #12]
    45b8:	3e01      	subs	r6, #1
    45ba:	5c5b      	ldrb	r3, [r3, r1]
    45bc:	0028      	movs	r0, r5
    45be:	7033      	strb	r3, [r6, #0]
    45c0:	0039      	movs	r1, r7
    45c2:	f7fd fcfb 	bl	1fbc <__udivsi3>
    45c6:	1e05      	subs	r5, r0, #0
    45c8:	d1f1      	bne.n	45ae <_printf_i+0x1d6>
    45ca:	2f08      	cmp	r7, #8
    45cc:	d109      	bne.n	45e2 <_printf_i+0x20a>
    45ce:	6823      	ldr	r3, [r4, #0]
    45d0:	07db      	lsls	r3, r3, #31
    45d2:	d506      	bpl.n	45e2 <_printf_i+0x20a>
    45d4:	6863      	ldr	r3, [r4, #4]
    45d6:	6922      	ldr	r2, [r4, #16]
    45d8:	4293      	cmp	r3, r2
    45da:	dc02      	bgt.n	45e2 <_printf_i+0x20a>
    45dc:	2330      	movs	r3, #48	; 0x30
    45de:	3e01      	subs	r6, #1
    45e0:	7033      	strb	r3, [r6, #0]
    45e2:	9b04      	ldr	r3, [sp, #16]
    45e4:	1b9b      	subs	r3, r3, r6
    45e6:	6123      	str	r3, [r4, #16]
    45e8:	9b07      	ldr	r3, [sp, #28]
    45ea:	aa09      	add	r2, sp, #36	; 0x24
    45ec:	9300      	str	r3, [sp, #0]
    45ee:	0021      	movs	r1, r4
    45f0:	9b06      	ldr	r3, [sp, #24]
    45f2:	9805      	ldr	r0, [sp, #20]
    45f4:	f7ff fe82 	bl	42fc <_printf_common>
    45f8:	1c43      	adds	r3, r0, #1
    45fa:	d1b3      	bne.n	4564 <_printf_i+0x18c>
    45fc:	2001      	movs	r0, #1
    45fe:	4240      	negs	r0, r0
    4600:	b00b      	add	sp, #44	; 0x2c
    4602:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4604:	0000526e 	.word	0x0000526e
    4608:	0000525d 	.word	0x0000525d

0000460c <_sbrk_r>:
    460c:	2300      	movs	r3, #0
    460e:	b570      	push	{r4, r5, r6, lr}
    4610:	4c06      	ldr	r4, [pc, #24]	; (462c <_sbrk_r+0x20>)
    4612:	0005      	movs	r5, r0
    4614:	0008      	movs	r0, r1
    4616:	6023      	str	r3, [r4, #0]
    4618:	f7fc fb38 	bl	c8c <_sbrk>
    461c:	1c43      	adds	r3, r0, #1
    461e:	d103      	bne.n	4628 <_sbrk_r+0x1c>
    4620:	6823      	ldr	r3, [r4, #0]
    4622:	2b00      	cmp	r3, #0
    4624:	d000      	beq.n	4628 <_sbrk_r+0x1c>
    4626:	602b      	str	r3, [r5, #0]
    4628:	bd70      	pop	{r4, r5, r6, pc}
    462a:	46c0      	nop			; (mov r8, r8)
    462c:	200001dc 	.word	0x200001dc

00004630 <__sread>:
    4630:	b570      	push	{r4, r5, r6, lr}
    4632:	000c      	movs	r4, r1
    4634:	250e      	movs	r5, #14
    4636:	5f49      	ldrsh	r1, [r1, r5]
    4638:	f000 f8b2 	bl	47a0 <_read_r>
    463c:	2800      	cmp	r0, #0
    463e:	db03      	blt.n	4648 <__sread+0x18>
    4640:	6d63      	ldr	r3, [r4, #84]	; 0x54
    4642:	181b      	adds	r3, r3, r0
    4644:	6563      	str	r3, [r4, #84]	; 0x54
    4646:	bd70      	pop	{r4, r5, r6, pc}
    4648:	89a3      	ldrh	r3, [r4, #12]
    464a:	4a02      	ldr	r2, [pc, #8]	; (4654 <__sread+0x24>)
    464c:	4013      	ands	r3, r2
    464e:	81a3      	strh	r3, [r4, #12]
    4650:	e7f9      	b.n	4646 <__sread+0x16>
    4652:	46c0      	nop			; (mov r8, r8)
    4654:	ffffefff 	.word	0xffffefff

00004658 <__swrite>:
    4658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    465a:	001f      	movs	r7, r3
    465c:	898b      	ldrh	r3, [r1, #12]
    465e:	0005      	movs	r5, r0
    4660:	000c      	movs	r4, r1
    4662:	0016      	movs	r6, r2
    4664:	05db      	lsls	r3, r3, #23
    4666:	d505      	bpl.n	4674 <__swrite+0x1c>
    4668:	230e      	movs	r3, #14
    466a:	5ec9      	ldrsh	r1, [r1, r3]
    466c:	2200      	movs	r2, #0
    466e:	2302      	movs	r3, #2
    4670:	f000 f874 	bl	475c <_lseek_r>
    4674:	89a3      	ldrh	r3, [r4, #12]
    4676:	4a05      	ldr	r2, [pc, #20]	; (468c <__swrite+0x34>)
    4678:	0028      	movs	r0, r5
    467a:	4013      	ands	r3, r2
    467c:	81a3      	strh	r3, [r4, #12]
    467e:	0032      	movs	r2, r6
    4680:	230e      	movs	r3, #14
    4682:	5ee1      	ldrsh	r1, [r4, r3]
    4684:	003b      	movs	r3, r7
    4686:	f000 f81f 	bl	46c8 <_write_r>
    468a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    468c:	ffffefff 	.word	0xffffefff

00004690 <__sseek>:
    4690:	b570      	push	{r4, r5, r6, lr}
    4692:	000c      	movs	r4, r1
    4694:	250e      	movs	r5, #14
    4696:	5f49      	ldrsh	r1, [r1, r5]
    4698:	f000 f860 	bl	475c <_lseek_r>
    469c:	89a3      	ldrh	r3, [r4, #12]
    469e:	1c42      	adds	r2, r0, #1
    46a0:	d103      	bne.n	46aa <__sseek+0x1a>
    46a2:	4a05      	ldr	r2, [pc, #20]	; (46b8 <__sseek+0x28>)
    46a4:	4013      	ands	r3, r2
    46a6:	81a3      	strh	r3, [r4, #12]
    46a8:	bd70      	pop	{r4, r5, r6, pc}
    46aa:	2280      	movs	r2, #128	; 0x80
    46ac:	0152      	lsls	r2, r2, #5
    46ae:	4313      	orrs	r3, r2
    46b0:	81a3      	strh	r3, [r4, #12]
    46b2:	6560      	str	r0, [r4, #84]	; 0x54
    46b4:	e7f8      	b.n	46a8 <__sseek+0x18>
    46b6:	46c0      	nop			; (mov r8, r8)
    46b8:	ffffefff 	.word	0xffffefff

000046bc <__sclose>:
    46bc:	b510      	push	{r4, lr}
    46be:	230e      	movs	r3, #14
    46c0:	5ec9      	ldrsh	r1, [r1, r3]
    46c2:	f000 f815 	bl	46f0 <_close_r>
    46c6:	bd10      	pop	{r4, pc}

000046c8 <_write_r>:
    46c8:	b570      	push	{r4, r5, r6, lr}
    46ca:	0005      	movs	r5, r0
    46cc:	0008      	movs	r0, r1
    46ce:	0011      	movs	r1, r2
    46d0:	2200      	movs	r2, #0
    46d2:	4c06      	ldr	r4, [pc, #24]	; (46ec <_write_r+0x24>)
    46d4:	6022      	str	r2, [r4, #0]
    46d6:	001a      	movs	r2, r3
    46d8:	f7fd fc08 	bl	1eec <_write>
    46dc:	1c43      	adds	r3, r0, #1
    46de:	d103      	bne.n	46e8 <_write_r+0x20>
    46e0:	6823      	ldr	r3, [r4, #0]
    46e2:	2b00      	cmp	r3, #0
    46e4:	d000      	beq.n	46e8 <_write_r+0x20>
    46e6:	602b      	str	r3, [r5, #0]
    46e8:	bd70      	pop	{r4, r5, r6, pc}
    46ea:	46c0      	nop			; (mov r8, r8)
    46ec:	200001dc 	.word	0x200001dc

000046f0 <_close_r>:
    46f0:	2300      	movs	r3, #0
    46f2:	b570      	push	{r4, r5, r6, lr}
    46f4:	4c06      	ldr	r4, [pc, #24]	; (4710 <_close_r+0x20>)
    46f6:	0005      	movs	r5, r0
    46f8:	0008      	movs	r0, r1
    46fa:	6023      	str	r3, [r4, #0]
    46fc:	f7fc fad8 	bl	cb0 <_close>
    4700:	1c43      	adds	r3, r0, #1
    4702:	d103      	bne.n	470c <_close_r+0x1c>
    4704:	6823      	ldr	r3, [r4, #0]
    4706:	2b00      	cmp	r3, #0
    4708:	d000      	beq.n	470c <_close_r+0x1c>
    470a:	602b      	str	r3, [r5, #0]
    470c:	bd70      	pop	{r4, r5, r6, pc}
    470e:	46c0      	nop			; (mov r8, r8)
    4710:	200001dc 	.word	0x200001dc

00004714 <_fstat_r>:
    4714:	2300      	movs	r3, #0
    4716:	b570      	push	{r4, r5, r6, lr}
    4718:	4c06      	ldr	r4, [pc, #24]	; (4734 <_fstat_r+0x20>)
    471a:	0005      	movs	r5, r0
    471c:	0008      	movs	r0, r1
    471e:	0011      	movs	r1, r2
    4720:	6023      	str	r3, [r4, #0]
    4722:	f7fc fac8 	bl	cb6 <_fstat>
    4726:	1c43      	adds	r3, r0, #1
    4728:	d103      	bne.n	4732 <_fstat_r+0x1e>
    472a:	6823      	ldr	r3, [r4, #0]
    472c:	2b00      	cmp	r3, #0
    472e:	d000      	beq.n	4732 <_fstat_r+0x1e>
    4730:	602b      	str	r3, [r5, #0]
    4732:	bd70      	pop	{r4, r5, r6, pc}
    4734:	200001dc 	.word	0x200001dc

00004738 <_isatty_r>:
    4738:	2300      	movs	r3, #0
    473a:	b570      	push	{r4, r5, r6, lr}
    473c:	4c06      	ldr	r4, [pc, #24]	; (4758 <_isatty_r+0x20>)
    473e:	0005      	movs	r5, r0
    4740:	0008      	movs	r0, r1
    4742:	6023      	str	r3, [r4, #0]
    4744:	f7fc fabc 	bl	cc0 <_isatty>
    4748:	1c43      	adds	r3, r0, #1
    474a:	d103      	bne.n	4754 <_isatty_r+0x1c>
    474c:	6823      	ldr	r3, [r4, #0]
    474e:	2b00      	cmp	r3, #0
    4750:	d000      	beq.n	4754 <_isatty_r+0x1c>
    4752:	602b      	str	r3, [r5, #0]
    4754:	bd70      	pop	{r4, r5, r6, pc}
    4756:	46c0      	nop			; (mov r8, r8)
    4758:	200001dc 	.word	0x200001dc

0000475c <_lseek_r>:
    475c:	b570      	push	{r4, r5, r6, lr}
    475e:	0005      	movs	r5, r0
    4760:	0008      	movs	r0, r1
    4762:	0011      	movs	r1, r2
    4764:	2200      	movs	r2, #0
    4766:	4c06      	ldr	r4, [pc, #24]	; (4780 <_lseek_r+0x24>)
    4768:	6022      	str	r2, [r4, #0]
    476a:	001a      	movs	r2, r3
    476c:	f7fc faaa 	bl	cc4 <_lseek>
    4770:	1c43      	adds	r3, r0, #1
    4772:	d103      	bne.n	477c <_lseek_r+0x20>
    4774:	6823      	ldr	r3, [r4, #0]
    4776:	2b00      	cmp	r3, #0
    4778:	d000      	beq.n	477c <_lseek_r+0x20>
    477a:	602b      	str	r3, [r5, #0]
    477c:	bd70      	pop	{r4, r5, r6, pc}
    477e:	46c0      	nop			; (mov r8, r8)
    4780:	200001dc 	.word	0x200001dc

00004784 <memchr>:
    4784:	b2c9      	uxtb	r1, r1
    4786:	1882      	adds	r2, r0, r2
    4788:	4290      	cmp	r0, r2
    478a:	d101      	bne.n	4790 <memchr+0xc>
    478c:	2000      	movs	r0, #0
    478e:	4770      	bx	lr
    4790:	7803      	ldrb	r3, [r0, #0]
    4792:	428b      	cmp	r3, r1
    4794:	d0fb      	beq.n	478e <memchr+0xa>
    4796:	3001      	adds	r0, #1
    4798:	e7f6      	b.n	4788 <memchr+0x4>

0000479a <__malloc_lock>:
    479a:	4770      	bx	lr

0000479c <__malloc_unlock>:
    479c:	4770      	bx	lr
	...

000047a0 <_read_r>:
    47a0:	b570      	push	{r4, r5, r6, lr}
    47a2:	0005      	movs	r5, r0
    47a4:	0008      	movs	r0, r1
    47a6:	0011      	movs	r1, r2
    47a8:	2200      	movs	r2, #0
    47aa:	4c06      	ldr	r4, [pc, #24]	; (47c4 <_read_r+0x24>)
    47ac:	6022      	str	r2, [r4, #0]
    47ae:	001a      	movs	r2, r3
    47b0:	f7fd fb88 	bl	1ec4 <_read>
    47b4:	1c43      	adds	r3, r0, #1
    47b6:	d103      	bne.n	47c0 <_read_r+0x20>
    47b8:	6823      	ldr	r3, [r4, #0]
    47ba:	2b00      	cmp	r3, #0
    47bc:	d000      	beq.n	47c0 <_read_r+0x20>
    47be:	602b      	str	r3, [r5, #0]
    47c0:	bd70      	pop	{r4, r5, r6, pc}
    47c2:	46c0      	nop			; (mov r8, r8)
    47c4:	200001dc 	.word	0x200001dc
    47c8:	00af148d 	.word	0x00af148d
    47cc:	00ae108d 	.word	0x00ae108d

000047d0 <F8X16>:
	...
    47e0:	f8000000 00000000 33000000 00000030     ...........30...
    47f0:	060c1000 00060c10 00000000 00000000     ................
    4800:	4078c040 004078c0 04043f04 0004043f     @.x@.x@..?..?...
    4810:	fc887000 00003008 ff201800 00001e21     .p...0.... .!...
    4820:	00f008f0 000018e0 031c2100 001e211e     .........!...!..
    4830:	8808f000 00000070 2423211e 10212719     ....p....!#$.'!.
    4840:	000e1610 00000000 00000000 00000000     ................
    4850:	e0000000 00020418 07000000 00402018     ............. @.
    4860:	18040200 000000e0 18204000 00000007     .........@ .....
    4870:	f0804040 00404080 0f010202 00020201     @@...@@.........
    4880:	f0000000 00000000 1f010101 00010101     ................
	...
    4898:	0070b080 00000000 00000000 00000000     ..p.............
    48a8:	01010100 01010101 00000000 00000000     ................
    48b8:	00303000 00000000 00000000 04186080     .00..........`..
    48c8:	06186000 00000001 0810e000 00e01008     .`..............
    48d8:	20100f00 000f1020 f8101000 00000000     ...  ...........
    48e8:	3f202000 00002020 08087000 00708808     .  ?  ...p....p.
    48f8:	24283000 00302122 88083000 00304888     .0($"!0..0...H0.
    4908:	20201800 000e1120 20c00000 0000f810     ..   ...... ....
    4918:	24040700 00243f24 8808f800 00080888     ...$$?$.........
    4928:	20211900 000e1120 8810e000 00001888     ..!  ...........
    4938:	20110f00 000e1120 08083800 000838c8     ...  ....8...8..
    4948:	3f000000 00000000 08887000 00708808     ...?.....p....p.
    4958:	21221c00 001c2221 0810e000 00e01008     .."!!"..........
    4968:	22310000 000f1122 c0000000 000000c0     ..1""...........
    4978:	30000000 00000030 80000000 00000000     ...00...........
    4988:	60800000 00000000 40800000 00081020     ...`.......@ ...
    4998:	04020100 00201008 40404040 00404040     ...... .@@@@@@@.
    49a8:	04040404 00040404 20100800 00008040     ........... @...
    49b8:	08102000 00010204 08487000 00f00808     . .......pH.....
    49c8:	30000000 00000136 28c830c0 00e010e8     ...06....0.(....
    49d8:	24271807 000b1423 38c00000 000000e0     ..'$#......8....
    49e8:	02233c20 20382702 8888f808 00007088      <#..'8 .....p..
    49f8:	20203f20 000e1120 080830c0 00380808      ?   ....0....8.
    4a08:	20201807 00081020 0808f808 00e01008     ..   ...........
    4a18:	20203f20 000f1020 8888f808 001008e8      ?   ...........
    4a28:	20203f20 00182023 8888f808 001008e8      ?  # ..........
    4a38:	00203f20 00000003 080830c0 00003808      ? ......0...8..
    4a48:	20201807 00021e22 0008f808 08f80800     ..  "...........
    4a58:	01213f20 203f2101 f8080800 00000808      ?!..!? ........
    4a68:	3f202000 00002020 08080000 000808f8     .  ?  ..........
    4a78:	808080c0 0000007f c088f808 00081828     ............(...
    4a88:	01203f20 00203826 0008f808 00000000      ? .&8 .........
    4a98:	20203f20 00302020 00f8f808 0008f8f8      ?    0.........
    4aa8:	3f003f20 00203f00 c030f808 08f80800      ?.?.? ...0.....
    4ab8:	00203f20 003f1807 080810e0 00e01008      ? ...?.........
    4ac8:	2020100f 000f1020 0808f808 00f00808     ..   ...........
    4ad8:	01213f20 00000101 080810e0 00e01008      ?!.............
    4ae8:	2424180f 004f5038 8888f808 00708888     ..$$8PO.......p.
    4af8:	00203f20 20300c03 08887000 00380808      ? ...0 .p....8.
    4b08:	21203800 001c2221 f8080818 00180808     .8 !!"..........
    4b18:	3f200000 00000020 0008f808 08f80800     .. ? ...........
    4b28:	20201f00 001f2020 00887808 0838c800     ..    ...x....8.
    4b38:	38070000 0000010e f80008f8 00f80800     ...8............
    4b48:	00073c03 00033c07 80681808 08186880     .<...<....h..h..
    4b58:	032c3020 20302c03 00c83808 000838c8      0,..,0 .8...8..
    4b68:	3f200000 00000020 08080810 000838c8     .. ? ........8..
    4b78:	21263820 00182020 fe000000 00020202      8&!  ..........
    4b88:	7f000000 00404040 c0300c00 00000000     ....@@@...0.....
    4b98:	01000000 00c03806 02020200 000000fe     .....8..........
    4ba8:	40404000 0000007f 02040000 00040202     .@@@............
	...
    4bc8:	80808080 80808080 04020200 00000000     ................
	...
    4be0:	80800000 00008080 22241900 203f2222     ..........$"""? 
    4bf0:	8000f808 00000080 20113f00 000e1120     .........?.  ...
    4c00:	80000000 00008080 20110e00 00112020     ...........   ..
    4c10:	80000000 00f88880 20110e00 203f1020     ...........  .? 
    4c20:	80800000 00008080 22221f00 00132222     ..........""""..
    4c30:	f0808000 18888888 3f202000 00002020     .........  ?  ..
    4c40:	80800000 00808080 94946b00 00609394     .........k....`.
    4c50:	8000f808 00008080 00213f20 203f2000     ........ ?!.. ? 
    4c60:	98988000 00000000 3f202000 00002020     .........  ?  ..
    4c70:	80000000 00009898 8080c000 00007f80     ................
    4c80:	0000f808 00808080 02243f20 0020302d     ........ ?$.-0 .
    4c90:	f8080800 00000000 3f202000 00002020     .........  ?  ..
    4ca0:	80808080 00808080 00203f20 3f00203f     ........ ? .? .?
    4cb0:	80008080 00008080 00213f20 203f2000     ........ ?!.. ? 
    4cc0:	80800000 00008080 20201f00 001f2020     ..........    ..
    4cd0:	80008080 00000080 20a1ff80 000e1120     ...........  ...
    4ce0:	80000000 00808080 20110e00 80ffa020     ...........  ...
    4cf0:	00808080 00808080 213f2020 00010020     ........  ?! ...
    4d00:	80800000 00808080 24243300 00192424     .........3$$$$..
    4d10:	e0808000 00008080 1f000000 00002020     ............  ..
    4d20:	00008080 00808000 20201f00 203f1020     ..........   .? 
    4d30:	00808080 80808000 300e0100 00010608     ...........0....
    4d40:	80008080 80808000 030c300f 000f300c     .........0...0..
    4d50:	00808000 00808080 2e312000 0020310e     ......... 1..1 .
    4d60:	00808080 80808000 708e8180 00010618     ...........p....
    4d70:	80808000 00808080 2c302100 00302122     .........!0,"!0.
    4d80:	00000000 02027c80 00000000 40403f00     .....|.......?@@
    4d90:	00000000 000000ff 00000000 000000ff     ................
    4da0:	7c020200 00000080 3f404000 00000000     ...|.....@@?....
    4db0:	01010600 04040202 00000000 00000000     ................

00004dc0 <F6x8>:
	...
    4dc8:	00002f00 00070000 14000007 147f147f     ./..............
    4dd8:	7f2a2400 6200122a 23130864 55493600     .$*.*..bd..#.6IU
    4de8:	00005022 00000305 221c0000 00000041     "P........."A...
    4df8:	001c2241 3e081400 08001408 08083e08     A".....>.....>..
    4e08:	a0000000 08000060 08080808 60600000     ....`.........``
    4e18:	20000000 02040810 49513e00 00003e45     ... .....>QIE>..
    4e28:	00407f42 51614200 21004649 314b4541     B.@..BaQIF.!AEK1
    4e38:	12141800 2700107f 39454545 494a3c00     .......'EEE9.<JI
    4e48:	01003049 03050971 49493600 06003649     I0..q....6III6..
    4e58:	1e294949 36360000 00000000 00003656     II)...66....V6..
    4e68:	22140800 14000041 14141414 22410000     ..."A.........A"
    4e78:	02000814 06095101 59493200 7c003e51     .....Q...2IYQ>.|
    4e88:	7c121112 49497f00 3e003649 22414141     ...|..III6.>AAA"
    4e98:	41417f00 7f001c22 41494949 09097f00     ..AA"...IIIA....
    4ea8:	3e000109 7a494941 08087f00 00007f08     ...>AIIz........
    4eb8:	00417f41 41402000 7f00013f 41221408     A.A.. @A?....."A
    4ec8:	40407f00 7f004040 7f020c02 08047f00     ..@@@@..........
    4ed8:	3e007f10 3e414141 09097f00 3e000609     ...>AAA>.......>
    4ee8:	5e215141 19097f00 46004629 31494949     AQ!^....)F.FIII1
    4ef8:	7f010100 3f000101 3f404040 40201f00     .......?@@@?.. @
    4f08:	3f001f20 3f403840 08146300 07006314      ..?@8@?.c...c..
    4f18:	07087008 49516100 00004345 0041417f     .p...aQIEC...AA.
    4f28:	552a5500 0000552a 007f4141 01020400     .U*U*U..AA......
    4f38:	40000402 40404040 02010000 20000004     ...@@@@@....... 
    4f48:	78545454 44487f00 38003844 20444444     TTTx..HDD8.8DDD 
    4f58:	44443800 38007f48 18545454 097e0800     .8DDH..8TTT...~.
    4f68:	18000201 7ca4a4a4 04087f00 00007804     .......|.....x..
    4f78:	00407d44 84804000 7f00007d 00442810     D}@..@..}....(D.
    4f88:	7f410000 7c000040 78041804 04087c00     ..A.@..|...x.|..
    4f98:	38007804 38444444 2424fc00 18001824     .x.8DDD8..$$$...
    4fa8:	fc182424 04087c00 48000804 20545454     $$...|.....HTTT 
    4fb8:	443f0400 3c002040 7c204040 40201c00     ..?D@ .<@@ |.. @
    4fc8:	3c001c20 3c403040 10284400 1c004428      ..<@0@<.D(.(D..
    4fd8:	7ca0a0a0 54644400 1414444c 14141414     ...|.DdTLD......
    4fe8:	31647373 5f363031 5f633269 5f737562     ssd1106_i2c_bus_
    4ff8:	74697277 72652065 00000d72 44454c4f     write err...OLED
    5008:	5252455f 203a524f 20433249 74726f70     _ERROR: I2C port
    5018:	696e6920 72652074 00002e72 682f2e2e      init err...../h
    5028:	732f6c61 682f6372 695f6c61 6d5f6332     al/src/hal_i2c_m
    5038:	6e79735f 00632e63 682f2e2e 732f6c61     _sync.c.../hal/s
    5048:	682f6372 695f6c61 00632e6f 682f2e2e     rc/hal_io.c.../h
    5058:	732f6c61 682f6372 705f6c61 632e6d77     al/src/hal_pwm.c
    5068:	00000000 682f2e2e 732f6c61 682f6372     ....../hal/src/h
    5078:	755f6c61 74726173 6e79735f 00632e63     al_usart_sync.c.

00005088 <_i2cms>:
    5088:	00000000 00200014 00000100 00000049     ...... .....I...
    5098:	00d70000 00f42400                       .....$..

000050a0 <_usarts>:
    50a0:	00000003 40100004 00030000 0000e282     .......@........
    50b0:	00000000 00000004 40100004 00030000     ...........@....
    50c0:	0000e282 00000000                       ........

000050c8 <sercomspi_regs>:
	...
    50dc:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    50ec:	65735f6c 6d6f6372 0000632e              l_sercom.c..

000050f8 <_tcc_pwms>:
    50f8:	00000100 000007cf 000003e7 00000002     ................
    5108:	00000102 000007cf 000003e7 00000002     ................
    5118:	682f2e2e 742f6c70 682f6363 745f6c70     ../hpl/tcc/hpl_t
    5128:	632e6363 00000000 682f2e2e 742f6c70     cc.c....../hpl/t
    5138:	70682f63 63745f6c 0000632e 7263694d     c/hpl_tc.c..Micr
    5148:	6968436f 00000070 65480a0d 206f6c6c     oChip.....Hello 
    5158:	454d5441 6f57204c 21646c72 0000000d     ATMEL World!....
    5168:	00002308 000022ea 000022a4 000021c2     .#..."..."...!..
    5178:	000022a4 000022dc 000022a4 000021c2     ."..."..."...!..
    5188:	000022ea 000022ea 000022dc 000021c2     ."..."..."...!..
    5198:	000021ba 000021ba 000021ba 00002520     .!...!...!.. %..
    51a8:	00002968 00002828 00002828 00002824     h)..((..((..$(..
    51b8:	00002940 00002940 00002932 00002824     @)..@)..2)..$(..
    51c8:	00002940 00002932 00002940 00002824     @)..2)..@)..$(..
    51d8:	00002948 00002948 00002948 00002b4c     H)..H)..H)..L+..

000051e8 <_global_impure_ptr>:
    51e8:	200000a8                                ... 

000051ec <__sf_fake_stderr>:
	...

0000520c <__sf_fake_stdin>:
	...

0000522c <__sf_fake_stdout>:
	...
    524c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    525c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    526c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    527c:	00006665                                ef..

00005280 <_init>:
    5280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5282:	46c0      	nop			; (mov r8, r8)
    5284:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5286:	bc08      	pop	{r3}
    5288:	469e      	mov	lr, r3
    528a:	4770      	bx	lr

0000528c <__init_array_start>:
    528c:	000000dd 	.word	0x000000dd

00005290 <_fini>:
    5290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5292:	46c0      	nop			; (mov r8, r8)
    5294:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5296:	bc08      	pop	{r3}
    5298:	469e      	mov	lr, r3
    529a:	4770      	bx	lr

0000529c <__fini_array_start>:
    529c:	000000b5 	.word	0x000000b5
